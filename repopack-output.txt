This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-05T21:44:29.055Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
__mocks__/
  supabaseClient.ts
  themeContext.tsx
__tests__/
  directory-structure.test.ts
.github/
  workflows/
    playwright.yml
    unit-tests.yml
@types/
  radix-ui__react-accordion/
    index.d.ts
app/
  about/
    page.tsx
  agent-design/
    page.tsx
  agent-manager/
    [id]/
      page.tsx
    page.tsx
  agents-tasks/
    page.tsx
  analytics/
    page.tsx
  api/
    auth/
      route.ts
      session.ts
    notifications/
      index.ts
    user.ts
  auth/
    callback/
      route.ts
  bot-tasks/
    page.tsx
  chat/
    layout.tsx
  console/
    page.tsx
  contexts/
    ThemeContext.tsx
  dashboard/
    page.tsx
  documentation/
    page.tsx
  editor/
    page.tsx
  forgot-password/
    page.tsx
  home/
    page.tsx
  landing/
    layout.tsx
    page.tsx
  layouts/
    CustomLayout.tsx
  login/
    page.tsx
  members/
    page.tsx
  not-found/
    page.tsx
  notifications/
    page.tsx
  profile/
    page.tsx
  progress/
    page.tsx
  project-board/
    page.tsx
  projects/
    [ProjectId]/
      board/
        page.tsx
      tasks/
        page.tsx
    page.tsx
  quest-designer/
    page.tsx
  robot-transformer-demo/
    page.tsx
  search/
    page.tsx
  settings/
    page.tsx
  signup/
    page.tsx
  support/
    layout.tsx
    page.tsx
  task/
    [id]/
      page.tsx
  task-agent-analytics/
    page.tsx
  task-design/
    page.tsx
  task-manager/
    [taskId]/
      page.tsx
    page.tsx
  taskboard/
    edit-task-modal.tsx
    page.tsx
  tasks/
    page.tsx
  team/
    [id]/
      page.tsx
    page.tsx
  teams/
    [id]/
      page.tsx
    page.tsx
  types/
    todo.ts
  utils/
    supabase/
      client.ts
    session.ts
  _error.tsx
  404.tsx
  client-layout.tsx
  globals.css
  header.tsx
  layout.tsx
  loading.tsx
  metadata.ts
  middleware.ts
  next.config.js
  page.tsx
  taskboard.module.css
  types.ts
  Typescript-task.code-workspace
components/
  forms/
    form-message.tsx
    input.tsx
    label.tsx
    submit-button.tsx
  ui/
    accordion.tsx
    avatar-image.tsx
    avatar.tsx
    badge.tsx
    button.tsx
    card-content.tsx
    card-description.tsx
    card-footer.tsx
    card-header.tsx
    card-title.tsx
    card.tsx
    cardContent.tsx
    cardFooter.tsx
    cardHeader.tsx
    cardTitle.tsx
    dialog.tsx
    dropdown-menu.tsx
    input.tsx
    label.tsx
    progress.tsx
    scroll-area.tsx
    select.tsx
    separator.tsx
    sheet.tsx
    Slider.tsx
    spinner.tsx
    switch.tsx
    table.tsx
    tabs.tsx
    textarea.tsx
    toast.tsx
    use-toast.ts
  AddTaskModal.tsx
  agent-detail-view.tsx
  AgentView.tsx
  auth-handler.tsx
  button.tsx
  CenteredAtomSpinner.tsx
  Chart.tsx
  chat-bot-modal.tsx
  chat-icon.tsx
  chatbot-modal.tsx
  chatbot-trigger.tsx
  ChatbotModal.tsx
  ChatLayout.tsx
  ChatModal.tsx
  code-editor-icon.tsx
  CommonLayout.tsx
  Console.tsx
  CryptoPriceGraph.tsx
  Dashboard.tsx
  documentation.tsx
  Dropdown.tsx
  ExampleComponent.tsx
  FloatingActionButton.tsx
  footer.tsx
  forgot-password-form.tsx
  handle-login.tsx
  InputWrapper.tsx
  invite-user-modal.tsx
  Layout.tsx
  login.tsx
  MarketCapGraph.tsx
  MenuDropdown.tsx
  MenuPopover.tsx
  moncaco-editor.tsx
  Nav.tsx
  NavBar.tsx
  navigation-bar.tsx
  Navigation.tsx
  next-logo.tsx
  Notification.tsx
  ProgressBar.tsx
  project-board.tsx
  quick-search.tsx
  RobotTransformerWallpaper.tsx
  RobotTransformerWallpaperDemo.tsx
  SearchComponent.tsx
  session.ts
  settings-form.tsx
  SharedLayout.tsx
  SideMenu.tsx
  sign-out-button.tsx
  sign-up.tsx
  Spinner.tsx
  supabase-logo.tsx
  support-form.tsx
  support-page-content.tsx
  TabBar.tsx
  task-board.tsx
  task-card.tsx
  task-detail-view.tsx
  task.tsx
  taskboard.tsx
  TaskCard.tsx
  TaskManager.tsx
  Toast.tsx
  ToastContainer.tsx
  Tooltip.tsx
  TopBar.tsx
  YourComponent.tsx
contexts/
  ThemeContext.tsx
lib/
  activityData.ts
  dataProvider.ts
  localData.ts
  logger.ts
  mockData.ts
  project.ts
  settings.ts
  task.ts
  taskboard.ts
  taskboardColumn.ts
  teamMember.ts
  utils.ts
public/
  images/
    google.svg
    image.svg
styles/
  globals.css
  theme.ts
supabase/
  migrations/
    20240929213325_remote_schema.sql
    20240930000000_create_tables_and_set_permissions.sql
  .gitignore
  config.toml
types/
  testing-library__jest-dom/
    index.d.ts
  index.ts
  react-mermaid2.d.ts
utils/
  supabase/
    client.ts
    server.ts
  auth.ts
  cn.ts
  dataProvider.ts
  mock-client.ts
  mockClient.ts
  stubData.ts
  supabase-client.ts
  supabaseClient.ts
  supabaseDbClient.ts
  utils.ts
.babelrc
.eslintrc.js
.eslintrc.json
.gitignore
babel.config.js
eslint.config.js
global.d.ts
jest-setup.ts
jest.config.js
next.config.js
package.json
playwright.config.ts
postcss.config.js
postcss.config.ts
project.md
qodana.yaml
README.md
rename-and-update.js
tailwind.config.js
tailwind.config.ts
tsconfig.jest.json
tsconfig.json
vercel.json

================================================================
Repository Files
================================================================

================
File: __mocks__/supabaseClient.ts
================
export const createClient = jest.fn(() => ({
  auth: {
    getUser: jest.fn().mockResolvedValue({ data: { user: null }, error: null }),
  },
  // Add other methods you use in your components
}));

================
File: __mocks__/themeContext.tsx
================
import React from 'react';

export const ThemeContext = React.createContext({
  theme: 'light',
  toggleTheme: () => {},
});

export const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeContext.Provider value={{ theme: 'light', toggleTheme: jest.fn() }}>
    {children}
  </ThemeContext.Provider>
);

================
File: __tests__/directory-structure.test.ts
================
import fs from 'fs';
import path from 'path';

describe('Directory Structure', () => {
  const appDir = path.join(__dirname, '..', 'app');

  // Addd one for all the pages

    // Add one for all the tests
  it('has the correct app directory structure', () => {
    expect(fs.existsSync(appDir)).toBe(true);
    expect(fs.existsSync(path.join(appDir, 'layout.tsx'))).toBe(true);
    expect(fs.existsSync(path.join(appDir, 'page.tsx'))).toBe(true);
    // Add more checks for expected directories and files


  });

});

================
File: .github/workflows/playwright.yml
================
#name: Playwright Tests
#
#on:
#  deployment_status:  # Trigger on deployment status changes
#
#jobs:
#  run-e2es:  # Job name for end-to-end tests
#    if: github.event_name == 'deployment_status' && github.event.deployment_status.state == 'success'  # Run only if deployment is successful
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-node@v3
#      - name: Install dependencies
#        run: npm ci && npx playwright install --with-deps  # Install dependencies and Playwright browsers
#      - name: Set BASE_URL
#        run: echo "BASE_URL=${{ github.event.deployment_status.environment_url }}" >> $GITHUB_ENV  # Set BASE_URL from deployment status
#      - name: Set Bypass Token
#        run: echo "BYPASS_TOKEN=${{ secrets.BYPASS_TOKEN }}" >> $GITHUB_ENV  # Set Bypass Token from GitHub Secrets
#      - name: Run tests
#        run: npx playwright test  # Execute Playwright tests

================
File: .github/workflows/unit-tests.yml
================
name: Unit Tests
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - run: echo "No unit tests configured yet"

================
File: @types/radix-ui__react-accordion/index.d.ts
================
declare module '@radix-ui/react-accordion' {
  // Add the necessary type declarations here
  import * as React from 'react';

  export const Root: React.FC<any>;
  export const Item: React.FC<any>;
  export const Trigger: React.FC<any>;
  export const Content: React.FC<any>;
  export const Header: React.FC<any>;
}

================
File: app/about/page.tsx
================
import React from 'react';

export default function AboutPage() {
  return (
    <div>
      <h1>About Us</h1>
      <p>Welcome to our about page. We are a company dedicated to creating amazing products.</p>
    </div>
  );
}

================
File: app/agent-design/page.tsx
================
'use client';

import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Switch } from "@/components/ui/switch";
import { Bot, Send, Zap, Settings, Calendar, Clock, BarChart } from 'lucide-react';
import Slider from '@geist-ui/react/esm/slider/slider';

const AgentDesignPage: React.FC = () => {
  const [messages, setMessages] = useState([
    { role: 'agent', content: 'Hello! I\'m your AI task assistant. How can I help you today?' },
    { role: 'user', content: 'Can you help me prioritize my tasks for today?' },
    { role: 'agent', content: 'I\'ll analyze your current tasks and deadlines to suggest a prioritized list. Give me a moment...' },
    { role: 'agent', content: 'Based on your deadlines and task importance, here\'s a suggested priority list for today:\n\n1. Complete project proposal (due tomorrow)\n2. Review and respond to client emails\n3. Prepare for team meeting at 2 PM\n4. Start research for upcoming presentation\n5. Update task board with current progress\n\nWould you like me to create these tasks in your task list?' },
  ]);

  const [inputMessage, setInputMessage] = useState('');

  const handleSendMessage = () => {
    if (inputMessage.trim()) {
      setMessages([...messages, { role: 'user', content: inputMessage }]);
      setInputMessage('');
      // Simulate AI response
      setTimeout(() => {
        setMessages(prev => [...prev, { role: 'agent', content: 'I understand. I\'ll work on that right away and update your task list accordingly.' }]);
      }, 1000);
    }
  };

  return (
    <div className="container mx-auto py-10">
      <h1 className="text-4xl font-bold mb-8">AI Agent Design</h1>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader>
            <CardTitle>AI Task Assistant</CardTitle>
            <CardDescription>Interact with your AI agent to manage tasks efficiently</CardDescription>
          </CardHeader>
          <CardContent>
            <ScrollArea className="h-[400px] mb-4">
              {messages.map((message, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                  className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'} mb-4`}
                >
                  <div className={`flex items-start ${message.role === 'user' ? 'flex-row-reverse' : ''}`}>
                    <Avatar className="w-8 h-8">
                      {message.role === 'agent' ? (
                        <Bot className="w-6 h-6 text-primary" />
                      ) : (
                        <AvatarImage src="https://github.com/shadcn.png" />
                      )}
                      <AvatarFallback>{message.role === 'agent' ? 'AI' : 'You'}</AvatarFallback>
                    </Avatar>
                    <div className={`mx-2 p-3 rounded-lg ${message.role === 'user' ? 'bg-primary text-primary-foreground' : 'bg-muted'}`}>
                      {message.content}
                    </div>
                  </div>
                </motion.div>
              ))}
            </ScrollArea>
            <div className="flex items-center space-x-2">
              <Input
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                placeholder="Type your message here..."
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
              />
              <Button onClick={handleSendMessage}>
                <Send className="w-4 h-4 mr-2" />
                Send
              </Button>
            </div>
          </CardContent>
        </Card>

        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Agent Capabilities</CardTitle>
            </CardHeader>
            <CardContent>
              <ul className="space-y-2">
                <li className="flex items-center">
                  <Badge variant="outline" className="mr-2">
                    <Calendar className="w-4 h-4 mr-1" />
                    Scheduling
                  </Badge>
                  <span className="text-sm">Manage your calendar and deadlines</span>
                </li>
                <li className="flex items-center">
                  <Badge variant="outline" className="mr-2">
                    <BarChart className="w-4 h-4 mr-1" />
                    Analytics
                  </Badge>
                  <span className="text-sm">Provide insights on productivity</span>
                </li>
                <li className="flex items-center">
                  <Badge variant="outline" className="mr-2">
                    <Zap className="w-4 h-4 mr-1" />
                    Automation
                  </Badge>
                  <span className="text-sm">Automate repetitive tasks</span>
                </li>
                <li className="flex items-center">
                  <Badge variant="outline" className="mr-2">
                    <Clock className="w-4 h-4 mr-1" />
                    Reminders
                  </Badge>
                  <span className="text-sm">Send timely notifications</span>
                </li>
              </ul>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Agent Settings</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <Label htmlFor="proactivity">Proactivity Level</Label>
                  <Slider
                    id="proactivity"
                    max={100}
                    defaultValue={50}
                    step={10}
                    className="w-[60%]"
                  />
                </div>
                <div className="flex items-center justify-between">
                  <Label htmlFor="notifications">Push Notifications</Label>
                  <Switch id="notifications" />
                </div>
                <div className="flex items-center justify-between">
                  <Label htmlFor="learning">Continuous Learning</Label>
                  <Switch id="learning" defaultChecked />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default AgentDesignPage;

================
File: app/agent-manager/[id]/page.tsx
================
'use client';

    import React, { useState, useEffect } from 'react'; // Import React
    import { useRouter } from 'next/navigation';
    import AgentDetailView from '@/components/agent-detail-view'; // Ensure this path is correct
    import { Agent } from '@/types';

    // Mock data for agents
    const mockAgents: Agent[] = [
        // ... (mock agents)
        { id: "1", name: "Alice Johnson", avatar: "/placeholder.svg?height=40&width=40", expertise: "Frontend Development", backstory: "Alice is a frontend developer with a passion for creating beautiful and functional user interfaces.", tools: ["React", "Next.js", "Tailwind CSS"] },
        { id: "2", name: "Bob Smith", avatar: "/placeholder.svg?height=40&width=40", expertise: "Backend Development", backstory: "Bob is a backend developer with a passion for creating scalable and secure web applications.", tools: ["Node.js", "Express", "MongoDB"] },
        { id: "3", name: "Charlie Brown", avatar: "/placeholder.svg?height=40&width=40", expertise: "DevOps", backstory: "Charlie is a devops engineer with a passion for creating scalable and secure web applications.", tools: ["Docker", "Kubernetes", "Jenkins"] },
        { id: "4", name: "Diana Prince", avatar: "/placeholder.svg?height=40&width=40", expertise: "UI/UX Design", backstory: "Diana is a ui/ux designer with a passion for creating beautiful and functional user interfaces.", tools: ["Figma", "Adobe XD", "Sketch"] },
    ];

    export default function AgentDetailPage({ params }: { params: { id: string } }) {
        const id = params.id;
        const [agent, setAgent] = useState<Agent | null>(null);
        const [loading, setLoading] = useState(true); // Loading state
        const router = useRouter();

        useEffect(() => {
            const fetchedAgent = mockAgents.find(a => a.id === id) || null;
            setAgent(fetchedAgent);
            setLoading(false); // Set loading to false after fetching
        }, [id]);

        const handleClose = () => {
            router.push('/agent-manager');
        };

        if (loading) {
            return <div className="container mx-auto py-10 text-center">Loading...</div>; // Show loading state
        }

        if (!agent) {
            return <div className="container mx-auto py-10 text-center">Agent not found</div>;
        }

        return (
            <div className="container mx-auto p-4 bg-gray-900 text-white">
                <AgentDetailView agent={agent} isOpen={true} onClose={handleClose} />
            </div>
        );
    }

================
File: app/agent-manager/page.tsx
================
'use client';

import React from 'react';
import { Wrench, Globe, Database, FileText, User } from 'lucide-react'; // Importing the new icons
import Link from 'next/link';

const AgentManager: React.FC = () => {
    // Sample agent data for demonstration
    const agents = [
        { id: 1, avatar: 'AJ', name: 'Alice Johnson', type: 'Researcher', tools: ['Web Scraper', 'Database'], tasks: 15, successRate: '93.0%', score: 87, rank: 'Expert' },
        { id: 2, avatar: 'BS', name: 'Bob Smith', type: 'Front End', tools: ['Web Scraper'], tasks: 8, successRate: '75.0%', score: 60, rank: 'Intermediate' },
        { id: 3, avatar: 'CB', name: 'Charlie Brown', type: 'Product Manager', tools: ['Database', 'File Creator'], tasks: 20, successRate: '95.0%', score: 95, rank: 'Master' },
    ];

    return (
        <div className="p-6 bg-gray-900 text-white">
            <h1 className="text-3xl font-bold text-center mb-6">Agent Manager</h1>
            <Link href="/agent-manager/new" className="mb-4 inline-block bg-blue-600 text-white p-2 rounded hover:bg-blue-700 transition">+ Add New Agent</Link>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {agents.map(agent => (
                    <Link key={agent.id} href={`/agent-manager/${agent.id}`} className="bg-gray-800 rounded-lg shadow-md p-4 flex flex-col items-center transition-transform transform hover:scale-105">
                        <div className="text-4xl mb-2">
                            <User className="h-10 w-10" />
                        </div>
                        <h2 className="text-xl font-semibold">{agent.name}</h2>
                        <p className="text-gray-400">{agent.type}</p>
                        <div className="flex space-x-2 mt-2">
                            {agent.tools.map(tool => (
                                <span key={tool}>
                                    {tool === 'Web Scraper' && <Globe className="h-6 w-6 text-gray-300" />}
                                    {tool === 'Database' && <Database className="h-6 w-6 text-gray-300" />}
                                    {tool === 'File Creator' && <FileText className="h-6 w-6 text-gray-300" />}
                                </span>
                            ))}
                        </div>
                        <div className="mt-2">
                            <span className={`inline-block px-2 py-1 text-white rounded ${agent.rank === 'Master' ? 'bg-green-500' : agent.rank === 'Expert' ? 'bg-blue-500' : 'bg-yellow-500'}`}>
                                {agent.rank}
                            </span>
                        </div>
                        <div className="mt-2 text-center">
                            <p>Tasks: {agent.tasks}</p>
                            <p>Success Rate: {agent.successRate}</p>
                            <p>Score: {agent.score}</p>
                        </div>
                    </Link>
                ))}
            </div>
        </div>
    );
}

export default AgentManager;

================
File: app/agents-tasks/page.tsx
================
'use client';

import React, { useState } from 'react';
import RobotTransformerWallpaper from '../../components/RobotTransformerWallpaper';

interface Task {
  id: number;
  title: string;
  completed: boolean;
  category: string;
  dueDate: string;
  priority: string;
  assignedTo: string;
  estimatedTime: string;
  dependencies: string[];
}

const AgentTaskManager: React.FC = () => {
  const [tasks, setTasks] = useState<Task[]>([
    { id: 1, title: "Implement new UI component", completed: false, category: 'Frontend', dueDate: '', priority: 'High', assignedTo: 'Alice', estimatedTime: '3h', dependencies: [] },
    { id: 2, title: "Optimize database queries", completed: false, category: 'Backend', dueDate: '', priority: 'Medium', assignedTo: 'Bob', estimatedTime: '2h', dependencies: ['Task 1'] },
    // Add more default tasks here
  ]);
  const [newTask, setNewTask] = useState('');
  const [category, setCategory] = useState('Frontend');
  const [dueDate, setDueDate] = useState('');
  const [priority, setPriority] = useState('Medium');
  const [assignedTo, setAssignedTo] = useState('');
  const [estimatedTime, setEstimatedTime] = useState('');
  const [dependencies, setDependencies] = useState('');

  const addTask = () => {
    if (newTask.trim()) {
      setTasks([...tasks, {
        id: Date.now(),
        title: newTask,
        completed: false,
        category,
        dueDate,
        priority,
        assignedTo,
        estimatedTime,
        dependencies: dependencies.split(',').map(dep => dep.trim()),
      }]);
      setNewTask('');
      setDueDate('');
      setAssignedTo('');
      setEstimatedTime('');
      setDependencies('');
    }
  };

  const toggleTaskCompletion = (id: number) => {
    setTasks(tasks.map(task => 
      task.id === id ? { ...task, completed: !task.completed } : task
    ));
  };

  return (
    <div className="relative min-h-screen bg-gray-900 text-white">
      <RobotTransformerWallpaper />
      <div className="container mx-auto p-6">
        <h1 className="text-3xl font-bold mb-4">Agent Task Manager</h1>
        <div className="bg-gray-800 p-4 rounded-lg shadow-lg mb-6">
          <h2 className="text-xl font-semibold mb-2">Background Story</h2>
          <p className="mb-4">
            Welcome to the Agent Task Manager. This tool is designed to help agents efficiently manage their tasks across various domains such as Frontend, Backend, DevOps, QA Automation, UAT, and Product Management. By organizing tasks and setting priorities, agents can streamline their workflow and achieve their goals effectively.
          </p>
          <h2 className="text-xl font-semibold mb-2">Expected Output</h2>
          <p>
            The expected outcome is a well-organized task list that allows agents to track progress, meet deadlines, and ensure high-quality deliverables. By using this task manager, agents can enhance productivity and collaboration within their teams.
          </p>
        </div>
        <div className="bg-gray-800 p-4 rounded-lg shadow-lg">
          <div className="mb-4">
            <input
              type="text"
              className="w-full p-2 bg-gray-700 text-white rounded mb-2"
              placeholder="Add a new task"
              value={newTask}
              onChange={(e) => setNewTask(e.target.value)}
            />
            <div className="flex space-x-2 mb-2">
              <select
                className="p-2 bg-gray-700 text-white rounded"
                value={category}
                onChange={(e) => setCategory(e.target.value)}
              >
                <option>Frontend</option>
                <option>Backend</option>
                <option>DevOps</option>
                <option>QA Automation</option>
                <option>UAT</option>
                <option>Product</option>
              </select>
              <input
                type="date"
                className="p-2 bg-gray-700 text-white rounded"
                value={dueDate}
                onChange={(e) => setDueDate(e.target.value)}
              />
              <select
                className="p-2 bg-gray-700 text-white rounded"
                value={priority}
                onChange={(e) => setPriority(e.target.value)}
              >
                <option>High</option>
                <option>Medium</option>
                <option>Low</option>
              </select>
            </div>
            <input
              type="text"
              className="w-full p-2 bg-gray-700 text-white rounded mb-2"
              placeholder="Assigned to"
              value={assignedTo}
              onChange={(e) => setAssignedTo(e.target.value)}
            />
            <input
              type="text"
              className="w-full p-2 bg-gray-700 text-white rounded mb-2"
              placeholder="Estimated time (e.g., 2h)"
              value={estimatedTime}
              onChange={(e) => setEstimatedTime(e.target.value)}
            />
            <input
              type="text"
              className="w-full p-2 bg-gray-700 text-white rounded mb-2"
              placeholder="Dependencies (comma-separated)"
              value={dependencies}
              onChange={(e) => setDependencies(e.target.value)}
            />
            <button
              onClick={addTask}
              className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded"
            >
              Add Task
            </button>
          </div>
          <ul>
            {tasks.map(task => (
              <li key={task.id} className="flex items-center justify-between mb-2">
                <div className="flex-1">
                  <span
                    className={`block ${task.completed ? 'line-through text-gray-500' : ''}`}
                    onClick={() => toggleTaskCompletion(task.id)}
                  >
                    {task.title}
                  </span>
                  <small className="text-gray-400">
                    {task.category} | Due: {task.dueDate} | Priority: {task.priority} | Assigned to: {task.assignedTo} | Estimated time: {task.estimatedTime} | Dependencies: {task.dependencies.join(', ')}
                  </small>
                </div>
                <button
                  onClick={() => toggleTaskCompletion(task.id)}
                  className={`ml-2 ${task.completed ? 'bg-green-500' : 'bg-red-500'} hover:bg-opacity-75 text-white py-1 px-2 rounded`}
                >
                  {task.completed ? 'Undo' : 'Complete'}
                </button>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  );
};

export default AgentTaskManager;

================
File: app/analytics/page.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { AreaChart, Area, BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';

const initialTaskCompletionData = [
	{ date: '2023-01', completed: 45, total: 60 },
	{ date: '2023-02', completed: 52, total: 65 },
	{ date: '2023-03', completed: 48, total: 70 },
	{ date: '2023-04', completed: 70, total: 80 },
	{ date: '2023-05', completed: 65, total: 75 },
	{ date: '2023-06', completed: 80, total: 90 },
];

const initialTeamPerformanceData = [
	{ name: 'Development', performance: 85 },
	{ name: 'Design', performance: 78 },
	{ name: 'Marketing', performance: 92 },
	{ name: 'Product', performance: 88 },
];

const initialTaskDistributionData = [
	{ name: 'To Do', value: 30, color: '#FF6384' },
	{ name: 'In Progress', value: 45, color: '#36A2EB' },
	{ name: 'Done', value: 25, color: '#FFCE56' },
];

export default function AnalyticsPage() {
	const [taskCompletionData, setTaskCompletionData] = useState(initialTaskCompletionData);
	const [teamPerformanceData, setTeamPerformanceData] = useState(initialTeamPerformanceData);
	const [taskDistributionData, setTaskDistributionData] = useState(initialTaskDistributionData);

	useEffect(() => {
		const interval = setInterval(() => {
			setTaskCompletionData((prevData) =>
				prevData.map((entry) => ({
					...entry,
					completed: Math.max(0, Math.min(entry.total, entry.completed + Math.floor(Math.random() * 10 - 5))),
				}))
			);

			setTeamPerformanceData((prevData) =>
				prevData.map((entry) => ({
					...entry,
					performance: Math.max(0, Math.min(100, entry.performance + Math.floor(Math.random() * 10 - 5))),
				}))
			);

			setTaskDistributionData((prevData) => {
				const total = prevData.reduce((sum, entry) => sum + entry.value, 0);
				return prevData.map((entry) => ({
					...entry,
					value: Math.max(0, Math.min(total, entry.value + Math.floor(Math.random() * 10 - 5))),
				}));
			});
		}, Math.floor(Math.random() * 6000) + 4000);

		return () => clearInterval(interval);
	}, []);

	return (
		<div className="container mx-auto py-10">
			<h1 className="text-4xl font-bold mb-8">Analytics Dashboard</h1>
			<div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
				<Card>
					<CardHeader>
						<CardTitle>Task Completion Over Time</CardTitle>
						<CardDescription>Completed tasks vs total tasks</CardDescription>
					</CardHeader>
					<CardContent>
						<div className="h-[300px]">
							<ResponsiveContainer width="100%" height="100%">
								<AreaChart data={taskCompletionData}>
									<CartesianGrid strokeDasharray="3 3" />
									<XAxis dataKey="date" />
									<YAxis />
									<Tooltip />
									<Legend />
									<Area type="monotone" dataKey="total" stroke="#8884d8" fill="#8884d8" name="Total Tasks" />
									<Area type="monotone" dataKey="completed" stroke="#82ca9d" fill="#82ca9d" name="Completed Tasks" />
								</AreaChart>
							</ResponsiveContainer>
						</div>
					</CardContent>
				</Card>

				<Card>
					<CardHeader>
						<CardTitle>Team Performance</CardTitle>
						<CardDescription>Performance score by team</CardDescription>
					</CardHeader>
					<CardContent>
						<div className="h-[300px]">
							<ResponsiveContainer width="100%" height="100%">
								<BarChart data={teamPerformanceData}>
									<CartesianGrid strokeDasharray="3 3" />
									<XAxis dataKey="name" />
									<YAxis />
									<Tooltip />
									<Legend />
									<Bar dataKey="performance" fill="#8884d8" name="Performance Score" />
								</BarChart>
							</ResponsiveContainer>
						</div>
					</CardContent>
				</Card>

				<Card>
					<CardHeader>
						<CardTitle>Task Distribution</CardTitle>
						<CardDescription>Current status of all tasks</CardDescription>
					</CardHeader>
					<CardContent>
						<div className="h-[300px]">
							<ResponsiveContainer width="100%" height="100%">
								<PieChart>
									<Pie
										data={taskDistributionData}
										cx="50%"
										cy="50%"
										labelLine={false}
										outerRadius={80}
										fill="#8884d8"
										dataKey="value"
										label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
									>
										{taskDistributionData.map((entry, index) => (
											<Cell key={`cell-${index}`} fill={entry.color} />
										))}
									</Pie>
									<Tooltip />
									<Legend />
								</PieChart>
							</ResponsiveContainer>
						</div>
					</CardContent>
				</Card>
			</div>
		</div>
	);
}

================
File: app/api/auth/route.ts
================
//@ts-nocheck
import { NextResponse } from 'next/server';

import { handleLogin } from '@/components/session';

export async function POST(request: Request) {
    console.log('Received login request'); // Debug log
    const { email, password } = await request.json();
    console.log('Email:', email); // Log the email for debugging
    return handleLogin(email, password);
}

================
File: app/api/auth/session.ts
================
import { NextResponse } from 'next/server';
import { supabase } from '@/utils/supabase/client';

export async function GET() {
    const { data, error } = await supabase.auth.getSession();

    if (error || !data.session) {
        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    return NextResponse.json({ user: data.session.user });
}

================
File: app/api/notifications/index.ts
================
import { NextApiRequest, NextApiResponse } from 'next';

// Mock data for notifications
const mockNotifications = [
    { id: '1', message: 'New task assigned to you', createdAt: new Date().toISOString() },
    { id: '2', message: 'Project deadline approaching', createdAt: new Date(Date.now() - 86400000).toISOString() },
    { id: '3', message: 'Team meeting scheduled for tomorrow', createdAt: new Date(Date.now() - 172800000).toISOString() },
];

export default async function getNotifications(req: NextApiRequest, res: NextApiResponse) {
    // Simulate a delay to mimic API call
    await new Promise(resolve => setTimeout(resolve, 500));

    // Return mock notifications
    res.status(200).json({ notifications: mockNotifications });
}

================
File: app/api/user.ts
================
import { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'GET') {
    // Simulate fetching user data
    const user = { id: 1, name: 'John Doe', email: 'john@example.com' };
    return res.status(200).json(user);
  }

  if (req.method === 'POST') {
    // Simulate creating a user
    const { name, email } = req.body;
    return res.status(201).json({ id: 2, name, email });
  }

  return res.status(405).end(); // Method Not Allowed
}

================
File: app/auth/callback/route.ts
================
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { NextResponse } from 'next/server';

export async function GET(request: Request) {
  const requestUrl = new URL(request.url);
  const code = requestUrl.searchParams.get('code');

  if (code) {
    const supabase = createRouteHandlerClient({ cookies });
    await supabase.auth.exchangeCodeForSession(code);
  }

  // URL to redirect to after sign in process completes
  return NextResponse.redirect(requestUrl.origin);
}

================
File: app/bot-tasks/page.tsx
================
'use client';

import React, { useState } from 'react';
import RobotTransformerWallpaper from '../../components/RobotTransformerWallpaper';
import ChatbotModal from '../../components/ChatbotModal';

interface Task {
  id: number;
  title: string;
  completed: boolean;
  category: string;
  dueDate: string;
  priority: string;
}

const BotTaskManager: React.FC = () => {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [isChatOpen, setIsChatOpen] = useState(false);

  const handleChatSubmit = (message: string) => {
    // Simulate task creation from chatbot input
    const newTask: Task = {
      id: Date.now(),
      title: message,
      completed: false,
      category: 'General',
      dueDate: '',
      priority: 'Medium',
    };
    setTasks([...tasks, newTask]);
  };

  return (
    <div className="relative min-h-screen bg-gray-900 text-white">
      <RobotTransformerWallpaper />
      <div className="container mx-auto p-6">
        <h1 className="text-3xl font-bold mb-4">Bot Task Manager</h1>
        <div className="bg-gray-800 p-4 rounded-lg shadow-lg mb-6">
          <h2 className="text-xl font-semibold mb-2">Task Management Bot</h2>
          <p className="mb-4">
            Use the chatbot to manage your tasks. You can add new tasks, update existing ones, and track your progress through a conversational interface.
          </p>
          <button
            onClick={() => setIsChatOpen(true)}
            className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded"
          >
            Open Chatbot
          </button>
        </div>
        <div className="bg-gray-800 p-4 rounded-lg shadow-lg">
          <h2 className="text-xl font-semibold mb-4">Task List</h2>
          <ul>
            {tasks.map(task => (
              <li key={task.id} className="flex items-center justify-between mb-2">
                <div className="flex-1">
                  <span
                    className={`block ${task.completed ? 'line-through text-gray-500' : ''}`}
                  >
                    {task.title}
                  </span>
                  <small className="text-gray-400">
                    {task.category} | Due: {task.dueDate} | Priority: {task.priority}
                  </small>
                </div>
                <button
                  onClick={() => setTasks(tasks.map(t => t.id === task.id ? { ...t, completed: !t.completed } : t))}
                  className={`ml-2 ${task.completed ? 'bg-green-500' : 'bg-red-500'} hover:bg-opacity-75 text-white py-1 px-2 rounded`}
                >
                  {task.completed ? 'Undo' : 'Complete'}
                </button>
              </li>
            ))}
          </ul>
        </div>
      </div>
      <ChatbotModal
        isOpen={isChatOpen}
        onClose={() => setIsChatOpen(false)}
      />
    </div>
  );
};

export default BotTaskManager;

================
File: app/chat/layout.tsx
================
'use client';

import React, { useState } from 'react';
import { ThemeProvider } from '@/app/contexts/ThemeContext';
import '@/styles/globals.css';
import ChatbotModal from '@/components/ChatbotModal';
import RobotTransformerWallpaper from '@/components/RobotTransformerWallpaper';

interface ChatLayoutProps {
  children: React.ReactNode;
}

const ChatLayout: React.FC<ChatLayoutProps> = ({ children }) => {
  const [isChatbotOpen, setIsChatbotOpen] = useState(false);

  return (
    <html lang="en">
      <body>
        <ThemeProvider>
          <RobotTransformerWallpaper />
          <div className="relative z-10">
            {children}
            <button
              onClick={() => setIsChatbotOpen(true)}
              className="fixed bottom-4 right-4 bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded"
            >
              Open Chatbot
            </button>
            <ChatbotModal isOpen={isChatbotOpen} onClose={() => setIsChatbotOpen(false)} />
          </div>
        </ThemeProvider>
      </body>
    </html>
  );
};

export default ChatLayout;

================
File: app/console/page.tsx
================
'use client';

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import Link from 'next/link';
import { Home, ClipboardList, BarChart2, Users, Bell, Settings } from 'lucide-react';

const pages = [
    { title: 'Home', description: 'Go to the home page', icon: Home, href: '/' },
    { title: 'Dashboard', description: 'View your dashboard', icon: ClipboardList, href: '/dashboard' },
    { title: 'Notifications', description: 'View notifications', icon: Bell, href: '/notifications' },
    { title: 'Settings', description: 'Manage your settings', icon: Settings, href: '/settings' },
];

const ConsolePage: React.FC = () => {
    return (
        <div className="container mx-auto p-4">
            <h1 className="text-2xl font-bold mb-6">Console</h1>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {pages.map((page, index) => (
                    <Card key={index} className="hover:shadow-lg transition-shadow duration-300">
                        <CardHeader>
                            <CardTitle>{page.title}</CardTitle>
                        </CardHeader>
                        <CardContent>
                            <page.icon className="w-12 h-12 mb-4" />
                            <p>{page.description}</p>
                        </CardContent>
                        <Link href={page.href}>
                            <Button className="mt-4">Go to {page.title}</Button>
                        </Link>
                    </Card>
                ))}
            </div>
        </div>
    );
};

export default ConsolePage;

================
File: app/contexts/ThemeContext.tsx
================
'use client';

import React, { createContext, useContext, useState, ReactNode } from 'react';

type Theme = 'light' | 'dark';

interface ThemeContextType {
  theme: Theme;
  toggleTheme: () => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};

export const ThemeProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [theme, setTheme] = useState<Theme>('light');

  const toggleTheme = () => {
    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

================
File: app/dashboard/page.tsx
================
'use client';

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';
import { ArrowUpRight, ArrowDownRight, Users, Activity, MoreHorizontal, ChevronRight } from 'lucide-react';

const taskData = [
  { name: 'Jan', tasks: 40 },
  { name: 'Feb', tasks: 30 },
  { name: 'Mar', tasks: 50 },
  { name: 'Apr', tasks: 45 },
  { name: 'May', tasks: 60 },
  { name: 'Jun', tasks: 55 },
];

const agentData = [
  { name: 'Agent A', value: 40, color: '#0088FE' },
  { name: 'Agent B', value: 30, color: '#00C49F' },
  { name: 'Agent C', value: 30, color: '#FFBB28' },
  { name: 'Agent D', value: 20, color: '#FF8042' },
];

export default function Dashboard() {
  return (
    <div className="container mx-auto p-4 space-y-6">
      <h1 className="text-3xl font-bold">Dashboard</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {[
          { title: 'Total Tasks', value: '150', change: '+10%', icon: Activity, color: 'text-green-500' },
          { title: 'Active Agents', value: '25', change: '+5%', icon: Users, color: 'text-blue-500' },
        ].map((item, index) => (
          <Card key={index}>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">
                {item.title}
              </CardTitle>
              <item.icon className={`h-4 w-4 ${item.color}`} />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{item.value}</div>
              <p className={`text-xs ${item.change.startsWith('+') ? 'text-green-500' : 'text-red-500'}`}>
                {item.change.startsWith('+') ? <ArrowUpRight className="inline h-4 w-4" /> : <ArrowDownRight className="inline h-4 w-4" />}
                {item.change} from last month
              </p>
            </CardContent>
          </Card>
        ))}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
        <Card>
          <CardHeader>
            <CardTitle>Task Overview</CardTitle>
            <CardDescription>Monthly task performance</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="h-[300px]">
              <ResponsiveContainer width="100%" height="100%">
                <AreaChart data={taskData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis />
                  <Tooltip />
                  <Area type="monotone" dataKey="tasks" stroke="#8884d8" fill="#8884d8" />
                </AreaChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Agent Distribution</CardTitle>
            <CardDescription>Tasks handled by agents</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="h-[300px]">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={agentData}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    outerRadius={80}
                    fill="#8884d8"
                    dataKey="value"
                    label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                  >
                    {agentData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <div>
            <CardTitle>Recent Activity</CardTitle>
            <CardDescription>Latest task updates</CardDescription>
          </div>
          <Button variant="ghost" size="icon">
            <MoreHorizontal className="h-4 w-4" />
          </Button>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {[
              { user: 'Agent A', action: 'completed a task', time: '2 hours ago' },
              { user: 'Agent B', action: 'started a new task', time: '4 hours ago' },
              { user: 'Agent C', action: 'updated task details', time: '1 day ago' },
              { user: 'Agent D', action: 'reviewed a task', time: '2 days ago' },
            ].map((activity, index) => (
              <div key={index} className="flex items-center space-x-4">
                <Avatar>
                  <AvatarFallback>{activity.user[0]}</AvatarFallback>
                </Avatar>
                <div className="flex-1 space-y-1">
                  <p className="text-sm font-medium">{activity.user} <span className="text-muted-foreground">{activity.action}</span></p>
                  <p className="text-xs text-muted-foreground">{activity.time}</p>
                </div>
                <Button variant="ghost" size="icon">
                  <ChevronRight className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: app/documentation/page.tsx
================
'use client';

import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ScrollArea } from "@/components/ui/scroll-area";
import { AlertCircle, Users, CheckSquare, Bot, GitBranch, Wrench, Lightbulb, MessageSquarePlus } from 'lucide-react';
import Mermaid from 'react-mermaid2'; // Import Mermaid component

const Documentation: React.FC = () => {
  const [activeTab, setActiveTab] = useState("overview");

  const concepts = [
    { id: "teams", icon: Users, title: "Teams", description: "Collaborative groups working on projects" },
    { id: "tasks", icon: CheckSquare, title: "Tasks", description: "Actionable items within projects" },
    { id: "agents", icon: Bot, title: "Agents", description: "AI-powered assistants for task automation" },
    { id: "pipelines", icon: GitBranch, title: "Pipelines", description: "Predefined workflows for projects" },
    { id: "tools", icon: Wrench, title: "Tools", description: "Integrations to extend functionality" },
  ];

  return (
    <div className="min-h-screen bg-gray-900 text-gray-100 p-8">
      <h1 className="text-4xl font-bold mb-8">Task-Flow Documentation</h1>
      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <TabsList className="grid w-full grid-cols-2 lg:grid-cols-6 gap-2">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          {concepts.map((concept) => (
            <TabsTrigger key={concept.id} value={concept.id}>{concept.title}</TabsTrigger>
          ))}
        </TabsList>
        <TabsContent value="overview">
          <Card>
            <CardHeader>
              <CardTitle>Task-Flow: Streamlining Project Management</CardTitle>
              <CardDescription>
                Task-Flow is a comprehensive task management system designed to enhance productivity and streamline project workflows.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <p className="mb-4">
                Our platform is built around five core concepts: Teams, Tasks, Agents, Pipelines, and Tools. Understanding these concepts and their interactions is crucial for effectively using and extending the Task-Flow platform.
              </p>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {concepts.map((concept) => (
                  <Card key={concept.id} className="bg-gray-800">
                    <CardHeader>
                      <CardTitle className="flex items-center">
                        <concept.icon className="mr-2 h-6 w-6" />
                        {concept.title}
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <p>{concept.description}</p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        {concepts.map((concept) => (
          <TabsContent key={concept.id} value={concept.id}>
            <ConceptDetails concept={concept} />
          </TabsContent>
        ))}
      </Tabs>
      {/* Ensure PromptEngineeringTip is defined or imported */}
      {/* <PromptEngineeringTip /> */}
    </div>
  );
}

// Explicitly type the 'concept' parameter
function ConceptDetails({ concept }: { concept: { id: string; icon: React.ComponentType<{ className?: string }>; title: string; description: string } }) {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <concept.icon className="mr-2 h-6 w-6" />
          {concept.title}
        </CardTitle>
        <CardDescription>{concept.description}</CardDescription>
      </CardHeader>
      <CardContent>
        <ScrollArea className="h-[300px] w-full rounded-md border p-4">
          <h3 className="text-lg font-semibold mb-2">Key Characteristics:</h3>
          <ul className="list-disc pl-5 space-y-2">
            {getConceptDetails(concept.id).map((detail, index) => (
              <li key={index}>{detail}</li>
            ))}
          </ul>
          <div className="mt-4">
            <h3 className="text-lg font-semibold mb-2">Concept Diagram:</h3>
            <Mermaid chart={getConceptDiagram(concept.id)} />
          </div>
        </ScrollArea>
      </CardContent>
    </Card>
  );
}

// Explicitly type the 'conceptId' parameter
function getConceptDetails(conceptId: string): string[] {
  switch (conceptId) {
    case 'teams':
      return [
        "Teams can have multiple members with different roles (e.g., admin, member, viewer).",
        "Each team can have multiple projects or workspaces.",
        "Teams provide a context for collaboration and resource sharing."
      ];
    case 'tasks':
      return [
        "Tasks have attributes such as title, description, status, priority, and due date.",
        "Tasks can be assigned to team members or agents.",
        "Tasks can be organized into projects or pipelines.",
        "Tasks may have subtasks, creating a hierarchical structure."
      ];
    case 'agents':
      return [
        "Agents can be specialized for different types of tasks (e.g., code review, documentation, testing).",
        "Agents can be assigned to tasks to provide assistance or automation.",
        "Agents can interact with team members, providing suggestions or completing routine tasks."
      ];
    case 'pipelines':
      return [
        "Pipelines define the stages of a workflow (e.g., Planning, Development, Testing, Deployment).",
        "Tasks move through pipeline stages as they progress.",
        "Pipelines can have automated triggers or conditions for moving tasks between stages.",
        "Pipelines provide visibility into the overall progress of a project or process."
      ];
    case 'tools':
      return [
        "Tools can include integrations with version control systems, CI/CD platforms, communication tools, etc.",
        "Tools can be associated with specific tasks or pipeline stages.",
        "Tools enhance the capabilities of Task-Flow by connecting it to the broader ecosystem of development and project management software."
      ];
    default:
      return [];
  }
}

// Explicitly type the 'conceptId' parameter
function getConceptDiagram(conceptId: string): string {
  const diagrams = {
    teams: `graph TD
    Team --> Member1[Team Member]
    Team --> Member2[Team Member]
    Team --> Admin[Team Admin]
    Team --> Project1[Project]
    Team --> Project2[Project]
    Project1 --> Task1[Task]
    Project1 --> Task2[Task]
    Project2 --> Task3[Task]`,
    tasks: `stateDiagram-v2
    [*] --> Created
    Created --> InProgress: Assign
    InProgress --> Review: Complete
    Review --> Done: Approve
    Review --> InProgress: Request Changes
    Done --> [*]`,
    agents: `sequenceDiagram
    participant User
    participant Agent
    participant Task
    User->>Agent: Assign to task
    Agent->>Task: Analyze task
    Agent->>User: Provide suggestions
    User->>Task: Update task
    Agent->>Task: Perform automated actions
    Task->>User: Update status`,
    pipelines: `graph LR
    Start((Start)) --> Planning
    Planning --> Development
    Development --> Testing
    Testing --> Deployment
    Deployment --> End((End))
    subgraph Pipeline
    Planning
    Development
    Testing
    Deployment
    end`,
    tools: `graph TD
    Task --> GitIntegration[Git Integration]
    Task --> CITool[CI Tool]
    Pipeline --> DeploymentTool[Deployment Tool]
    Agent --> AnalysisTool[Code Analysis Tool]
    subgraph External Tools
    GitIntegration
    CITool
    DeploymentTool
    AnalysisTool
    end`
  };

  return diagrams[conceptId as keyof typeof diagrams];
}

export default Documentation;

================
File: app/editor/page.tsx
================
'use client';

import React from 'react';

const CodeEditor: React.FC = () => {
    return (
        <div className="container mx-auto p-6">
            <h1 className="text-3xl font-bold mb-6">Code Editor</h1>
            <p className="text-lg text-gray-600 mb-8">Write and edit your code here.</p>
            {/* You can integrate a code editor component here, like CodeMirror or Monaco Editor */}
            <textarea className="w-full h-96 border rounded p-4" placeholder="Start coding..."></textarea>
        </div>
    );
};

export default CodeEditor;

================
File: app/forgot-password/page.tsx
================
'use client';

import { useState } from 'react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { AlertCircle, ArrowLeft } from "lucide-react"
import Link from "next/link"

export default function ForgotPassword() {
  const [email, setEmail] = useState('')
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [isSubmitted, setIsSubmitted] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)
    // TODO: Implement actual password reset logic here
    await new Promise(resolve => setTimeout(resolve, 1500)) // Simulating API call
    setIsSubmitting(false)
    setIsSubmitted(true)
  }

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle>Forgot Password</CardTitle>
          <CardDescription>Enter your email to reset your password</CardDescription>
        </CardHeader>
        <CardContent>
          {!isSubmitted ? (
            <form onSubmit={handleSubmit}>
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <Input
                    id="email"
                    type="email"
                    placeholder="Enter your email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    required
                    disabled={isSubmitting}
                  />
                </div>
                <Button type="submit" className="w-full" disabled={isSubmitting}>
                  {isSubmitting ? 'Sending...' : 'Reset Password'}
                </Button>
              </div>
            </form>
          ) : (
            <div className="text-center space-y-4">
              <AlertCircle className="mx-auto h-12 w-12 text-green-500" />
              <p className="text-lg font-semibold">Check your email</p>
              <p className="text-sm text-gray-500">
                We've sent a password reset link to {email}
              </p>
            </div>
          )}
        </CardContent>
        <CardFooter>
          <Link href="/login" className="flex items-center text-sm text-gray-500 hover:text-gray-700">
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to login
          </Link>
        </CardFooter>
      </Card>
    </div>
  )
}

================
File: app/home/page.tsx
================
'use client';

import React from 'react';
import Link from 'next/link';
import SharedLayout from '../../components/SharedLayout';

const HomePage: React.FC = () => {
  return (
    <SharedLayout>
      <h1 className="text-3xl font-bold mb-4">Welcome to Our App</h1>
      <div className="flex space-x-4">
        <Link href="/tasks">
          <a className="text-blue-500 hover:underline">Go to Tasks</a>
        </Link>
        <Link href="/agent-design">
          <a className="text-blue-500 hover:underline">Agent Design</a>
        </Link>
        <Link href="/task-agent-analytics">
          <a className="text-blue-500 hover:underline">Task Agent Analytics</a>
        </Link>
      </div>
    </SharedLayout>
  );
};

export default HomePage;

================
File: app/landing/layout.tsx
================
'use client';

import React, { useState } from 'react';
import { ThemeProvider } from '@/app/contexts/ThemeContext';
import '@/styles/globals.css';
import ChatbotModal from "@/components/ChatbotModal";
import RobotTransformerWallpaper from '@/components/RobotTransformerWallpaper';

export default function LandingLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [isChatbotOpen, setIsChatbotOpen] = useState(false);

  return (
    <html lang="en">
      <body>
        <ThemeProvider>
          <RobotTransformerWallpaper />
          <div className="relative z-10">
            {children}
            
            <ChatbotModal isOpen={isChatbotOpen} onClose={() => setIsChatbotOpen(false)} />
          </div>
        </ThemeProvider>
      </body>
    </html>
  );
}

================
File: app/landing/page.tsx
================
'use client';

import React from 'react';
import { motion } from 'framer-motion';
import Link from 'next/link';
import { Button } from "@/components/ui/button";
import { Users, Folder, List, Calendar, BarChart2, CheckCircle, Star, MessageSquare, Database, Bot } from 'lucide-react';
import { useTheme } from '@/app/contexts/ThemeContext';
import SharedLayout from '@/components/SharedLayout';

export default function LandingPage() {
  const { theme } = useTheme();

  const features = [
    { icon: <Users className="h-8 w-8" />, title: "Team Collaboration", description: "Work seamlessly with your team members, assign tasks, and track progress together." },
    { icon: <Folder className="h-8 w-8" />, title: "Project Management", description: "Organize your work into projects, set milestones, and manage resources effectively." },
    { icon: <List className="h-8 w-8" />, title: "Task Tracking", description: "Create, assign, and monitor tasks with ease. Set priorities and deadlines to stay on top of your work." },
    { icon: <Calendar className="h-8 w-8" />, title: "Scheduling", description: "Plan your work with an intuitive calendar view. Never miss a deadline again." },
    { icon: <BarChart2 className="h-8 w-8" />, title: "Analytics", description: "Gain insights into your team's performance with detailed reports and analytics." },
    { icon: <CheckCircle className="h-8 w-8" />, title: "Goal Tracking", description: "Set and track goals for your team. Celebrate achievements and identify areas for improvement." },
    { icon: <MessageSquare className="h-8 w-8" />, title: "AI Chatbot Assistant", description: "Get instant help and automate tasks with our intelligent chatbot." },
    { icon: <Database className="h-8 w-8" />, title: "Blockchain Integration", description: "Secure and transparent task management with blockchain technology." },
    { icon: <Bot className="h-8 w-8" />, title: "Agent Automation", description: "Leverage AI agents to automate repetitive tasks and enhance productivity." },
  ];

  const testimonials = [
    { name: "John Doe", role: "CEO, TechCorp", quote: "QuantumLabs has revolutionized our workflow. The AI chatbot and blockchain features are game-changers!" },
    { name: "Jane Smith", role: "Project Manager, InnovateCo", quote: "The best task management tool I've used. The chatbot assistant saves us hours every week." },
    { name: "Mike Johnson", role: "Team Lead, CreativeSolutions", quote: "QuantumLabs's blockchain integration gives us unparalleled security and transparency." },
  ];

  return (
    <SharedLayout>
      <main>
        {/* Hero Section */}
        <section className="container mx-auto px-4 py-20 text-center">
          <motion.h1
            className="text-6xl md:text-7xl font-extrabold mb-6"
            initial={{ opacity: 0, y: -50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            AI-Powered Task Management
          </motion.h1>
          <motion.p
            className="text-xl md:text-2xl mb-8"
            initial={{ opacity: 0, y: -30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
          >
            TaskFlow: Revolutionizing team collaboration with AI chatbots and blockchain technology.
          </motion.p>
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.4 }}
            className="space-x-4"
          >
            <Button size="lg" className="bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 text-lg">
              <Link href="/signup">Start Your Free Trial</Link>
            </Button>
            <Button size="lg" variant="outline" className="px-8 py-3 text-lg">
              <Link href="#features">Learn More</Link>
            </Button>
          </motion.div>
        </section>

        {/* Features Section */}
        <section id="features" className="container mx-auto px-4 py-20">
          <h2 className="text-4xl md:text-5xl font-bold mb-12 text-center">Cutting-Edge Features for Modern Teams</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {features.map((feature, index) => (
              <motion.div
                key={index}
                className="p-6 rounded-lg shadow-lg bg-gray-800 bg-opacity-80 text-white"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
              >
                <div className="text-purple-500 mb-4">{feature.icon}</div>
                <h3 className="text-2xl font-semibold mb-2">{feature.title}</h3>
                <p className="text-lg">{feature.description}</p>
              </motion.div>
            ))}
          </div>
        </section>

        {/* AI Chatbot Section */}
        <section className="bg-blue-600 py-20 text-white">
          <div className="container mx-auto px-4 text-center">
            <h2 className="text-4xl font-bold mb-8">AI-Powered Chatbot Assistant</h2>
            <p className="text-xl mb-8">Our intelligent chatbot helps you manage tasks, answer questions, and automate workflows.</p>
            <ul className="text-left max-w-md mx-auto">
              <li className="mb-2">✓ Instant task creation and assignment</li>
              <li className="mb-2">✓ Quick access to project information</li>
              <li className="mb-2">✓ Automated reminders and notifications</li>
              <li>✓ Natural language processing for ease of use</li>
            </ul>
          </div>
        </section>

        {/* Blockchain Integration Section */}
        <section className="container mx-auto px-4 py-20">
          <h2 className="text-4xl font-bold mb-12 text-center">Blockchain-Powered Security</h2>
          <div className="flex flex-col md:flex-row items-center justify-between">
            <div className="md:w-1/2 mb-8 md:mb-0">
              <h3 className="text-2xl font-semibold mb-4">Unparalleled Security and Transparency</h3>
              <ul className="list-disc list-inside space-y-2">
                <li>Immutable task records</li>
                <li>Transparent project history</li>
                <li>Secure data storage</li>
                <li>Decentralized access control</li>
              </ul>
            </div>
            <div className="md:w-1/2 md:pl-8">
              <p className="text-lg mb-4">
                Our blockchain integration ensures that your project data is secure, transparent, and tamper-proof.
                Every action is recorded on the blockchain, providing an auditable trail of all project activities.
              </p>
            </div>
          </div>
        </section>

        {/* Agent Automation Section */}
        <section className="container mx-auto px-4 py-20">
          <h2 className="text-4xl font-bold mb-12 text-center">AI-Powered Agent Automation</h2>
          <div className="flex flex-col md:flex-row items-center justify-between">
            <div className="md:w-1/2 mb-8 md:mb-0">
              <h3 className="text-2xl font-semibold mb-4">Supercharge Your Workflow with AI Agents</h3>
              <ul className="list-disc list-inside space-y-2">
                <li>Automate repetitive tasks</li>
                <li>Intelligent task assignment and prioritization</li>
                <li>24/7 productivity with always-on AI agents</li>
                <li>Customizable automation workflows</li>
              </ul>
            </div>
            <div className="md:w-1/2 md:pl-8">
              <p className="text-lg mb-4">
                Our AI agents work tirelessly to optimize your workflow, automating routine tasks and
                providing intelligent suggestions to boost your team's productivity.
              </p>
            </div>
          </div>
        </section>

        {/* Testimonials Section */}
        <section className="container mx-auto px-4 py-20">
          <h2 className="text-4xl font-bold mb-12 text-center">What Our Users Say</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {testimonials.map((testimonial, index) => (
              <motion.div
                key={index}
                className="p-6 rounded-lg shadow-lg bg-gray-800 bg-opacity-80 text-white"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
              >
                <p className="text-lg mb-4 italic">"{testimonial.quote}"</p>
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <Star className="h-5 w-5 text-yellow-400" />
                  </div>
                  <div className="ml-3">
                    <p className="text-sm font-medium">{testimonial.name}</p>
                    <p className="text-sm text-gray-400">{testimonial.role}</p>
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        </section>

        {/* CTA Section */}
        <section className="bg-blue-600 py-20 text-white">
          <div className="container mx-auto px-4 text-center">
            <h2 className="text-4xl font-bold mb-4">Ready to revolutionize your team's productivity?</h2>
            <p className="text-xl mb-8">Join thousands of teams already using QuantumLabs's AI and blockchain-powered platform.</p>
            <Button size="lg" className="bg-white text-blue-600 hover:bg-gray-100 px-8 py-3 text-lg">
              <Link href="/signup">Start Your Free 14-Day Trial</Link>
            </Button>
          </div>
        </section>
      </main>

      <footer className="bg-gray-900 py-8 text-white">
        <div className="container mx-auto px-4 text-center">
          <p>&copy; 2023 QuantumLabs. All rights reserved.</p>
        </div>
      </footer>
    </SharedLayout>
  );
}

================
File: app/layouts/CustomLayout.tsx
================
import React, { ReactNode } from 'react';
import { ThemeProvider } from '@/app/contexts/ThemeContext';
import RobotTransformerWallpaper from '@/components/RobotTransformerWallpaper'; // Ensure this path is correct

interface CustomLayoutProps {
    children: ReactNode;
}

const CustomLayout: React.FC<CustomLayoutProps> = ({ children }) => {
    return (
        <ThemeProvider>
            <RobotTransformerWallpaper /> {/* Add the wallpaper component */}
            <div>
                {/* Custom layout structure */}
                {children}
            </div>
        </ThemeProvider>
    );
};

export default CustomLayout;

================
File: app/login/page.tsx
================
'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import Image from 'next/image';
import { Button } from "@/components/ui/button";
import SharedLayout from '../../components/SharedLayout';

export default function LoginPage() {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState<string | null>(null);
    const router = useRouter();

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        setError(null);
        // Implement login logic here
    };

    return (
        <SharedLayout>
            <div className="max-w-md w-full space-y-8 mx-auto">
                <div>
                    <h2 className="mt-6 text-center text-3xl font-extrabold">
                        Log in to your account
                    </h2>
                </div>
                <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
                    <input type="hidden" name="remember" defaultValue="true" />
                    <div className="rounded-md shadow-sm -space-y-px">
                        <div>
                            <label htmlFor="email-address" className="sr-only">
                                Email address
                            </label>
                            <input
                                id="email-address"
                                name="email"
                                type="email"
                                autoComplete="email"
                                required
                                className="appearance-none rounded-none relative block w-full px-3 py-2 border bg-gray-800 text-white border-gray-600 placeholder-gray-500 rounded-t-md focus:outline-none focus:ring-purple-500 focus:border-purple-500 focus:z-10 sm:text-sm"
                                placeholder="Email address"
                                value={email}
                                onChange={(e) => setEmail(e.target.value)}
                            />
                        </div>
                        <div>
                            <label htmlFor="password" className="sr-only">
                                Password
                            </label>
                            <input
                                id="password"
                                name="password"
                                type="password"
                                autoComplete="current-password"
                                required
                                className="appearance-none rounded-none relative block w-full px-3 py-2 border bg-gray-800 text-white border-gray-600 placeholder-gray-500 rounded-b-md focus:outline-none focus:ring-purple-500 focus:border-purple-500 focus:z-10 sm:text-sm"
                                placeholder="Password"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                            />
                        </div>
                    </div>

                    {error && <div className="text-red-500 text-sm">{error}</div>}

                    <div>
                        <button
                            type="submit"
                            className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"
                        >
                            Log in
                        </button>
                    </div>
                </form>
                <div className="mt-6">
                    <div className="relative">
                        <div className="absolute inset-0 flex items-center">
                            <div className="w-full border-t border-gray-600"></div>
                        </div>
                        <div className="relative flex justify-center text-sm">
                            <span className="px-2 bg-gray-800 text-gray-300">
                                Or continue with
                            </span>
                        </div>
                    </div>

                    <div className="mt-6">
                        <Button
                            className="w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white"
                        >
                            <Image
                                src="/images/google.svg"
                                alt="Google logo"
                                width={20}
                                height={20}
                                className="mr-2"
                            />
                            Log in with Google
                        </Button>
                    </div>
                </div>

                <div className="text-center">
                    <p className="mt-2 text-sm text-gray-400">
                        Don't have an account?{' '}
                        <Link href="/signup" className="font-medium text-purple-500 hover:text-purple-400">
                            Sign up
                        </Link>
                    </p>
                </div>
            </div>
        </SharedLayout>
    );
}

================
File: app/members/page.tsx
================
'use client';

import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Plus, Search, Mail, MoreHorizontal } from 'lucide-react';

const initialMembers = [
  { id: 1, name: 'John Doe', email: 'john@example.com', role: 'Developer', team: 'Development', avatar: 'JD' },
  { id: 2, name: 'Jane Smith', email: 'jane@example.com', role: 'Designer', team: 'Design', avatar: 'JS' },
  { id: 3, name: 'Bob Johnson', email: 'bob@example.com', role: 'Product Manager', team: 'Product', avatar: 'BJ' },
  { id: 4, name: 'Alice Brown', email: 'alice@example.com', role: 'Marketing Specialist', team: 'Marketing', avatar: 'AB' },
  { id: 5, name: 'Charlie Wilson', email: 'charlie@example.com', role: 'Developer', team: 'Development', avatar: 'CW' },
];

export default function MembersPage() {
  const [members, setMembers] = useState(initialMembers);
  const [searchQuery, setSearchQuery] = useState('');
  const [newMember, setNewMember] = useState({ name: '', email: '', role: '', team: '' });

  const filteredMembers = members.filter(member =>
    member.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    member.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
    member.role.toLowerCase().includes(searchQuery.toLowerCase()) ||
    member.team.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const addMember = () => {
    if (newMember.name && newMember.email && newMember.role && newMember.team) {
      setMembers([...members, { ...newMember, id: members.length + 1, avatar: newMember.name.split(' ').map(n => n[0]).join('') }]);
      setNewMember({ name: '', email: '', role: '', team: '' });
    }
  };

  return (
    <div className="container mx-auto py-10">
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="text-2xl">Members</CardTitle>
              <CardDescription>Manage all members across teams</CardDescription>
            </div>
            <div className="flex items-center space-x-2">
              <div className="relative">
                <Search className="absolute left-2 top-1/2 transform -translate-y-1/2 text-gray-400" />
                <Input
                  placeholder="Search members..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-8 w-64"
                />
              </div>
              <Dialog>
                <DialogTrigger asChild>
                  <Button>
                    <Plus className="mr-2 h-4 w-4" /> Add Member
                  </Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>Add New Member</DialogTitle>
                    <DialogDescription>Add a new member to your organization.</DialogDescription>
                  </DialogHeader>
                  <div className="grid gap-4 py-4">
                    <div className="grid grid-cols-4 items-center gap-4">
                      <Label htmlFor="name" className="text-right">Name</Label>
                      <Input
                        id="name"
                        value={newMember.name}
                        onChange={(e) => setNewMember({ ...newMember, name: e.target.value })}
                        className="col-span-3"
                      />
                    </div>
                    <div className="grid grid-cols-4 items-center gap-4">
                      <Label htmlFor="email" className="text-right">Email</Label>
                      <Input
                        id="email"
                        type="email"
                        value={newMember.email}
                        onChange={(e) => setNewMember({ ...newMember, email: e.target.value })}
                        className="col-span-3"
                      />
                    </div>
                    <div className="grid grid-cols-4 items-center gap-4">
                      <Label htmlFor="role" className="text-right">Role</Label>
                      <Input
                        id="role"
                        value={newMember.role}
                        onChange={(e) => setNewMember({ ...newMember, role: e.target.value })}
                        className="col-span-3"
                      />
                    </div>
                    <div className="grid grid-cols-4 items-center gap-4">
                      <Label htmlFor="team" className="text-right">Team</Label>
                      <Select onValueChange={(value) => setNewMember({ ...newMember, team: value })}>
                        <SelectTrigger className="col-span-3">
                          <SelectValue placeholder="Select a team" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Development">Development</SelectItem>
                          <SelectItem value="Design">Design</SelectItem>
                          <SelectItem value="Product">Product</SelectItem>
                          <SelectItem value="Marketing">Marketing</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                  <DialogFooter>
                    <Button onClick={addMember}>Add Member</Button>
                  </DialogFooter>
                </DialogContent>
              </Dialog>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Name</TableHead>
                <TableHead>Email</TableHead>
                <TableHead>Role</TableHead>
                <TableHead>Team</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredMembers.map((member) => (
                <TableRow key={member.id}>
                  <TableCell className="font-medium">
                    <div className="flex items-center">
                      <Avatar className="h-8 w-8 mr-2">
                        <AvatarImage src={`https://api.dicebear.com/6.x/initials/svg?seed=${member.avatar}`} />
                        <AvatarFallback>{member.avatar}</AvatarFallback>
                      </Avatar>
                      {member.name}
                    </div>
                  </TableCell>
                  <TableCell>{member.email}</TableCell>
                  <TableCell>{member.role}</TableCell>
                  <TableCell>
                    <Badge variant="outline">{member.team}</Badge>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center space-x-2">
                      <Button variant="ghost" size="sm">
                        <Mail className="h-4 w-4 mr-2" />
                        Contact
                      </Button>
                      <Button variant="ghost" size="sm">
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: app/not-found/page.tsx
================
'use client';

import React from 'react';

const NotFoundPage = () => {
    return (
        <div className="container mx-auto p-4 text-center">
            <h1 className="text-4xl font-bold mb-4">404 - Page Not Found</h1>
            <p className="text-lg">Sorry, the page you are looking for does not exist.</p>
        </div>
    );
};

export default NotFoundPage;

================
File: app/notifications/page.tsx
================
'use client';

import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Bell, MessageSquare, CheckCircle } from 'lucide-react';

interface Notification {
  id: string;
  type: 'assignment' | 'comment' | 'update';
  content: string;
  project: string;
  timestamp: string;
  read: boolean;
}

export default function NotificationsPage() {
  const [notifications, setNotifications] = useState<Notification[]>([
    {
      id: '1',
      type: 'assignment',
      content: 'You have been assigned to the task "Design new logo"',
      project: 'Branding Refresh',
      timestamp: '2023-07-15T10:30:00Z',
      read: false,
    },
    {
      id: '2',
      type: 'comment',
      content: 'Alice commented on your task "Implement login functionality"',
      project: 'User Authentication',
      timestamp: '2023-07-14T15:45:00Z',
      read: true,
    },
    {
      id: '3',
      type: 'update',
      content: 'The project "Backend Development" has been marked as complete',
      project: 'Backend Development',
      timestamp: '2023-07-13T09:15:00Z',
      read: false,
    },
  ]);

  const markAsRead = (id: string) => {
    setNotifications(notifications.map(notification => 
      notification.id === id ? { ...notification, read: true } : notification
    ));
  };

  const getIcon = (type: Notification['type']) => {
    switch (type) {
      case 'assignment':
        return <Bell className="h-4 w-4" />;
      case 'comment':
        return <MessageSquare className="h-4 w-4" />;
      case 'update':
        return <CheckCircle className="h-4 w-4" />;
    }
  };

  return (
    <div className="container mx-auto py-10">
      <h1 className="text-3xl font-bold mb-6">Notifications</h1>
      <Card>
        <CardHeader>
          <CardTitle>Recent Notifications</CardTitle>
        </CardHeader>
        <CardContent>
          <ScrollArea className="h-[600px]">
            {notifications.map((notification) => (
              <div 
                key={notification.id} 
                className={`flex items-start space-x-4 mb-4 p-4 rounded-lg ${notification.read ? 'bg-secondary' : 'bg-primary/10'}`}
                onClick={() => markAsRead(notification.id)}
              >
                <Avatar>
                  <AvatarFallback>{getIcon(notification.type)}</AvatarFallback>
                </Avatar>
                <div className="flex-1">
                  <p className={`${notification.read ? 'font-normal' : 'font-medium'}`}>{notification.content}</p>
                  <p className="text-sm text-muted-foreground">Project: {notification.project}</p>
                  <p className="text-xs text-muted-foreground">{new Date(notification.timestamp).toLocaleString()}</p>
                </div>
                {!notification.read && (
                  <Badge variant="secondary">New</Badge>
                )}
              </div>
            ))}
          </ScrollArea>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: app/profile/page.tsx
================
'use client';

import React, { useState, useEffect } from 'react';
import CenteredAtomSpinner from "@/components/CenteredAtomSpinner"; // Import the spinner

const Profile: React.FC = () => {
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const timer = setTimeout(() => {
      setLoading(false);
    }, 2000); // Simulate loading for 2 seconds

    return () => clearTimeout(timer);
  }, []);

  if (loading) {
    return <CenteredAtomSpinner />;
  }

  return (
    <div className="container mx-auto py-10">
      <h1 className="text-4xl font-bold mb-8">Profile</h1>
      {/* Profile content goes here */}
    </div>
  );
};

export default Profile;

================
File: app/progress/page.tsx
================
'use client'

import { useState } from 'react'
import { Progress } from "@/components/ui/progress"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Badge } from "@/components/ui/badge"
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts'
import Link from 'next/link'
import { Button } from "@/components/ui/button"
import { CheckCircle, Users, Folder, List } from 'lucide-react'
import { Card } from '@/components/ui/card'
import { CardContent } from '@/components/ui/card-content'
import { CardHeader } from '@/components/ui/card-header'
import { CardTitle } from '@/components/ui/card-title'

interface Project {
  id: string
  name: string
  progress: number
  tasksCompleted: number
  totalTasks: number
}

export default function ProgressPage() {
  const [projects] = useState<Project[]>([
    { id: '1', name: 'Project Alpha', progress: 65, tasksCompleted: 13, totalTasks: 20 },
    { id: '2', name: 'Project Beta', progress: 30, tasksCompleted: 6, totalTasks: 20 },
    { id: '3', name: 'Project Gamma', progress: 90, tasksCompleted: 18, totalTasks: 20 },
    { id: '4', name: 'Project Delta', progress: 45, tasksCompleted: 9, totalTasks: 20 },
    { id: '5', name: 'Project Epsilon', progress: 10, tasksCompleted: 2, totalTasks: 20 },
  ])

  const chartData = projects.map(project => ({
    name: project.name,
    progress: project.progress,
  }))

  return (
    <div className="flex flex-col min-h-screen">
      <header className="bg-white shadow-sm">
        <div className="container mx-auto py-4 px-4">
          <div className="flex justify-between items-center">
            <a href="/" className="text-2xl font-bold text-primary">QuantumLabs</a>
            <div className="space-x-4">
              <a href="/login" className="text-sm hover:underline">Log in</a>
              <Button asChild variant="outline">
                <Link href="/signup">Sign up</Link>
              </Button>
            </div>
          </div>
        </div>
      </header>

      <main className="flex-grow">
        <section className="bg-gradient-to-b from-primary to-primary/50 text-primary-foreground py-20">
          <div className="container mx-auto px-4 text-center">
            <h1 className="text-4xl md:text-6xl font-bold mb-6">Track Your Progress</h1>
            <p className="text-xl md:text-2xl mb-8">Monitor your tasks and projects in real-time.</p>
            <Button size="lg" asChild>
              <Link href="/signup">Get Started for Free</Link>
            </Button>
          </div>
        </section>

        <section className="py-20">
          <div className="container mx-auto px-4">
            <h2 className="text-3xl font-bold text-center mb-12">Key Features</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              {[
                { icon: <Users />, title: "Team Collaboration", description: "Work seamlessly with your team members, assign tasks, and track progress together." },
                { icon: <Folder />, title: "Project Management", description: "Organize your work into projects, set milestones, and manage resources effectively." },
                { icon: <List />, title: "Task Tracking", description: "Create, assign, and monitor tasks with ease. Set priorities and deadlines to stay on top of your work." },
              ].map((feature, index) => (
                <FeatureCard key={index} {...feature} />
              ))}
            </div>
          </div>
        </section>
      </main>

      <footer className="bg-secondary text-secondary-foreground py-8">
        <div className="container mx-auto px-4 text-center">
          <p className="text-sm">&copy; {new Date().getFullYear()} QuantumLabs. All rights reserved.</p>
        </div>
      </footer>
    </div>
  )
}

function FeatureCard({ icon, title, description }: { icon: React.ReactNode, title: string, description: string }) {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex flex-col items-center text-center">
          <div className="h-12 w-12 mb-4 text-primary">{icon}</div>
          {title}
        </CardTitle>
      </CardHeader>
      <CardContent>
        <p className="text-center text-muted-foreground">{description}</p>
      </CardContent>
    </Card>
  )
}

================
File: app/project-board/page.tsx
================
'use client';

import React from 'react';

const ProjectBoardPage: React.FC = () => {
    return (
        <div>
            <h1>Project Board</h1>
            {/* Your project board content */}
        </div>
    );
};

export default ProjectBoardPage;

================
File: app/projects/[ProjectId]/board/page.tsx
================
'use client'

import { useParams } from 'next/navigation'
import { useState, useEffect } from 'react'
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"

interface Task {
  id: string
  content: string
  status: 'To Do' | 'In Progress' | 'Done'
  priority: 'Low' | 'Medium' | 'High'
}

const initialTasks: Task[] = [
  { id: 'task-1', content: 'Design user interface', status: 'To Do', priority: 'High' },
  { id: 'task-2', content: 'Implement authentication', status: 'In Progress', priority: 'Medium' },
  { id: 'task-3', content: 'Set up database', status: 'Done', priority: 'High' },
  { id: 'task-4', content: 'Create API endpoints', status: 'To Do', priority: 'Medium' },
  { id: 'task-5', content: 'Write unit tests', status: 'In Progress', priority: 'Low' },
]

const getStatusColor = (status: string) => {
  switch (status) {
    case 'To Do':
      return 'bg-blue-100 border-blue-300';
    case 'In Progress':
      return 'bg-yellow-100 border-yellow-300';
    case 'Done':
      return 'bg-green-100 border-green-300';
    default:
      return 'bg-gray-100 border-gray-300';
  }
};

const getPriorityColor = (priority: string) => {
  switch (priority) {
    case 'Low':
      return 'bg-green-200 text-green-800';
    case 'Medium':
      return 'bg-yellow-200 text-yellow-800';
    case 'High':
      return 'bg-red-200 text-red-800';
    default:
      return 'bg-gray-200 text-gray-800';
  }
};

export default function ProjectBoard() {
  const params = useParams()
  const projectId = params.projectId
  const [tasks, setTasks] = useState<Task[]>(initialTasks)

  const onDragEnd = (result: any) => {
    if (!result.destination) return

    const newTasks = Array.from(tasks)
    const [reorderedItem] = newTasks.splice(result.source.index, 1)
    reorderedItem.status = result.destination.droppableId as 'To Do' | 'In Progress' | 'Done'
    newTasks.splice(result.destination.index, 0, reorderedItem)

    setTasks(newTasks)
  }

  return (
    <div className="p-8">
      <h1 className="text-3xl font-bold mb-6">Project Board</h1>
      <p className="mb-4 text-gray-600">Project ID: {projectId}</p>

      <DragDropContext onDragEnd={onDragEnd}>
        <div className="grid grid-cols-3 gap-4">
          {['To Do', 'In Progress', 'Done'].map((status) => (
            <Card key={status} className={`${getStatusColor(status)} border-t-4`}>
              <CardHeader>
                <CardTitle className="font-bold text-lg">{status}</CardTitle>
              </CardHeader>
              <CardContent>
                <Droppable droppableId={status}>
                  {(provided) => (
                    <ul {...provided.droppableProps} ref={provided.innerRef} className="space-y-2">
                      {tasks.filter(task => task.status === status).map((task, index) => (
                        <Draggable key={task.id} draggableId={task.id} index={index}>
                          {(provided) => (
                            <li
                              ref={provided.innerRef}
                              {...provided.draggableProps}
                              {...provided.dragHandleProps}
                              className="bg-white p-3 rounded shadow-sm border border-gray-200 hover:shadow-md transition-shadow duration-200"
                            >
                              <div className="flex justify-between items-center">
                                <span className="font-medium">{task.content}</span>
                                <Badge className={`${getPriorityColor(task.priority)} text-xs`}>
                                  {task.priority}
                                </Badge>
                              </div>
                            </li>
                          )}
                        </Draggable>
                      ))}
                      {provided.placeholder}
                    </ul>
                  )}
                </Droppable>
              </CardContent>
            </Card>
          ))}
        </div>
      </DragDropContext>
    </div>
  )
}

================
File: app/projects/[ProjectId]/tasks/page.tsx
================
'use client'

import { useState, useEffect } from 'react'
import { useParams } from 'next/navigation'
import { Plus, Edit, Trash2 } from 'lucide-react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Badge } from "@/components/ui/badge"

interface Task {
  id: string
  title: string
  description: string
  due_date: string
  status: 'todo' | 'inprogress' | 'done'
  project_id: string
}

// Mock data
const mockTasks: Task[] = [
  { id: '1', title: 'Task 1', description: 'Description 1', due_date: '2023-05-01', status: 'todo', project_id: 'project1' },
  { id: '2', title: 'Task 2', description: 'Description 2', due_date: '2023-05-02', status: 'inprogress', project_id: 'project1' },
  { id: '3', title: 'Task 3', description: 'Description 3', due_date: '2023-05-03', status: 'done', project_id: 'project1' },
]

export default function ProjectTasksPage() {
  const { projectId } = useParams()
  const [tasks, setTasks] = useState<Task[]>([])
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [currentTask, setCurrentTask] = useState<Task | null>(null)
  const [searchTerm, setSearchTerm] = useState('')
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    fetchTasks()
  }, [projectId])

  async function fetchTasks() {
    setIsLoading(true)
    // Simulate API call
    setTimeout(() => {
      setTasks(mockTasks.filter(task => task.project_id === projectId))
      setIsLoading(false)
    }, 500)
  }

  const handleAddEditTask = async (task: Omit<Task, 'id'>) => {
    if (currentTask?.id) {
      // Update existing task
      setTasks(tasks.map(t => t.id === currentTask.id ? { ...t, ...task } : t))
    } else {
      // Add new task
      const newTask = { ...task, id: Date.now().toString(), project_id: projectId as string }
      setTasks([...tasks, newTask])
    }
    setIsDialogOpen(false)
    setCurrentTask(null)
  }

  const handleDeleteTask = async (id: string) => {
    setTasks(tasks.filter(t => t.id !== id))
  }

  const filteredTasks = tasks.filter(task => 
    task.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    task.description.toLowerCase().includes(searchTerm.toLowerCase())
  )

  if (isLoading) {
    return <div>Loading tasks...</div>
  }

  return (
    <div className="container mx-auto py-10">
      <h1 className="text-3xl font-bold mb-6">Project Tasks</h1>
      <div className="flex justify-between items-center mb-6">
        <Input 
          className="w-64" 
          placeholder="Search tasks..." 
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        <Button onClick={() => setIsDialogOpen(true)}>
          <Plus className="mr-2 h-4 w-4" /> Add Task
        </Button>
      </div>
      <ScrollArea className="h-[calc(100vh-200px)]">
        {filteredTasks.map(task => (
          <Card key={task.id} className="mb-4">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">
                {task.title}
                <Badge 
                  variant={task.status === 'todo' ? 'default' : task.status === 'inprogress' ? 'secondary' : 'outline'}
                  className="ml-2"
                >
                  {task.status}
                </Badge>
              </CardTitle>
              <div>
                <Button variant="ghost" size="sm" onClick={() => { setCurrentTask(task); setIsDialogOpen(true); }}>
                  <Edit className="h-4 w-4" />
                </Button>
                <Button variant="ghost" size="sm" onClick={() => handleDeleteTask(task.id)}>
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">{task.description}</p>
              <p className="text-sm text-muted-foreground mt-2">Due: {task.due_date}</p>
            </CardContent>
          </Card>
        ))}
      </ScrollArea>
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>{currentTask ? 'Edit Task' : 'Add New Task'}</DialogTitle>
          </DialogHeader>
          <form onSubmit={(e) => {
            e.preventDefault()
            const formData = new FormData(e.currentTarget)
            const task = {
              title: formData.get('title') as string,
              description: formData.get('description') as string,
              due_date: formData.get('due_date') as string,
              status: formData.get('status') as 'todo' | 'inprogress' | 'done',
              project_id: projectId as string,
            }
            handleAddEditTask(task)
          }}>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="title">Title</Label>
                <Input id="title" name="title" defaultValue={currentTask?.title} className="col-span-3" />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="description">Description</Label>
                <Textarea id="description" name="description" defaultValue={currentTask?.description} className="col-span-3" />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="due_date">Due Date</Label>
                <Input id="due_date" name="due_date" type="date" defaultValue={currentTask?.due_date} className="col-span-3" />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="status">Status</Label>
                <select id="status" name="status" defaultValue={currentTask?.status} className="col-span-3">
                  <option value="todo">To Do</option>
                  <option value="inprogress">In Progress</option>
                  <option value="done">Done</option>
                </select>
              </div>
            </div>
            <DialogFooter>
              <Button type="submit">{currentTask ? 'Save Changes' : 'Add Task'}</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  )
}

================
File: app/projects/page.tsx
================
'use client'

import { useState, useEffect } from 'react'
import CenteredAtomSpinner from '@/components/CenteredAtomSpinner'
import { mockClient } from '@/lib/dataProvider'
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog"
import { ScrollArea } from "@/components/ui/scroll-area"
import { PlusCircle, Search, Calendar, Users, BarChart } from 'lucide-react'
import { toast } from "react-hot-toast"
import { Label } from '@/components/forms/label'
import { Spinner } from '@geist-ui/react'

interface Project {
  id: string
  name: string
  description: string
  progress: number
  startDate: string
  endDate: string
  teamId: string
}

const getProgressColor = (progress: number) => {
  if (progress < 30) return 'bg-red-500';
  if (progress < 70) return 'bg-yellow-500';
  return 'bg-green-500';
};

const ProjectCard: React.FC<{ project: Project; isLoading: boolean }> = ({ project, isLoading }) => {
  if (isLoading) {
    return (
      <Card className="hover:shadow-lg transition-shadow h-48 flex justify-center items-center">
        <Spinner />
      </Card>
    );
  }

  return (
    <Card className="hover:shadow-lg transition-shadow">
      <CardHeader className="pb-2">
        <CardTitle className="text-xl font-bold">{project.name}</CardTitle>
      </CardHeader>
      <CardContent>
        <p className="text-sm text-muted-foreground mb-4">{project.description}</p>
        <div className="flex justify-between items-center mb-2">
          <div className="flex items-center">
            <Calendar className="h-4 w-4 mr-2 text-muted-foreground" />
            <span className="text-xs">{project.startDate} - {project.endDate}</span>
          </div>
          <div className="flex items-center">
            <Users className="h-4 w-4 mr-2 text-muted-foreground" />
            <span className="text-xs">Team {project.teamId}</span>
          </div>
        </div>
        <div className="flex items-center">
          <BarChart className="h-4 w-4 mr-2 text-muted-foreground" />
          <div className="flex-1 bg-gray-200 rounded-full h-2.5">
            <div 
              className={`h-2.5 rounded-full ${getProgressColor(project.progress)}`}
              style={{ width: `${project.progress}%` }}
            ></div>
          </div>
          <span className="ml-2 text-xs font-medium">{project.progress}%</span>
        </div>
      </CardContent>
    </Card>
  );
};

const ProjectsPage: React.FC = () => {
  const [projects, setProjects] = useState<Project[]>([])
  const [searchTerm, setSearchTerm] = useState('')
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    const fetchProjects = async () => {
      setIsLoading(true)
      try {
        const fetchedProjects = await mockClient.fetchProjects()
        setProjects(fetchedProjects)
      } catch (error) {
        console.error('Failed to fetch projects:', error)
        toast.error("Failed to load projects. Please try again.")
      } finally {
        setIsLoading(false)
      }
    }

    fetchProjects()
  }, [])

  const handleCreateProject = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault()
    const formData = new FormData(event.currentTarget)
    const newProject: Project = {
      id: Date.now().toString(),
      name: formData.get('name') as string,
      description: formData.get('description') as string,
      progress: 0,
      startDate: formData.get('startDate') as string,
      endDate: formData.get('endDate') as string,
      teamId: formData.get('teamId') as string,
    }
    setProjects([...projects, newProject])
    setIsCreateDialogOpen(false)
    toast.success("Project created successfully.")
  }

  const filteredProjects = projects.filter(project => 
    project.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    project.description.toLowerCase().includes(searchTerm.toLowerCase())
  )

  if (isLoading) return <CenteredAtomSpinner />

  return (
    <div className="container mx-auto py-10">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">Projects</h1>
        <Button onClick={() => setIsCreateDialogOpen(true)}>
          <PlusCircle className="mr-2 h-4 w-4" />
          New Project
        </Button>
      </div>

      <div className="flex justify-between items-center mb-6">
        <div className="relative w-64">
          <Search className="absolute left-2 top-1/2 transform -translate-y-1/2 text-muted-foreground" />
          <Input 
            className="pl-8" 
            placeholder="Search projects..." 
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
      </div>

      <ScrollArea className="h-[calc(100vh-200px)]">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredProjects.map((project) => (
            <ProjectCard key={project.id} project={project} isLoading={isLoading} />
          ))}
        </div>
      </ScrollArea>

      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Create New Project</DialogTitle>
          </DialogHeader>
          <form onSubmit={handleCreateProject}>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <label htmlFor="name" className="text-right">Name</label>
                <Input id="name" name="name" className="col-span-3" required />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <label htmlFor="description" className="text-right">Description</label>
                <Input id="description" name="description" className="col-span-3" required />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="startDate" className="text-right">Start Date</Label>
                <Input id="startDate" name="startDate" type="date" className="col-span-3" required />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="endDate" className="text-right">End Date</Label>
                <Input id="endDate" name="endDate" type="date" className="col-span-3" required />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="teamId" className="text-right">Team ID</Label>
                <Input id="teamId" name="teamId" className="col-span-3" required />
              </div>
            </div>
            <DialogFooter>
              <Button type="submit">Create Project</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  )
}

export default ProjectsPage

================
File: app/quest-designer/page.tsx
================
import { Dialog, DialogTrigger, DialogContent, DialogDescription } from '@radix-ui/react-dialog';
import React from 'react';

function CustomDialogHeader({ children }: { children: React.ReactNode }) {
    return <div className="dialog-header">{children}</div>;
}

const QuestDesignerPage: React.FC = () => {
    return (
        <Dialog>
            <DialogTrigger asChild>
                <button>Open Dialog</button>
            </DialogTrigger>
            <DialogContent>
                <CustomDialogHeader>
                    <DialogDescription className="px-4">
                        Collaborate with our AI Lorekeeper to craft a legendary quest for our champions.
                    </DialogDescription>
                </CustomDialogHeader>
            </DialogContent>
        </Dialog>
    );
};

export default QuestDesignerPage;

================
File: app/robot-transformer-demo/page.tsx
================
'use client';

import React from 'react';
import CommonLayout from '@/components/CommonLayout';
import RobotTransformerWallpaperDemo from '@/components/RobotTransformerWallpaperDemo';

export default function RobotTransformerDemoPage() {
  return (
    <CommonLayout>
      <RobotTransformerWallpaperDemo />
    </CommonLayout>
  );
}

================
File: app/search/page.tsx
================
'use client'

import { useState, useEffect } from 'react'
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Search } from 'lucide-react'
import supabase from '@/utils/supabaseDbClient'
import { Task, Project } from '@/lib/task'
import { Card } from '@/components/ui/card'
import { CardContent } from '@/components/ui/card-content'
import { CardHeader } from '@/components/ui/card-header'
import { CardTitle } from '@/components/ui/card-title'
import { TeamMember } from '@/lib/teamMember'

export default function SearchPage() {
  const [searchTerm, setSearchTerm] = useState('')
  const [tasks, setTasks] = useState<Task[]>([])
  const [projects, setProjects] = useState<Project[]>([])
  const [teamMembers, setTeamMembers] = useState<TeamMember[]>([])
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    fetchData()
  }, [])

  async function fetchData() {
    setIsLoading(true)
    try {
      const [{ data: tasksData }, { data: projectsData }, { data: teamMembersData }] = await Promise.all([
        supabase.from('tasks').select('*'),
        supabase.from('projects').select('*'),
        supabase.from('team_members').select('*')
      ])

      if (tasksData) setTasks(tasksData)
      if (projectsData) setProjects(projectsData)
      if (teamMembersData) setTeamMembers(teamMembersData)
    } catch (error) {
      console.error('Error fetching data:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const filteredTasks = tasks.filter(task => 
    task.title.toLowerCase().includes(searchTerm.toLowerCase())
  )

  const filteredProjects = projects.filter(project => 
    project.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    project.description.toLowerCase().includes(searchTerm.toLowerCase())
  )

  const filteredTeamMembers = teamMembers.filter(member => 
    member.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    member.role.toLowerCase().includes(searchTerm.toLowerCase())
  )

  if (isLoading) {
    return <div>Loading...</div>
  }

  return (
    <div className="container mx-auto py-10">
      <h1 className="text-3xl font-bold mb-6">Search</h1>
      <div className="flex space-x-2 mb-6">
        <Input 
          placeholder="Search tasks, projects, or team members..." 
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="flex-1"
        />
        <Button>
          <Search className="mr-2 h-4 w-4" /> Search
        </Button>
      </div>
      <Tabs defaultValue="tasks" className="space-y-4">
        <TabsList>
          <TabsTrigger value="tasks">Tasks</TabsTrigger>
          <TabsTrigger value="projects">Projects</TabsTrigger>
          <TabsTrigger value="team">Team Members</TabsTrigger>
        </TabsList>
        <TabsContent value="tasks">
          <Card>
            <CardHeader>
              <CardTitle>Tasks</CardTitle>
            </CardHeader>
            <CardContent>
              <ScrollArea className="h-[400px]">
                {filteredTasks.map((task) => (
                  <div key={task.id} className="flex justify-between items-center mb-4 p-2 bg-secondary rounded-lg">
                    <div>
                      <p className="font-medium">{task.title}</p>
                      <p className="text-sm text-muted-foreground">Project ID: {task.project_id}</p>
                    </div>
                    <Badge 
                      variant={task.status === 'todo' ? 'default' : task.status === 'inprogress' ? 'secondary' : 'outline'}
                    >
                      {task.status}
                    </Badge>
                  </div>
                ))}
              </ScrollArea>
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="projects">
          <Card>
            <CardHeader>
              <CardTitle>Projects</CardTitle>
            </CardHeader>
            <CardContent>
              <ScrollArea className="h-[400px]">
                {filteredProjects.map((project) => (
                  <div key={project.id} className="mb-4 p-4 bg-secondary rounded-lg">
                    <h3 className="font-medium">{project.name}</h3>
                    <p className="text-sm text-muted-foreground">{project.description}</p>
                  </div>
                ))}
              </ScrollArea>
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="team">
          <Card>
            <CardHeader>
              <CardTitle>Team Members</CardTitle>
            </CardHeader>
            <CardContent>
              <ScrollArea className="h-[400px]">
                {filteredTeamMembers.map((member) => (
                  <div key={member.id} className="flex items-center space-x-4 mb-4">
                    <Avatar>
                      <AvatarImage src={member.avatar} alt={member.name} />
                      <AvatarFallback>{member.name.split(' ').map((n: string) => n[0]).join('')}</AvatarFallback>
                    </Avatar>
                    <div>
                      <p className="font-medium">{member.name}</p>
                      <p className="text-sm text-muted-foreground">{member.role}</p>
                    </div>
                  </div>
                ))}
              </ScrollArea>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

================
File: app/settings/page.tsx
================
'use client'

import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { toast } from "react-hot-toast";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";

export default function SettingsPage() {
    const router = useRouter()
    const supabase = createClientComponentClient()
    const [settings, setSettings] = useState({
        theme: 'light',
        language: 'en',
        notifications_enabled: true
    })

    useEffect(() => {
        const fetchSettings = async () => {
            const { data: { user } } = await supabase.auth.getUser()
            if (user) {
                const { data } = await supabase
                    .from('user_settings')
                    .select('*')
                    .eq('user_id', user.id)
                    .single()
                if (data) {
                    setSettings(data)
                }
            }
        }
        fetchSettings()
    }, [supabase])

    const handleSaveGeneral = async () => {
        const { data: { user } } = await supabase.auth.getUser()
        if (user) {
            const { error } = await supabase
                .from('user_settings')
                .upsert({ user_id: user.id, ...settings })

            if (error) {
                console.error('Error updating settings:', error)
                toast.error("Failed to update settings. Please try again.")
            } else {
                toast.success("Your general settings have been updated.")
            }
        }
    }

    const handleSavePassword = (e: React.FormEvent) => {
        e.preventDefault()
        // Here you would typically handle password change
        console.log('Changing password')
        toast.success("Your password has been successfully updated.")
    }

    const handleDeleteAccount = () => {
        // Here you would typically handle account deletion
        console.log('Deleting account')
        toast.error("Your account has been successfully deleted.")
        router.push('/login')
    }

    return (
        <div className="container mx-auto py-10">
            <h1 className="text-3xl font-bold mb-6">Settings</h1>
            <Tabs defaultValue="general" className="w-full">
                <TabsList className="grid w-full grid-cols-3">
                    <TabsTrigger value="general">General</TabsTrigger>
                    <TabsTrigger value="security">Security</TabsTrigger>
                    <TabsTrigger value="advanced">Advanced</TabsTrigger>
                </TabsList>
                <TabsContent value="general">
                    <Card>
                        <CardHeader>
                            <CardTitle>General Settings</CardTitle>
                            <CardDescription>Manage your account settings and preferences.</CardDescription>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            <div className="space-y-2">
                                <Label htmlFor="theme">Theme</Label>
                                <Select value={settings.theme} onValueChange={(value) => setSettings({ ...settings, theme: value })}>
                                    <SelectTrigger id="theme">
                                        <SelectValue>{settings.theme}</SelectValue>
                                    </SelectTrigger>
                                    <SelectContent>
                                        <SelectItem value="light">Light</SelectItem>
                                        <SelectItem value="dark">Dark</SelectItem>
                                    </SelectContent>
                                </Select>
                            </div>
                            <div className="space-y-2">
                                <Label htmlFor="language">Language</Label>
                                <Select value={settings.language} onValueChange={(value) => setSettings({ ...settings, language: value })}>
                                    <SelectTrigger id="language">
                                        <SelectValue>{settings.language}</SelectValue>
                                    </SelectTrigger>
                                    <SelectContent>
                                        <SelectItem value="en">English</SelectItem>
                                        <SelectItem value="es">Spanish</SelectItem>
                                        <SelectItem value="fr">French</SelectItem>
                                    </SelectContent>
                                </Select>
                            </div>
                            <div className="flex items-center space-x-2">
                                <Switch
                                    id="notifications"
                                    checked={settings.notifications_enabled}
                                    onCheckedChange={(checked: boolean) => setSettings({ ...settings, notifications_enabled: checked })}
                                />
                                <Label htmlFor="notifications">Enable notifications</Label>
                            </div>
                        </CardContent>
                        <CardFooter>
                            <Button size="sm" variant="default" onClick={handleSaveGeneral}>Save Changes</Button>
                        </CardFooter>
                    </Card>
                </TabsContent>
                <TabsContent value="security">
                    <Card>
                        <CardHeader>
                            <CardTitle>Security Settings</CardTitle>
                            <CardDescription>Manage your password and account security.</CardDescription>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            <form onSubmit={handleSavePassword} className="space-y-4">
                                <div className="space-y-2">
                                    <Label htmlFor="current-password">Current Password</Label>
                                    <Input id="current-password" type="password" required />
                                </div>
                                <div className="space-y-2">
                                    <Label htmlFor="new-password">New Password</Label>
                                    <Input id="new-password" type="password" required />
                                </div>
                                <div className="space-y-2">
                                    <Label htmlFor="confirm-password">Confirm New Password</Label>
                                    <Input id="confirm-password" type="password" required />
                                </div>
                                <Button size="sm" variant="default" type="submit">Change Password</Button>
                            </form>
                        </CardContent>
                    </Card>
                </TabsContent>
                <TabsContent value="advanced">
                    <Card>
                        <CardHeader>
                            <CardTitle>Advanced Settings</CardTitle>
                            <CardDescription>Manage advanced settings for your account.</CardDescription>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            <div className="space-y-2">
                                <h3 className="text-lg font-medium">Delete Account</h3>
                                <p className="text-sm text-muted-foreground">
                                    Once you delete your account, there is no going back. Please be certain.
                                </p>
                            </div>
                            <Button size="sm" variant="destructive" onClick={handleDeleteAccount}>Delete Account</Button>
                        </CardContent>
                    </Card>
                </TabsContent>
            </Tabs>
        </div>
    )
}

================
File: app/signup/page.tsx
================
'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import Link from 'next/link';
import Image from 'next/image';
import { useTheme } from '../contexts/ThemeContext';
import toast from "react-hot-toast";
import { Button } from "@/components/ui/button";
import logger from '@/lib/logger';
import SharedLayout from '../../components/SharedLayout';

export default function SignupPage() {
	const [email, setEmail] = useState('');
	const [password, setPassword] = useState('');
	const [error, setError] = useState<string | null>(null);
	const router = useRouter();
	const supabase = createClientComponentClient();
	const themeContext = useTheme();
	const theme = themeContext?.theme ?? 'light';

	const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
		e.preventDefault();
		setError(null);
		try {
			const { error } = await supabase.auth.signUp({ email, password });
			if (error) throw error;
			toast.success('Account created successfully');
			router.push('/login');
		} catch (error: unknown) {
			if (error instanceof Error) {
				setError(error.message);
				toast.error(error.message);
				logger.error('Signup error');
			} else {
				setError('An unknown error occurred');
				toast.error('An unknown error occurred');
				logger.error('Signup error: An unknown error occurred');
			}
		}
	};

	const handleGoogleSignIn = async () => {
		try {
			const { error } = await supabase.auth.signInWithOAuth({
				provider: 'google',
				options: {
					redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/callback`,
				},
			});
			if (error) throw error;
		} catch (error: unknown) {
			if (error instanceof Error) {
				toast.error(error.message);
				logger.error('Google sign-in error');
			} else {
				toast.error('An unknown error occurred');
				logger.error('Google sign-in error: An unknown error occurred');
			}
		}
	};

	return (
		<SharedLayout>
			<div className="max-w-md w-full space-y-8 mx-auto">
				<div>
					<h2 className="mt-6 text-center text-3xl font-extrabold">
						Create your account
					</h2>
				</div>
				<form className="mt-8 space-y-6" onSubmit={handleSubmit}>
					<input type="hidden" name="remember" defaultValue="true" />
					<div className="rounded-md shadow-sm -space-y-px">
						<div>
							<label htmlFor="email-address" className="sr-only">
								Email address
							</label>
							<input
								id="email-address"
								name="email"
								type="email"
								autoComplete="email"
								required
								className="appearance-none rounded-none relative block w-full px-3 py-2 border bg-gray-800 text-white border-gray-600 placeholder-gray-500 rounded-t-md focus:outline-none focus:ring-purple-500 focus:border-purple-500 focus:z-10 sm:text-sm"
								placeholder="Email address"
								value={email}
								onChange={(e) => setEmail(e.target.value)}
							/>
						</div>
						<div>
							<label htmlFor="password" className="sr-only">
								Password
							</label>
							<input
								id="password"
								name="password"
								type="password"
								autoComplete="current-password"
								required
								className="appearance-none rounded-none relative block w-full px-3 py-2 border bg-gray-800 text-white border-gray-600 placeholder-gray-500 rounded-b-md focus:outline-none focus:ring-purple-500 focus:border-purple-500 focus:z-10 sm:text-sm"
								placeholder="Password"
								value={password}
								onChange={(e) => setPassword(e.target.value)}
							/>
						</div>
					</div>

					{error && <div className="text-red-500 text-sm">{error}</div>}

					<div>
						<button
							type="submit"
							className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"
						>
							Sign up
						</button>
					</div>
				</form>
				<div className="mt-6">
					<div className="relative">
						<div className="absolute inset-0 flex items-center">
							<div className="w-full border-t border-gray-600"></div>
						</div>
						<div className="relative flex justify-center text-sm">
							<span className="px-2 bg-gray-800 text-gray-300">
								Or continue with
							</span>
						</div>
					</div>

					<div className="mt-6">
						<Button
							onClick={handleGoogleSignIn}
							className="w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white"
						>
							<Image
								src="/images/google.svg"
								alt="Google logo"
								width={20}
								height={20}
								className="mr-2"
							/>
							Sign up with Google
						</Button>
					</div>
				</div>

				<div className="text-center">
					<p className="mt-2 text-sm text-gray-400">
						Already have an account?{' '}
						<Link href="/login" className="font-medium text-purple-500 hover:text-purple-400">
							Log in
						</Link>
					</p>
				</div>
			</div>
		</SharedLayout>
	);
}

================
File: app/support/layout.tsx
================
import { Metadata } from 'next';
import RobotTransformerWallpaper from '@/components/RobotTransformerWallpaper'; // Ensure this path is correct

export const metadata: Metadata = {
  title: 'Support | QuantumLabs',
  description: 'Get support for QuantumLabs',
};

export default function SupportLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <>
      <RobotTransformerWallpaper /> {/* Add the wallpaper component */}
      {children}
    </>
  );
}

================
File: app/support/page.tsx
================
'use client'

import React from 'react';

// Remove the metadata export from this file

export default function SupportPage() {
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold mb-4">Support</h1>
      <p>For support, please contact our team at support@quantumlabs.com</p>
    </div>
  );
}

================
File: app/task/[id]/page.tsx
================
'use client';

import React from 'react';
import { useRouter } from 'next/router';

const TaskPage: React.FC = () => {
    const router = useRouter();
    const { id } = router.query;

    return (
        <div>
            <h1>Task ID: {id}</h1>
            {/* Your task page content */}
        </div>
    );
};

export default TaskPage;

================
File: app/task-agent-analytics/page.tsx
================
'use client';

import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { AreaChart, Area, BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';
import { ArrowUpRight, ArrowDownRight, Activity, CheckCircle, Clock, AlertTriangle, MoreHorizontal } from 'lucide-react';

const performanceData = [
  { date: '2023-01', completionRate: 85, avgTime: 120 },
  { date: '2023-02', completionRate: 88, avgTime: 115 },
  { date: '2023-03', completionRate: 92, avgTime: 110 },
  { date: '2023-04', completionRate: 90, avgTime: 112 },
  { date: '2023-05', completionRate: 95, avgTime: 105 },
  { date: '2023-06', completionRate: 93, avgTime: 108 },
];

const taskDistributionData = [
  { name: 'Completed', value: 300, color: '#10B981' },
  { name: 'In Progress', value: 150, color: '#3B82F6' },
  { name: 'Pending', value: 100, color: '#F59E0B' },
  { name: 'Failed', value: 50, color: '#EF4444' },
];

const agentPerformanceData = [
  { name: 'Agent 1', tasks: 120, completionRate: 95 },
  { name: 'Agent 2', tasks: 100, completionRate: 88 },
  { name: 'Agent 3', tasks: 80, completionRate: 92 },
  { name: 'Agent 4', tasks: 90, completionRate: 85 },
  { name: 'Agent 5', tasks: 110, completionRate: 90 },
];

export default function TaskAgentAnalyticsDashboard() {
  return (
    <div className="container mx-auto py-10">
      <h1 className="text-3xl font-bold mb-6">Task Agent Analytics Dashboard</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
        {[
          { title: 'Total Tasks', value: '1,234', change: '+12.5%', icon: Activity, color: 'text-blue-500' },
          { title: 'Completion Rate', value: '92%', change: '+3.2%', icon: CheckCircle, color: 'text-green-500' },
          { title: 'Avg. Completion Time', value: '108 min', change: '-1.5%', icon: Clock, color: 'text-yellow-500' },
          { title: 'Failed Tasks', value: '23', change: '-0.8%', icon: AlertTriangle, color: 'text-red-500' },
        ].map((item, index) => (
          <Card key={index}>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">
                {item.title}
              </CardTitle>
              <item.icon className={`h-4 w-4 ${item.color}`} />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{item.value}</div>
              <p className={`text-xs ${item.change.startsWith('+') ? 'text-green-500' : 'text-red-500'}`}>
                {item.change.startsWith('+') ? <ArrowUpRight className="inline h-4 w-4" /> : <ArrowDownRight className="inline h-4 w-4" />}
                {item.change} from last month
              </p>
            </CardContent>
          </Card>
        ))}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
        <Card>
          <CardHeader>
            <CardTitle>Performance Over Time</CardTitle>
            <CardDescription>Task completion rate and average completion time</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="h-[300px]">
              <ResponsiveContainer width="100%" height="100%">
                <AreaChart data={performanceData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" />
                  <YAxis yAxisId="left" />
                  <YAxis yAxisId="right" orientation="right" />
                  <Tooltip />
                  <Legend />
                  <Area type="monotone" dataKey="completionRate" yAxisId="left" stroke="#8884d8" fill="#8884d8" name="Completion Rate (%)" />
                  <Area type="monotone" dataKey="avgTime" yAxisId="right" stroke="#82ca9d" fill="#82ca9d" name="Avg. Time (min)" />
                </AreaChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Task Distribution</CardTitle>
            <CardDescription>Current status of all tasks</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="h-[300px]">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={taskDistributionData}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    outerRadius={80}
                    fill="#8884d8"
                    dataKey="value"
                    label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                  >
                    {taskDistributionData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip />
                  <Legend />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
      </div>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Agent Performance</CardTitle>
          <CardDescription>Task completion and efficiency by agent</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="h-[300px]">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={agentPerformanceData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis yAxisId="left" orientation="left" stroke="#8884d8" />
                <YAxis yAxisId="right" orientation="right" stroke="#82ca9d" />
                <Tooltip />
                <Legend />
                <Bar yAxisId="left" dataKey="tasks" fill="#8884d8" name="Tasks Completed" />
                <Bar yAxisId="right" dataKey="completionRate" fill="#82ca9d" name="Completion Rate (%)" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <div>
            <CardTitle>Recent Tasks</CardTitle>
            <CardDescription>Latest tasks processed by agents</CardDescription>
          </div>
          <Select defaultValue="all">
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Filter by status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Tasks</SelectItem>
              <SelectItem value="completed">Completed</SelectItem>
              <SelectItem value="in-progress">In Progress</SelectItem>
              <SelectItem value="failed">Failed</SelectItem>
            </SelectContent>
          </Select>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Task ID</TableHead>
                <TableHead>Agent</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Completion Time</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {[
                { id: 'T-1234', agent: 'Agent 1', status: 'Completed', time: '1h 23m' },
                { id: 'T-1235', agent: 'Agent 2', status: 'In Progress', time: '45m' },
                { id: 'T-1236', agent: 'Agent 3', status: 'Failed', time: '2h 05m' },
                { id: 'T-1237', agent: 'Agent 4', status: 'Completed', time: '52m' },
                { id: 'T-1238', agent: 'Agent 5', status: 'In Progress', time: '1h 10m' },
              ].map((task, index) => (
                <TableRow key={index}>
                  <TableCell className="font-medium">{task.id}</TableCell>
                  <TableCell>{task.agent}</TableCell>
                  <TableCell>
                    <Badge variant={task.status === 'Completed' ? 'default' : task.status === 'In Progress' ? 'secondary' : 'destructive'}>
                      {task.status}
                    </Badge>
                  </TableCell>
                  <TableCell>{task.time}</TableCell>
                  <TableCell>
                    <Button variant="ghost" size="sm">
                      <MoreHorizontal className="h-4 w-4" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  )
}

================
File: app/task-design/page.tsx
================
'use client';

import React, { useState } from 'react';
import RobotTransformerWallpaper from '../../components/RobotTransformerWallpaper';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Bot, Send } from 'lucide-react';

const TaskDesignPage: React.FC = () => {
  const [messages, setMessages] = useState([
    { role: 'designer', content: 'Welcome to the Task Design interface. How can I assist you in designing your tasks today?' },
  ]);

  const [inputMessage, setInputMessage] = useState('');

  const handleSendMessage = () => {
    if (inputMessage.trim()) {
      setMessages([...messages, { role: 'user', content: inputMessage }]);
      setInputMessage('');
      // Simulate designer response
      setTimeout(() => {
        setMessages(prev => [...prev, { role: 'designer', content: 'I have added your task to the design board. Would you like to add more details or tasks?' }]);
      }, 1000);
    }
  };

  return (
    <div className="relative min-h-screen bg-gray-900 text-white">
      <RobotTransformerWallpaper />
      <div className="container mx-auto py-10">
        <h1 className="text-4xl font-bold mb-8">Task Design</h1>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <Card className="lg:col-span-2">
            <CardHeader>
              <CardTitle>Task Design Interface</CardTitle>
              <CardDescription>Interact with the task designer to create and manage tasks efficiently</CardDescription>
            </CardHeader>
            <CardContent>
              <ScrollArea className="h-[400px] mb-4">
                {messages.map((message, index) => (
                  <div
                    key={index}
                    className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'} mb-4`}
                  >
                    <div className={`flex items-start ${message.role === 'user' ? 'flex-row-reverse' : ''}`}>
                      <Avatar className="w-8 h-8">
                        {message.role === 'designer' ? (
                          <Bot className="w-6 h-6 text-primary" />
                        ) : (
                          <AvatarImage src="https://github.com/shadcn.png" />
                        )}
                        <AvatarFallback>{message.role === 'designer' ? 'TD' : 'You'}</AvatarFallback>
                      </Avatar>
                      <div className={`mx-2 p-3 rounded-lg ${message.role === 'user' ? 'bg-primary text-primary-foreground' : 'bg-muted'}`}>
                        {message.content}
                      </div>
                    </div>
                  </div>
                ))}
              </ScrollArea>
              <div className="flex items-center space-x-2">
                <Input
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  placeholder="Type your message here..."
                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                />
                <Button onClick={handleSendMessage}>
                  <Send className="w-4 h-4 mr-2" />
                  Send
                </Button>
              </div>
            </CardContent>
          </Card>

          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Design Capabilities</CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2">
                  <li className="flex items-center">
                    <Badge variant="outline" className="mr-2">
                      Task Creation
                    </Badge>
                    <span className="text-sm">Design and create new tasks</span>
                  </li>
                  <li className="flex items-center">
                    <Badge variant="outline" className="mr-2">
                      Task Management
                    </Badge>
                    <span className="text-sm">Organize and prioritize tasks</span>
                  </li>
                  <li className="flex items-center">
                    <Badge variant="outline" className="mr-2">
                      Collaboration
                    </Badge>
                    <span className="text-sm">Collaborate with team members</span>
                  </li>
                </ul>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TaskDesignPage;

================
File: app/task-manager/[taskId]/page.tsx
================
'use client';

import { useParams, useRouter } from 'next/navigation'; // Ensure useRouter is imported
import { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Task, Agent } from '@/types';
import TaskDetailView from '@/components/task-detail-view'; // Ensure this path is correct

// Mock data for tasks and agents (replace with actual data fetching logic)
const mockTasks: Task[] = [
    {
        id: "1" as any,
        title: "Optimize Database Queries",
        description: "Our database queries are running slowly, impacting system performance. We need to optimize these queries to improve overall system speed.",
        objective: "Reduce query execution time by 50%",
        difficulty: "High",
        estimatedTime: "3 days",
        status: "In Progress",
        assignedAgents: [],
        recommendedTools: ["SQL Profiler", "Index Tuning Wizard"],
        projectId: "1" as any,
        assignee: "Alice Johnson",
        dueDate: "2024-01-01",
        priority: "High",
        agents: ["Alice Johnson", "Bob Smith"],
    },


  {
    id: "2" as any,
    title: "Fix Login Page Bug",
    description: "Users are reporting intermittent issues with the login page. We need to investigate and fix this bug to ensure smooth user access.",
    objective: "Identify and resolve the login page issue",
    difficulty: "Medium",
    estimatedTime: "1 day",
    status: "To Do",
    assignedAgents: [],
    recommendedTools: ["Browser DevTools", "Authentication Library"],
    projectId: "1" as any,
    assignee: "Bob Smith",
    dueDate: "2024-01-01",
    priority: "High",
    agents: ["Bob Smith", "Charlie Brown"],
  }
];

const mockAgents: Agent[] = [
  {
    id: "1",
    name: "Alice Johnson",
    avatar: "/placeholder.svg?height=40&width=40",
    expertise: "Frontend Development",
    backstory: "Alice is a frontend developer with a passion for creating beautiful and functional user interfaces.",
    tools: ["React", "JavaScript", "CSS"],
  },
  {
    id: "2",
    name: "Bob Smith",
    avatar: "/placeholder.svg?height=40&width=40",
    expertise: "Backend Development",
    backstory: "Bob is a backend developer with a passion for creating scalable and secure web applications.",
    tools: ["Node.js", "Express", "MongoDB"],
  },
  {
    id: "3",
    name: "Charlie Brown",
    avatar: "/placeholder.svg?height=40&width=40",
    expertise: "DevOps",
    backstory: "Charlie is a devops engineer with a passion for creating scalable and secure web applications.",
    tools: ["Docker", "Kubernetes", "Jenkins"],
  },
  {
    id: "4",
    name: "Diana Prince",
    avatar: "/placeholder.svg?height=40&width=40",
    expertise: "UI/UX Design",
    backstory: "Diana is a ui/ux designer with a passion for creating beautiful and functional user interfaces.",
    tools: ["Figma", "Adobe XD", "Sketch"],
  }
];


//user params to get the taskId
export default function TaskDetailPage({ params }: { params: { taskId: string } }) {
  const [task, setTask] = useState<Task | null>(null);
  const [loading, setLoading] = useState(true); // Loading state
  const router = useRouter();
  useEffect(() => {
    //cast them both to string
    const taskId = params.taskId as unknown as string;
    const fetchedTask = mockTasks.find(t => t.id === taskId) || null;
    setTask(fetchedTask);
    setLoading(false); // Set loading to false after fetching
  }, [params.taskId]);

  const handleUpdate = (updatedTask: Task) => {
    console.log('Updating task:', updatedTask); // Ensure console is available
    setTask(updatedTask);
  };

  const handleClose = () => {
    router.push('/task-manager');
  };

  if (loading) {
    return <div className="container mx-auto py-10 text-center text-gray-200">Loading...</div>; // Show loading state
  }

  if (!task) {
    return <div className="container mx-auto py-10 text-center text-gray-200">Task not found</div>;
  }

  return (
    <div className="container mx-auto py-10 bg-gray-900 text-white min-h-screen">
      <Button onClick={handleClose} className="mb-4">Back to Task Manager</Button>
      <TaskDetailView
        task={task}
        isOpen={true}
        onClose={handleClose}
        onUpdate={handleUpdate}
        agents={mockAgents}
        params={params}
      />
    </div>
  );
}

================
File: app/task-manager/page.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { PlusCircle, Target, Clock, Users, CheckCircle2, MoveRight, AlertTriangle, Zap, Bomb, Skull, Code, Database, Server } from 'lucide-react';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import Link from 'next/link';
import TaskDetailView from '@/components/task-detail-view'; // Ensure this path is correct
import { agentsData } from '@/types';

export type Agent = {
  id: number;
  name: string;
  avatar: string;
  expertise: string;
};

type Task = {
  id: number;
  title: string;
  description: string;
  objective: string;
  difficulty: 'Low' | 'Medium' | 'High' | 'Critical';
  estimatedTime: string;
  status: 'To Do' | 'In Progress' | 'In Review' | 'Completed';
  assignedAgents: Agent[];
  recommendedTools: string[];
};

const initialTasks: Task[] = [
  {
    id: 1,
    title: "Optimize Database Queries",
    description: "Our database queries are running slowly, impacting system performance. We need to optimize these queries to improve overall system speed.",
    objective: "Reduce query execution time by 50%",
    difficulty: "High",
    estimatedTime: "3 days",
    status: "In Progress",
    assignedAgents: [],
    recommendedTools: ["SQL Profiler", "Index Tuning Wizard"]
  },
  {
    id: 2,
    title: "Fix Login Page Bug",
    description: "Users are reporting intermittent issues with the login page. We need to investigate and fix this bug to ensure smooth user access.",
    objective: "Identify and resolve the login page issue",
    difficulty: "Medium",
    estimatedTime: "1 day",
    status: "To Do",
    assignedAgents: [],
    recommendedTools: ["Browser DevTools", "Authentication Library"]
  }
];

const difficultyIcons = {
  Low: <Zap className="h-4 w-4 text-green-500" />,
  Medium: <AlertTriangle className="h-4 w-4 text-yellow-500" />,
  High: <Bomb className="h-4 w-4 text-orange-500" />,
  Critical: <Skull className="h-4 w-4 text-red-500" />
};

const toolIcons = {
  "SQL Profiler": <Database className="h-4 w-4" />,
  "Index Tuning Wizard": <Code className="h-4 w-4" />,
  "Browser DevTools": <Code className="h-4 w-4" />,
  "Authentication Library": <Server className="h-4 w-4" />
};

export default function TaskManager() {
  const [tasks, setTasks] = useState<Task[]>(initialTasks);
  const [agents, setAgents] = useState<Agent[]>([]);
  const [isOpen, setIsOpen] = useState(false);
  const [currentTask, setCurrentTask] = useState<Partial<Task>>({
    title: '',
    description: '',
    objective: '',
    difficulty: 'Low',
    estimatedTime: '',
    status: 'To Do',
    assignedAgents: [],
    recommendedTools: []
  });

  // In a real application, you would fetch agents from your backend
  useEffect(() => {
    // Simulating an API call to fetch agents
    // setAgents(fetchedAgents);
  }, []);

  const handleCreateTask = () => {
    if (currentTask.title && currentTask.description && currentTask.objective) {
      const newTask: Task = {
        id: Date.now(),
        title: currentTask.title,
        description: currentTask.description,
        objective: currentTask.objective,
        difficulty: currentTask.difficulty as Task['difficulty'],
        estimatedTime: currentTask.estimatedTime || 'Unknown',
        status: 'To Do',
        assignedAgents: currentTask.assignedAgents || [],
        recommendedTools: currentTask.recommendedTools || []
      };
      setTasks([...tasks, newTask]);
      setCurrentTask({
        title: '',
        description: '',
        objective: '',
        difficulty: 'Low',
        estimatedTime: '',
        status: 'To Do',
        assignedAgents: [],
        recommendedTools: []
      });
      setIsOpen(false);
    }
  };

  const updateTaskStatus = (taskId: number, newStatus: Task['status']) => {
    setTasks(tasks.map(task =>
      task.id === taskId ? { ...task, status: newStatus } : task
    ));
  };

  const assignAgentToTask = (taskId: number, agentId: number) => {
    setTasks(tasks.map(task => {
      if (task.id === taskId) {
        const agent = agents.find(a => a.id === agentId);
        if (agent && !task.assignedAgents.some(a => a.id === agentId)) {
          return { ...task, assignedAgents: [...task.assignedAgents, agent] };
        }
      }
      return task;
    }));
  };

  const removeAgentFromTask = (taskId: number, agentId: number) => {
    setTasks(tasks.map(task => {
      if (task.id === taskId) {
        return { ...task, assignedAgents: task.assignedAgents.filter(a => a.id !== agentId) };
      }
      return task;
    }));
  };

  const onDragEnd = (result: any) => {
    const { destination, source, draggableId } = result;

    if (!destination) {
      return;
    }

    if (
      destination.droppableId === source.droppableId &&
      destination.index === source.index
    ) {
      return;
    }

    const newTasks = Array.from(tasks);
    const [reorderedTask] = newTasks.splice(source.index, 1);
    newTasks.splice(destination.index, 0, reorderedTask);

    setTasks(newTasks.map(task =>
      task.id === parseInt(draggableId) ? { ...task, status: destination.droppableId as Task['status'] } : task
    ));
  };

  return (
    <div className="container mx-auto py-10 bg-gray-900 text-white min-h-screen">
      <h1 className="text-4xl font-bold mb-8">Task Manager</h1>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-semibold">Task Board</h2>
        <Dialog open={isOpen} onOpenChange={setIsOpen}>
          <DialogTrigger asChild>
            <Button variant="outline">
              <PlusCircle className="mr-2 h-4 w-4" />
              Create New Task
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[425px] bg-gray-800 text-white">
            <DialogHeader>
              <DialogTitle>Create a New Task</DialogTitle>
              <DialogDescription className="text-gray-400">
                Add a new task to the task board.
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <Label htmlFor="title">Task Title</Label>
                <Input
                  id="title"
                  value={currentTask.title}
                  onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}
                  placeholder="e.g., 'Optimize Database Queries'"
                  className="bg-gray-700 text-white"
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="description">Task Description</Label>
                <Textarea
                  id="description"
                  value={currentTask.description}
                  onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}
                  placeholder="Describe the task in detail..."
                  className="bg-gray-700 text-white"
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="objective">Task Objective</Label>
                <Input
                  id="objective"
                  value={currentTask.objective}
                  onChange={(e) => setCurrentTask({ ...currentTask, objective: e.target.value })}
                  placeholder="e.g., 'Reduce query execution time by 50%'"
                  className="bg-gray-700 text-white"
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="difficulty">Difficulty</Label>
                <Select
                  value={currentTask.difficulty}
                  onValueChange={(value) => setCurrentTask({ ...currentTask, difficulty: value as Task['difficulty'] })}
                >
                  <SelectTrigger className="bg-gray-700 text-white">
                    <SelectValue placeholder="Select difficulty" />
                  </SelectTrigger>
                  <SelectContent className="bg-gray-700 text-white">
                    <SelectItem value="Low">Low</SelectItem>
                    <SelectItem value="Medium">Medium</SelectItem>
                    <SelectItem value="High">High</SelectItem>
                    <SelectItem value="Critical">Critical</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="grid gap-2">
                <Label htmlFor="estimatedTime">Estimated Time</Label>
                <Input
                  id="estimatedTime"
                  value={currentTask.estimatedTime}
                  onChange={(e) => setCurrentTask({ ...currentTask, estimatedTime: e.target.value })}
                  placeholder="e.g., '2 days' or '4 hours'"
                  className="bg-gray-700 text-white"
                />
              </div>
            </div>
            <Button onClick={handleCreateTask}>Create Task</Button>
          </DialogContent>
        </Dialog>
      </div>
      <DragDropContext onDragEnd={onDragEnd}>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          {(['To Do', 'In Progress', 'In Review', 'Completed'] as Task['status'][]).map((status) => (
            <div key={status} className="bg-gray-800 p-4 rounded-lg">
              <h3 className="text-lg font-semibold mb-4">{status}</h3>
              <Droppable droppableId={status}>
                {(provided) => (
                  <div {...provided.droppableProps} ref={provided.innerRef} className="space-y-4">
                    {tasks.filter(task => task.status === status).map((task, index) => (
                      <Draggable key={task.id} draggableId={task.id.toString()} index={index}>
                        {(provided) => (
                          <div
                            ref={provided.innerRef}
                            {...provided.draggableProps}
                            {...provided.dragHandleProps}
                          >
                            <TaskCard
                              task={task}
                              onStatusChange={updateTaskStatus}
                              onAssignAgent={assignAgentToTask}
                              onRemoveAgent={removeAgentFromTask}
                              agents={agents}
                            />
                          </div>
                        )}
                      </Draggable>
                    ))}
                    {provided.placeholder}
                  </div>
                )}
              </Droppable>
            </div>
          ))}
        </div>
      </DragDropContext>
    </div>
  )
}

function TaskCard({ task, onStatusChange, onAssignAgent, onRemoveAgent, agents }: {
  task: Task;
  onStatusChange: (id: number, status: Task['status']) => void;
  onAssignAgent: (taskId: number, agentId: number) => void;
  onRemoveAgent: (taskId: number, agentId: number) => void;
  agents: Agent[];
}) {
  return (
    <Card className="mb-4 bg-gray-700 text-white">
      <CardHeader>
        <CardTitle className="flex items-center">
          {difficultyIcons[task.difficulty]}
          <Link href={`/task-manager/${task.id}`} className="ml-2 text-white hover:underline">
            {task.title}
          </Link>
        </CardTitle>
        <CardDescription className="text-gray-400">Difficulty: {task.difficulty}</CardDescription>
      </CardHeader>
      <CardContent>
        <p className="mb-2">{task.description}</p>
        <div className="flex items-center text-sm text-gray-400 mb-2">
          <Target className="mr-2 h-4 w-4" />
          Objective: {task.objective}
        </div>
        <div className="flex items-center text-sm text-gray-400 mb-2">
          <Clock className="mr-2 h-4 w-4" />
          Estimated Time: {task.estimatedTime}
        </div>
        <div className="flex items-center text-sm text-gray-400 mb-2">
          <Users className="mr-2 h-4 w-4" />
          Assigned Agents:
        </div>
        <div className="flex flex-wrap gap-2 mb-4">
          {task.assignedAgents.map((agent) => (
            <div key={agent.id} className="flex items-center bg-gray-600 rounded-full px-3 py-1">
              <Avatar className="h-6 w-6 mr-2">
                <AvatarImage src={agent.avatar} alt={agent.name} />
                <AvatarFallback>{agent.name.charAt(0)}</AvatarFallback>
              </Avatar>
              <span className="text-sm">{agent.name}</span>
              <Button
                variant="ghost"
                size="sm"
                className="ml-2 h-4 w-4 p-0 text-gray-400 hover:text-white"
                onClick={() => onRemoveAgent(task.id, agent.id)}
              >
                &times;
              </Button>
            </div>
          ))}
        </div>
        <Select onValueChange={(value) => onAssignAgent(task.id, parseInt(value))}>
          <SelectTrigger className="bg-gray-600 text-white">
            <SelectValue placeholder="Assign agent" />
          </SelectTrigger>
          <SelectContent className="bg-gray-700 text-white">
            {agents.filter(agent => !task.assignedAgents.some(a => a.id === agent.id)).map((agent) => (
              <SelectItem key={agent.id} value={agent.id.toString()}>{agent.name}</SelectItem>
            ))}
          </SelectContent>
        </Select>
        <div className="mt-4">
          <h4 className="text-sm font-semibold mb-2">Recommended Tools:</h4>
          <div className="flex flex-wrap gap-2">
            {task.recommendedTools.map((tool, index) => (
              <div key={index} className="flex items-center bg-gray-600 rounded-full px-3 py-1">
                {toolIcons[tool as keyof typeof toolIcons]}
                <span className="text-sm ml-2">{tool}</span>
              </div>
            ))}
          </div>
        </div>
        <div className="flex justify-between mt-4">
          {task.status !== 'Completed' && (
            <Button onClick={() => onStatusChange(task.id, 'Completed')} size="sm" variant="outline">
              <CheckCircle2 className="mr-2 h-4 w-4" />
              Mark Completed
            </Button>
          )}
          {task.status !== 'In Review' && task.status !== 'Completed' && (
            <Button onClick={() => onStatusChange(task.id, 'In Review')} size="sm" variant="outline">
              <MoveRight className="mr-2 h-4 w-4" />
              Move to Review
            </Button>
          )}
        </div>
      </CardContent>
    </Card>
  )
}

================
File: app/taskboard/edit-task-modal.tsx
================
import React, {useState} from 'react'
import {Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter} from "@/components/ui/dialog"
import {Button} from "@/components/ui/button"
import {Input} from "@/components/ui/input"
import {Label} from "@/components/ui/label"
import {Select, SelectContent, SelectItem, SelectTrigger, SelectValue} from "@/components/ui/select"
import {Task} from '@/lib/task'
import {Textarea} from "@/components/ui/textarea"

interface EditTaskModalProps {
    task: Task,
    isOpen: boolean,
    onClose: () => void,
    onSave: (updatedTask: Task) => void,
    initialTask?: string
}

export function EditTaskModal({task, isOpen, onClose, onSave, initialTask}: EditTaskModalProps) {
    const [editedTask, setEditedTask] = useState<Task>(task)

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const {name, value} = e.target
        setEditedTask((prev) => ({...prev, [name]: value}))
    }

    const handlePriorityChange = (value: 'low' | 'medium' | 'high') => {
        setEditedTask((prev) => ({...prev, priority: value}))
    }

    const handleSave = () => {
        // Basic validation
        if (!editedTask.title.trim() || !editedTask.description.trim()) { // Trimmed validation
            alert("Title and description are required.")
            return
        }
        onSave(editedTask)
        onClose()
    }

    return (
        <Dialog open={isOpen} onOpenChange={onClose}>
            <DialogContent className="sm:max-w-[425px]">
                <DialogHeader>
                    <DialogTitle>Edit Task</DialogTitle>
                </DialogHeader>
                <div className="grid gap-4 py-4">
                    <div className="grid grid-cols-4 items-center gap-4">
                        <Label htmlFor="title">
                            Title
                        </Label>
                        <Input
                            id="title"
                            name="title"
                            value={editedTask.title}
                            onChange={handleInputChange}
                            className="col-span-3"
                        />
                    </div>
                    <div className="grid grid-cols-4 items-center gap-4">
                        <Label htmlFor="description">
                            Description
                        </Label>
                        <Textarea
                            id="description"
                            name="description"
                            value={editedTask.description}
                            onChange={handleInputChange}
                            className="col-span-3"
                        />
                    </div>
                    <div className="grid grid-cols-4 items-center gap-4">
                        <Label htmlFor="priority">
                            Priority
                        </Label>
                        <Select
                            onValueChange={handlePriorityChange}
                            defaultValue={editedTask.priority}
                        >
                            <SelectTrigger className="col-span-3">
                                <SelectValue placeholder="Select priority"/>
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="low">Low</SelectItem>
                                <SelectItem value="medium">Medium</SelectItem>
                                <SelectItem value="high">High</SelectItem>
                            </SelectContent>
                        </Select>
                    </div>
                </div>
                <DialogFooter>
                    <Button type="submit" onClick={handleSave}>Save changes</Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
    )
}

================
File: app/taskboard/page.tsx
================
"use client"

import React, { useState } from 'react'
import { DndProvider, useDrag, useDrop } from 'react-dnd'
import { HTML5Backend } from 'react-dnd-html5-backend'
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import { PlusCircle, MoreHorizontal, Calendar, MessageSquare } from 'lucide-react'
import { EditTaskModal } from './edit-task-modal'
import { Task } from '@/lib/task'
import {Input} from "@/components/forms/input";

interface Comment {
    id: string;
    author: string;
    avatar: string;
    content: string;
    createdAt: string;
}

interface Column {
    id: string;
    title: string;
    tasks: Task[];
}

// Initialize columns with fake data
const initialColumns: Column[] = [
    {
        id: 'todo',
        title: 'To Do',
        tasks: [
            {
                id: '1',
                title: 'Research competitors',
                description: 'Analyze top 5 competitors',
                status: 'todo',
                priority: 'high',
                assignee: 'John Doe',
                dueDate: '2023-06-30',
                comments: [],
                project_id: '1',
                columnId: 'todo',
                columnName: 'To Do',
                team_id: 'team1',
            },
            {
                id: '2',
                title: 'Create wireframes',
                description: 'Design wireframes for the new feature',
                status: 'todo',
                priority: 'medium',
                assignee: 'Alice Johnson',
                dueDate: '2023-07-05',
                comments: [],
                project_id: '1',
                columnId: 'todo',
                columnName: 'To Do',
                team_id: 'team1',
            },
        ],
    },
    {
        id: 'inprogress',
        title: 'In Progress',
        tasks: [
            {
                id: '3',
                title: 'Develop MVP',
                description: 'Build core features of the product',
                status: 'inprogress',
                priority: 'medium',
                assignee: 'Alice Johnson',
                dueDate: '2023-07-15',
                comments: [],
                project_id: '1',
                columnId: 'inprogress',
                columnName: 'In Progress',
                team_id: 'team1',
            },
        ],
    },
    {
        id: 'done',
        title: 'Done',
        tasks: [
            {
                id: '4',
                title: 'User testing',
                description: 'Conduct user testing for the MVP',
                status: 'done',
                priority: 'low',
                assignee: 'John Doe',
                dueDate: '2023-07-20',
                comments: [],
                project_id: '1',
                columnId: 'done',
                columnName: 'Done',
                team_id: 'team1',
            },
        ],
    },
];

const TaskCard: React.FC<{ task: Task; columnId: string; onEditTask: (task: Task) => void }> = ({ task, columnId, onEditTask }) => {
    const [{ isDragging }, drag] = useDrag({
        type: 'TASK',
        item: { id: task.id, columnId },
        collect: (monitor) => ({
            isDragging: !!monitor.isDragging(),
        }),
    });

    return (
        <div ref={drag} style={{ opacity: isDragging ? 0.5 : 1 }}>
            <Card className="mb-2 cursor-move" onClick={() => onEditTask(task)}>
                <CardHeader className="p-3">
                    <CardTitle className="text-sm font-medium">{task.title}</CardTitle>
                </CardHeader>
                <CardContent className="p-3 pt-0">
                    <p className="text-xs text-gray-500 mb-2">{task.description}</p>
                    <div className="flex justify-between items-center">
                        <Badge variant={task.priority === 'high' ? 'destructive' : task.priority === 'medium' ? 'default' : 'secondary'}>
                            {task.priority}
                        </Badge>
                        <div className="flex items-center space-x-2">
                            <div className="flex items-center text-xs text-gray-500">
                                <Calendar className="w-3 h-3 mr-1" />
                                {task.dueDate}
                            </div>
                            <div className="flex items-center text-xs text-gray-500">
                                <MessageSquare className="w-3 h-3 mr-1" />
                                {task.comments.length}
                            </div>
                        </div>
                    </div>
                </CardContent>
            </Card>
        </div>
    );
};

const Column: React.FC<{ 
    column: Column; 
    moveTask: (taskId: string, sourceColumnId: string, targetColumnId: string) => void;
    onEditTask: (task: Task) => void;
}> = ({ column, moveTask, onEditTask }) => {
    const [, drop] = useDrop({
        accept: 'TASK',
        drop: (item: { id: string; columnId: string }) => {
            if (item.columnId !== column.id) {
                moveTask(item.id, item.columnId, column.id);
            }
        },
    });

    return (
        <div ref={drop} className="bg-gray-100 p-4 rounded-lg w-80 flex-shrink-0">
            <h3 className="font-bold mb-4 flex justify-between items-center">
                {column.title}
                <Button variant="ghost" size="icon">
                    <MoreHorizontal className="h-4 w-4" />
                </Button>
            </h3>
            <ScrollArea className="h-[calc(100vh-200px)]">
                {column.tasks.map((task) => (
                    <TaskCard key={task.id} task={task} columnId={column.id} onEditTask={onEditTask} />
                ))}
            </ScrollArea>
            <Button variant="outline" className="w-full mt-4">
                <PlusCircle className="mr-2 h-4 w-4" /> Add a card
            </Button>
        </div>
    );
}

const BoardPage: React.FC = () => {
    const [columns, setColumns] = useState<Column[]>(initialColumns);
    const [editingTask, setEditingTask] = useState<Task | null>(null);
    const [newListTitle, setNewListTitle] = useState('');

    const moveTask = (taskId: string, sourceColumnId: string, targetColumnId: string) => {
        setColumns((prevColumns) => {
            const newColumns = prevColumns.map((column) => ({ ...column, tasks: [...column.tasks] }));
            const sourceColumn = newColumns.find((col) => col.id === sourceColumnId);
            const targetColumn = newColumns.find((col) => col.id === targetColumnId);
            const taskToMove = sourceColumn?.tasks.find((task) => task.id === taskId);

            if (sourceColumn && targetColumn && taskToMove) {
                sourceColumn.tasks = sourceColumn.tasks.filter((task) => task.id !== taskId);
                targetColumn.tasks.push({...taskToMove, status: targetColumnId as 'todo' | 'inprogress' | 'done'});
            }

            return newColumns;
        });
    }

    const handleEditTask = (task: Task) => {
        setEditingTask(task);
    }

    const handleSaveTask = (updatedTask: Task) => {
        setColumns((prevColumns) => {
            return prevColumns.map((column) => ({
                ...column,
                tasks: column.tasks.map((task) =>
                    task.id === updatedTask.id ? updatedTask : task
                ),
            }));
        });
        setEditingTask(null);
    }

    const handleAddList = () => {
        if (newListTitle.trim()) {
            setColumns((prevColumns) => [
                ...prevColumns,
                { id: newListTitle.toLowerCase().replace(/\s+/g, '-'), title: newListTitle, tasks: [] },
            ]);
            setNewListTitle('');
        }
    };

    return (
        <DndProvider backend={HTML5Backend}>
            <div className="p-4">
                <div className="flex justify-between items-center mb-6">
                    <h1 className="text-2xl font-bold">Project Board</h1>
                    <div className="flex space-x-2">
                        <input
                            type="text"
                            value={newListTitle}
                            onChange={(e) => setNewListTitle(e.target.value)}
                            placeholder="New list title"
                            className="border rounded px-2 py-1"
                        />
                        <Button onClick={handleAddList}>Add List</Button>
                    </div>
                </div>
                <div className="flex space-x-4 overflow-x-auto pb-4">
                    {columns.map((column) => (
                        <Column key={column.id} column={column} moveTask={moveTask} onEditTask={handleEditTask} />
                    ))}
                    <Button variant="outline" className="h-[calc(100vh-160px)] w-80 flex-shrink-0">
                        <PlusCircle className="mr-2 h-4 w-4" /> Add another list
                    </Button>
                </div>
            </div>
            {editingTask && (
                <EditTaskModal
                    isOpen={!!editingTask}
                    onClose={() => setEditingTask(null)}
                    task={editingTask}
                    onSave={handleSaveTask}
                />
            )}
        </DndProvider>
    );
};

export default BoardPage;

================
File: app/tasks/page.tsx
================
'use client';

import React, { useState } from 'react';
import Link from 'next/link';
import { Image, Card, Text, Button } from '@geist-ui/react'; // Ensure these components are available
import { CheckCircle, XCircle } from 'lucide-react'; // Import icons
import SharedLayout from '../../components/SharedLayout';

interface Task {
  id: number;
  title: string;
  completed: boolean;
  category: string;
  dueDate: string;
  priority: string;
}

const TaskManager: React.FC = () => {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [newTask, setNewTask] = useState('');
  const [category, setCategory] = useState('Work');
  const [dueDate, setDueDate] = useState('');
  const [priority, setPriority] = useState('Medium');

  const addTask = () => {
    if (newTask.trim()) {
      setTasks([...tasks, {
        id: Date.now(),
        title: newTask,
        completed: false,
        category,
        dueDate,
        priority,
      }]);
      setNewTask('');
      setDueDate('');
    }
  };

  const toggleTaskCompletion = (id: number) => {
    setTasks(tasks.map(task => 
      task.id === id ? { ...task, completed: !task.completed } : task
    ));
  };

  return (
    <SharedLayout>
      <h1 className="text-3xl font-bold mb-4">Task Manager</h1>
      <div className="bg-gray-900 p-6 rounded-lg shadow-lg">
        <Link href="/another-page">
          <a className="text-blue-400 hover:underline">Go to Another Page</a>
        </Link>
        <div className="mb-4">
          <input
            type="text"
            className="w-full p-2 bg-gray-800 text-white rounded mb-2"
            placeholder="Add a new task"
            value={newTask}
            onChange={(e) => setNewTask(e.target.value)}
          />
          <div className="flex space-x-2 mb-2">
            <select
              className="p-2 bg-gray-800 text-white rounded"
              value={category}
              onChange={(e) => setCategory(e.target.value)}
            >
              <option>Work</option>
              <option>Personal</option>
            </select>
            <input
              type="date"
              className="p-2 bg-gray-800 text-white rounded"
              value={dueDate}
              onChange={(e) => setDueDate(e.target.value)}
            />
            <select
              className="p-2 bg-gray-800 text-white rounded"
              value={priority}
              onChange={(e) => setPriority(e.target.value)}
            >
              <option>High</option>
              <option>Medium</option>
              <option>Low</option>
            </select>
          </div>
          <button
            onClick={addTask}
            className="bg-gradient-to-r from-purple-700 to-blue-800 hover:from-purple-800 hover:to-blue-900 text-white py-2 px-4 rounded"
          >
            Add Task
          </button>
        </div>
        <ul>
          {tasks.map((task: Task) => (
            <li key={task.id} className="flex items-center justify-between mb-2 bg-gray-800 p-4 rounded-lg">
              <div className="flex-1">
                <span
                  className={`block ${task.completed ? 'line-through text-gray-500' : ''}`}
                  onClick={() => toggleTaskCompletion(task.id)}
                >
                  {task.title}
                </span>
                <small className="text-gray-400">
                  {task.category} | Due: {task.dueDate} | Priority: {task.priority}
                </small>
              </div>
              <button
                onClick={() => toggleTaskCompletion(task.id)}
                className={`ml-2 ${task.completed ? 'bg-green-500' : 'bg-red-500'} hover:bg-opacity-75 text-white py-1 px-2 rounded`}
              >
                {task.completed ? <CheckCircle size={16} /> : <XCircle size={16} />}
              </button>
            </li>
          ))}
        </ul>
      </div>
    </SharedLayout>
  );
};

export default TaskManager;

================
File: app/team/[id]/page.tsx
================
'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/router';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { PlusCircle } from 'lucide-react';
import Link from 'next/link';

interface Member {
  id: string;
  name: string;
  email: string;
  role: 'Admin' | 'Editor' | 'Viewer';
}

interface Board {
  id: string;
  name: string;
  tasks: { total: number; completed: number };
}

const initialMembers: Member[] = [
  { id: '1', name: 'John Doe', email: 'john@example.com', role: 'Admin' },
  { id: '2', name: 'Jane Smith', email: 'jane@example.com', role: 'Editor' },
  { id: '3', name: 'Bob Johnson', email: 'bob@example.com', role: 'Viewer' },
];

const initialBoards: Board[] = [
  { id: '1', name: 'Project Alpha', tasks: { total: 20, completed: 8 } },
  { id: '2', name: 'Website Redesign', tasks: { total: 15, completed: 3 } },
];

export default function TeamPage({ params }: { params: { id: string } }) {
  const [members, setMembers] = useState<Member[]>(initialMembers);
  const [boards, setBoards] = useState<Board[]>(initialBoards);
  const [searchTerm, setSearchTerm] = useState('');

  const filteredMembers = members.filter(member => 
    member.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    member.email.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const filteredBoards = boards.filter(board => 
    board.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="container mx-auto py-10">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">Team: {params.id}</h1>
        <div className="flex items-center space-x-2">
          <Input
            placeholder="Search members or boards..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-64"
          />
          <Button>
            <PlusCircle className="mr-2 h-4 w-4" /> Invite Member
          </Button>
        </div>
      </div>
      <div className="space-y-8">
        <Card>
          <CardHeader>
            <CardTitle>Team Members</CardTitle>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Name</TableHead>
                  <TableHead>Email</TableHead>
                  <TableHead>Role</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredMembers.map((member) => (
                  <TableRow key={member.id}>
                    <TableCell className="font-medium">{member.name}</TableCell>
                    <TableCell>{member.email}</TableCell>
                    <TableCell>
                      <Badge variant={member.role === 'Admin' ? 'default' : member.role === 'Editor' ? 'secondary' : 'outline'}>
                        {member.role}
                      </Badge>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
        <div>
          <h2 className="text-2xl font-bold mb-4">Team Boards</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredBoards.map((board) => (
              <Link href={`/teams/${params.id}/projects/${board.id}`} key={board.id}>
                <Card className="hover:shadow-lg transition-shadow">
                  <CardHeader>
                    <CardTitle>{board.name}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-sm text-muted-foreground">
                      <p>Tasks: {board.tasks.completed} / {board.tasks.total}</p>
                      <div className="w-full bg-gray-200 rounded-full h-2.5 mt-2">
                        <div 
                          className="bg-blue-600 h-2.5 rounded-full" 
                          style={{ width: `${(board.tasks.completed / board.tasks.total) * 100}%` }}
                        ></div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </Link>
            ))}
            <Card className="hover:shadow-lg transition-shadow cursor-pointer">
              <CardContent className="flex items-center justify-center h-full">
                <Button variant="ghost">
                  <PlusCircle className="mr-2 h-4 w-4" /> Create New Board
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: app/team/page.tsx
================
'use client';

import React, { useState, useEffect } from 'react';
import { mockClient, Member } from '@/lib/dataProvider';

export default function TeamPage() {
  const [members, setMembers] = useState<Member[]>([]);

  useEffect(() => {
    const fetchMembers = async () => {
      const fetchedMembers = await mockClient.fetchMembers();
      setMembers(fetchedMembers);
    }
    fetchMembers();
  }, []);

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold mb-4">Team</h1>
      <ul>
        {members.map((member) => (
          <li key={member.id} className="mb-2">
            <span className="font-semibold">{member.name}</span> - {member.role}
          </li>
        ))}
      </ul>
    </div>
  );
}

================
File: app/teams/[id]/page.tsx
================
'use client'

import { useState } from 'react'
import { useParams } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Plus, Mail } from 'lucide-react'

const teamMembers = [
    { id: 1, name: 'John Doe', role: 'Developer', email: 'john@example.com', avatar: 'JD' },
    { id: 2, name: 'Jane Smith', role: 'Designer', email: 'jane@example.com', avatar: 'JS' },
    { id: 3, name: 'Bob Johnson', role: 'Product Manager', email: 'bob@example.com', avatar: 'BJ' },
]

export default function TeamPage() {
    const params = useParams()
    const [members, setMembers] = useState(teamMembers)
    const [newMember, setNewMember] = useState({ name: '', role: '', email: '' })

    const addMember = () => {
        if (newMember.name && newMember.role && newMember.email) {
            setMembers([...members, { ...newMember, id: members.length + 1, avatar: newMember.name.substring(0, 2).toUpperCase() }])
            setNewMember({ name: '', role: '', email: '' })
        }
    }

    return (
        <div className="container mx-auto py-10">
            <h1 className="text-4xl font-bold mb-8">Team Details</h1>
            <Card className="mb-8">
                <CardHeader>
                    <CardTitle>Team Members</CardTitle>
                    <CardDescription>Manage your team members and their roles</CardDescription>
                </CardHeader>
                <CardContent>
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHead>Name</TableHead>
                                <TableHead>Role</TableHead>
                                <TableHead>Email</TableHead>
                                <TableHead>Action</TableHead>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {members.map((member) => (
                                <TableRow key={member.id}>
                                    <TableCell className="font-medium">
                                        <div className="flex items-center">
                                            <Avatar className="mr-2">
                                                <AvatarImage src={`https://api.dicebear.com/6.x/initials/svg?seed=${member.avatar}`} />
                                                <AvatarFallback>{member.avatar}</AvatarFallback>
                                            </Avatar>
                                            {member.name}
                                        </div>
                                    </TableCell>
                                    <TableCell>{member.role}</TableCell>
                                    <TableCell>{member.email}</TableCell>
                                    <TableCell>
                                        <Button variant="ghost" size="sm">
                                            <Mail className="h-4 w-4 mr-2" />
                                            Contact
                                        </Button>
                                    </TableCell>
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                </CardContent>
            </Card>
            <Dialog>
                <DialogTrigger asChild>
                    <Button>
                        <Plus className="mr-2 h-4 w-4" /> Add Team Member
                    </Button>
                </DialogTrigger>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>Add New Team Member</DialogTitle>
                        <DialogDescription>Add a new member to your team.</DialogDescription>
                    </DialogHeader>
                    <div className="grid gap-4 py-4">
                        <div className="grid grid-cols-4 items-center gap-4">
                            <Label htmlFor="name" className="text-right">Name</Label>
                            <Input
                                id="name"
                                value={newMember.name}
                                onChange={(e) => setNewMember({ ...newMember, name: e.target.value })}
                                className="col-span-3"
                            />
                        </div>
                        <div className="grid grid-cols-4 items-center gap-4">
                            <Label htmlFor="role" className="text-right">Role</Label>
                            <Input
                                id="role"
                                value={newMember.role}
                                onChange={(e) => setNewMember({ ...newMember, role: e.target.value })}
                                className="col-span-3"
                            />
                        </div>
                        <div className="grid grid-cols-4 items-center gap-4">
                            <Label htmlFor="email" className="text-right">Email</Label>
                            <Input
                                id="email"
                                type="email"
                                value={newMember.email}
                                onChange={(e) => setNewMember({ ...newMember, email: e.target.value })}
                                className="col-span-3"
                            />
                        </div>
                    </div>
                    <DialogFooter>
                        <Button onClick={addMember}>Add Member</Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>
        </div>
    )
}

================
File: app/teams/page.tsx
================
'use client';

import { useState } from 'react';
import Link from 'next/link';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Plus, Users } from 'lucide-react';

const initialTeams = [
  { id: 1, name: 'Development Team', members: 8, avatar: 'DT' },
  { id: 2, name: 'Design Team', members: 5, avatar: 'DE' },
  { id: 3, name: 'Marketing Team', members: 6, avatar: 'MT' },
  { id: 4, name: 'Product Team', members: 4, avatar: 'PT' },
];

export default function TeamsPage() {
  const [teams, setTeams] = useState(initialTeams);
  const [newTeam, setNewTeam] = useState({ name: '', members: 0 });

  const addTeam = () => {
    if (newTeam.name) {
      setTeams([...teams, { ...newTeam, id: teams.length + 1, avatar: newTeam.name.substring(0, 2).toUpperCase() }]);
      setNewTeam({ name: '', members: 0 });
    }
  };

  return (
    <div className="container mx-auto py-10">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-4xl font-bold">Teams</h1>
        <Dialog>
          <DialogTrigger asChild>
            <Button>
              <Plus className="mr-2 h-4 w-4" /> Create Team
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Create New Team</DialogTitle>
              <DialogDescription>Add a new team to your organization.</DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="name" className="text-right">Name</Label>
                <Input
                  id="name"
                  value={newTeam.name}
                  onChange={(e) => setNewTeam({ ...newTeam, name: e.target.value })}
                  className="col-span-3"
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="members" className="text-right">Members</Label>
                <Input
                  id="members"
                  type="number"
                  value={newTeam.members}
                  onChange={(e) => setNewTeam({ ...newTeam, members: parseInt(e.target.value) })}
                  className="col-span-3"
                />
              </div>
            </div>
            <DialogFooter>
              <Button onClick={addTeam}>Create Team</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {teams.map((team) => (
          <Card key={team.id}>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Avatar className="mr-2">
                  <AvatarImage src={`https://api.dicebear.com/6.x/initials/svg?seed=${team.avatar}`} />
                  <AvatarFallback>{team.avatar}</AvatarFallback>
                </Avatar>
                {team.name}
              </CardTitle>
              <CardDescription>{team.members} members</CardDescription>
            </CardHeader>
            <CardFooter>
              <Link href={`/teams/${team.id}`} passHref>
                <Button className="w-full">
                  <Users className="mr-2 h-4 w-4" />
                  View Team
                </Button>
              </Link>
            </CardFooter>
          </Card>
        ))}
      </div>
    </div>
  );
}

================
File: app/types/todo.ts
================
export interface Todo {
  id: string;
  user_id: string;
  title: string;
  completed: boolean;
  text: string;
  created_at: string;
}

================
File: app/utils/supabase/client.ts
================
import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const SUPABASE_ANON_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';

export const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

================
File: app/utils/session.ts
================
import { cookies } from 'next/headers';

function parseSessionCookie(sessionCookie: string | null) {
    if (sessionCookie) {
        return JSON.parse(sessionCookie);
    }
    return null;
}

export const getSession = () => {
    const sessionCookie = cookies().get('supabaseSession')?.value as string | null;
    return parseSessionCookie(sessionCookie);
};

================
File: app/_error.tsx
================


================
File: app/404.tsx
================


================
File: app/client-layout.tsx
================
'use client'

import React, { useState } from 'react'
import { useTheme } from './contexts/ThemeContext'
import ChatIcon from '../components/chat-icon'
import { ChatBotModal } from '@/components/chat-bot-modal'
import CodeEditorIcon from '../components/code-editor-icon'
import { MoncacoEditor } from '@/components/moncaco-editor'
import { Button } from '@/components/ui/button'
import { X } from 'lucide-react'
import Footer from "@/components/footer"
import RobotTransformerWallpaper from '@/components/RobotTransformerWallpaper'; // Ensure this path is correct

export function ClientLayout({ children }: { children: React.ReactNode }) {
  const { theme } = useTheme()

  const [isChatOpen, setIsChatOpen] = useState(false)
  const [isEditorOpen, setIsEditorOpen] = useState(false)

  return (
    <div className={`min-h-screen flex flex-col ${theme === 'dark' ? 'bg-gray-900 text-white  ' : 'bg-white text-black'}`}>
      <RobotTransformerWallpaper /> {/* Add the wallpaper component */}
      <main className="flex-grow pb-20">{children}</main>
      <Footer />
      <ChatIcon onClick={() => setIsChatOpen(true)} />
      <CodeEditorIcon onClick={() => setIsEditorOpen(true)} />
      <ChatBotModal isOpen={isChatOpen} onClose={() => setIsChatOpen(false)} />
      {isEditorOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/80">
          <div className="w-full max-w-4xl bg-gray-600 dark:bg-gray-800 p-3 rounded-lg relative">
            <Button
              className="absolute top-2 right-2 p-2"
              variant="ghost"
              onClick={() => setIsEditorOpen(false)}
            >
              <X className="h-4 w-4" />
            </Button>
            <MoncacoEditor
              onSave={(value) => {
                console.log('Saved:', value)
                setIsEditorOpen(false)
              }}
            />
          </div>
        </div>
      )}
    </div>
  )
}

================
File: app/globals.css
================
/* Remove these lines if Tailwind is not supported */
/* @tailwind components; */
/* @tailwind utilities; */

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Your existing global styles */
:root {
  --primary-color: #000000;
  --secondary-color: #6B7280;
  --background-color: #F3F4F6;
  --text-color: #111827;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  color: var(--text-color);
  background-color: var(--background-color);
  margin: 0;
  padding: 0;
}

.page-container {
  min-height: 100vh;
  padding: 2rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.card {
  background-color: white;
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  padding: 2rem;
  width: 100%;
  max-width: 400px;
}

.page-title {
  color: var(--text-color);
  font-size: 2rem;
  font-weight: 700;
  margin-bottom: 0.5rem;
}

.page-subtitle {
  color: var(--secondary-color);
  font-size: 1rem;
  margin-bottom: 1.5rem;
}

.input-label {
  display: block;
  font-weight: 600;
  margin-bottom: 0.5rem;
}

.input {
  width: 100%;
  padding: 0.75rem;
  margin-bottom: 1rem;
  border: 1px solid #D1D5DB;
  border-radius: 8px;
  font-size: 1rem;
}

.btn {
  width: 100%;
  padding: 0.75rem;
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.3s ease;
  margin-bottom: 0.5rem;
}

.btn:hover {
  background-color: #1F2937;
}

.text-link {
  color: var(--primary-color);
  text-decoration: none;
  font-weight: 600;
}

.text-link:hover {
  text-decoration: underline;
}

.tab-container {
  display: flex;
  margin-bottom: 1rem;
  border: 1px solid #D1D5DB;
  border-radius: 8px;
  overflow: hidden;
}

.tab {
  flex: 1;
  text-align: center;
  padding: 0.75rem;
}

.tab:first-child {
  border-top-left-radius: 8px;
  border-bottom-left-radius: 8px;
}

.tab:last-child {
  border-top-right-radius: 8px;
  border-bottom-right-radius: 8px;
}

.tab.active {
  background-color: white;
  border-bottom: none;
}

/* Add this to the end of your globals.css file */

.atom-spinner {
  position: relative;
  width: var(--size);
  height: var(--size);
  overflow: hidden;
}

.spinner-inner {
  position: relative;
  display: block;
  height: 100%;
  width: 100%;
}

.spinner-circle {
  display: block;
  position: absolute;
  color: var(--color);
  font-size: calc(var(--size) * 0.24);
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.spinner-line {
  position: absolute;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  animation-duration: 1s;
  border-left-width: calc(var(--size) / 25);
  border-top-width: calc(var(--size) / 25);
  border-left-color: var(--color);
  border-left-style: solid;
  border-top-style: solid;
  border-top-color: transparent;
}

.spinner-line:nth-child(1) {
  animation: atom-spinner-animation-1 1s linear infinite;
  transform: rotateZ(120deg) rotateX(66deg) rotateZ(0deg);
}

.spinner-line:nth-child(2) {
  animation: atom-spinner-animation-2 1s linear infinite;
  transform: rotateZ(240deg) rotateX(66deg) rotateZ(0deg);
}

.spinner-line:nth-child(3) {
  animation: atom-spinner-animation-3 1s linear infinite;
  transform: rotateZ(360deg) rotateX(66deg) rotateZ(0deg);
}

@keyframes atom-spinner-animation-1 {
  100% {
    transform: rotateZ(120deg) rotateX(66deg) rotateZ(360deg);
  }
}

@keyframes atom-spinner-animation-2 {
  100% {
    transform: rotateZ(240deg) rotateX(66deg) rotateZ(360deg);
  }
}

@keyframes atom-spinner-animation-3 {
  100% {
    transform: rotateZ(360deg) rotateX(66deg) rotateZ(360deg);
  }
}

================
File: app/header.tsx
================
'use client';

import React from 'react';
import Link from 'next/link';
import { useTheme } from './contexts/ThemeContext';
import { useRouter, usePathname } from 'next/navigation';
import { Button } from "@/components/ui/button";
import { Settings } from 'lucide-react';

const isUserLoggedIn = () => {
  return true; // Change this to false to test logged-out state
};

const signOut = async () => {
  console.log('User signed out');
};

export function Header() {
  const { theme, toggleTheme } = useTheme();
  const router = useRouter();
  const pathname = usePathname();

  const handleSignOut = async () => {
    await signOut();
    router.push('/login');
  };

  const isAuthPage = pathname === '/login' || pathname === '/signup';

  return (
    <header className={`w-full py-4 fixed top-0 left-0 right-0 z-10 bg-white shadow`}>
      <div className="container mx-auto px-4 flex justify-between items-center">
        <Link href="/">
          <img src="/images/image.svg" alt="QuantumLabs Logo" className="h-10" />
        </Link>
        {!isAuthPage && (
          <nav>
            <ul className="flex space-x-4 items-center">
              <li><Link href="/dashboard" className={`hover:underline ${pathname === '/dashboard' ? 'font-bold' : ''}`}>Dashboard</Link></li>
              <li><Link href="/agents" className={`hover:underline ${pathname === '/agents' ? 'font-bold' : ''}`}>Agents</Link></li>
              <li><Link href="/projects" className={`hover:underline ${pathname === '/projects' ? 'font-bold' : ''}`}>Projects</Link></li>
              <li><Link href="/settings" className={`hover:underline ${pathname === '/settings' ? 'font-bold' : ''}`}>Settings</Link></li>
              {isUserLoggedIn() ? (
                <li>
                  <button 
                    onClick={handleSignOut}
                    className={`px-3 py-1 rounded ${theme === 'dark' ? 'bg-red-600 hover:bg-red-700' : 'bg-red-500 hover:bg-red-600'} text-white`}
                  >
                    Sign Out
                  </button>
                </li>
              ) : (
                <>
                  <li><Link href="/login" className={`hover:underline ${pathname === '/login' ? 'font-bold' : ''}`}>Log in</Link></li>
                  <li>
                    <Button>
                      <Link href="/signup" className="text-white">Sign up</Link>
                    </Button>
                  </li>
                </>
              )}
              <li>
                <button 
                  onClick={toggleTheme}
                  className="p-1 rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white"
                  aria-label="Toggle theme"
                >
                  {theme === 'light' ? (
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
                    </svg>
                  ) : (
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
                    </svg>
                  )}
                </button>
              </li>
            </ul>
          </nav>
        )}
      </div>
    </header>
  );
}

================
File: app/layout.tsx
================
'use client';

import React, { ReactNode } from 'react';
import { ThemeProvider } from '@/app/contexts/ThemeContext'; // Corrected import path
import '@/styles/globals.css'; // Adjust this path if needed
import TopBar from '@/components/TopBar'; // Import the TopBar component
import RobotTransformerWallpaper from '@/components/RobotTransformerWallpaper'; // Ensure this path is correct

interface LayoutProps {
    children: ReactNode;
}

const RootLayout: React.FC<LayoutProps> = ({ children }) => {
    return (
        <html lang="en">
            <body>
                <ThemeProvider>
                    <RobotTransformerWallpaper /> {/* Add the wallpaper component */}
                    <TopBar />

                    {children}
                </ThemeProvider>
            </body>
        </html>
    );
};

export default RootLayout;

================
File: app/loading.tsx
================
import Spinner from '@/components/ui/spinner';
import React from 'react';

export default function Loading() {
  return (
    <div className="fixed inset-0 flex items-center justify-center bg-gray-100 bg-opacity-50 z-50">
      <Spinner  />
    </div>
  );
}

================
File: app/metadata.ts
================
import { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'QuantumLabs',
  description: 'Manage your tasks and projects efficiently with QuantumLabs',
}

================
File: app/middleware.ts
================
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
    // Your middleware logic
    return NextResponse.next();
}

================
File: app/next.config.js
================
module.exports = {
    // Other Next.js config options
    metadataBase: 'https://yourdomain.com', // Replace with your actual domain
};

================
File: app/page.tsx
================
'use client';

import Link from 'next/link';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ArrowRight, LayoutDashboard, Users, Briefcase, Bot, BarChart, Settings, Workflow, FileText} from 'lucide-react';
import ChatbotModal from '@/components/ChatbotModal';
import ChatModal from '@/components/ChatModal';

const pages = [
  { title: 'Dashboard', description: 'Overview of your projects and tasks', icon: LayoutDashboard, href: '/dashboard' },
  { title: 'Teams', description: 'Manage your teams and members', icon: Users, href: '/teams' },
  { title: 'Projects', description: 'View and manage your projects', icon: Briefcase, href: '/projects' },
  { title: 'Agent Design', description: 'Manage AI agents for task assistance', icon: Bot, href: '/agent-design' },
  { title: 'Task Design', description: 'Manage tasks and workflows', icon: Workflow, href: '/task-design' },
  { title: 'Analytics', description: 'Insights and performance metrics', icon: BarChart, href: '/analytics' },
  { title: 'Documentation', description: 'View the documentation', icon: FileText, href: '/documentation' },
  { title: 'Settings', description: 'Configure your account and preferences', icon: Settings, href: '/settings' },
];

export default function HomePage() {
  return (
    <div className="container mx-auto py-10">
      <h1 className="text-4xl font-bold mb-8">Welcome to TaskFlow</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {pages.map((page, index) => (
          <Card key={index}>
            <CardHeader>
              <CardTitle className="flex items-center">
                <page.icon className="mr-2 h-6 w-6" />
                {page.title}
              </CardTitle>
              <CardDescription>{page.description}</CardDescription>
            </CardHeader>
            <CardFooter>
              <Link href={page.href} passHref>
                <Button className="w-full">
                  Go to {page.title}
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
              </Link>
            </CardFooter>
          </Card>
        ))}
      </div>
    </div>
  );
}

================
File: app/taskboard.module.css
================
.board {
  padding: 20px;
  background-color: #f0f2f5;
  min-height: 100vh;
}

.addTaskForm {
  margin-bottom: 20px;
}

.addTaskInput {
  padding: 8px;
  margin-right: 10px;
  border: 1px solid #dfe1e6;
  border-radius: 3px;
  font-size: 14px;
}

.addTaskButton {
  background-color: #0079bf;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 3px;
  cursor: pointer;
  font-size: 14px;
}

.columns {
  display: flex;
  justify-content: space-between;
  gap: 20px;
}

.column {
  background-color: #ebecf0;
  border-radius: 3px;
  width: calc(33.33% - 14px);
  padding: 10px;
}

.taskList {
  min-height: 100px;
  transition: background-color 0.2s ease;
}

.draggingOver {
  background-color: #e0e5ec;
}

.task {
  background-color: white;
  border-radius: 3px;
  padding: 10px;
  margin-bottom: 10px;
  box-shadow: 0 1px 0 rgba(9,30,66,.25);
  transition: box-shadow 0.2s ease;
}

.dragging {
  box-shadow: 0 5px 10px rgba(9,30,66,.25);
}

.taskActions {
  margin-top: 10px;
}

.moveButton {
  background-color: #5aac44;
  color: white;
  border: none;
  padding: 5px 10px;
  border-radius: 3px;
  cursor: pointer;
  font-size: 12px;
  margin-right: 5px;
}

.signOutButton {
  background-color: #f44336;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 3px;
  cursor: pointer;
  font-size: 14px;
  margin-bottom: 20px;
}

================
File: app/types.ts
================
export interface Task {
  id: number;
  title: string;
  description: string;
  objective: string;
  difficulty: 'Low' | 'Medium' | 'High' | 'Critical';
  estimatedTime: string;
  status: 'To Do' | 'In Progress' | 'In Review' | 'Completed';
  assignedAgents: Agent[];
  recommendedTools: string[];
}

export interface Agent {
  id: number;
  name: string;
  avatar: string;
  expertise: string;
}

================
File: app/Typescript-task.code-workspace
================
{
	"folders": [
		{
			"path": "../.."
		}
	],
	"settings": {
		"typescript.enablePromptUseWorkspaceTsdk": true,
		"typescript.tsdk": "../../node_modules/typescript/lib"
	}
}

================
File: components/forms/form-message.tsx
================
'use client';

import React from 'react';

interface FormMessageProps {
  message: string;
}

export const FormMessage: React.FC<FormMessageProps> = ({ message }) => {
  return (
    <div className="text-red-500 text-sm mt-2">
      {message}
    </div>
  );
};

================
File: components/forms/input.tsx
================
import { cn } from "@/utils/cn";

export function Input({ ...props }: React.JSX.IntrinsicElements["input"]) {
  return (
    <input
      className={cn(
        "rounded-md h-8 text-sm px-4 py-2 bg-inherit border",
        props.className,
      )}
      {...props}
    />
  );
}

================
File: components/forms/label.tsx
================
import { cn } from "@/utils/cn";
import React from "react";

export function Label({
  children,
  ...props
}: { children: React.ReactNode } & React.JSX.IntrinsicElements["label"]) {
  return (
    <label className={cn("text-sm font-medium", props.className)} {...props}>
      {children}
    </label>
  );
}

================
File: components/forms/submit-button.tsx
================
import {useFormContext} from 'react-hook-form';
import React from "react";

type SubmitButtonProps = {
    children: React.ReactNode,
    isLoading?: boolean,
    type?: string
};

export const SubmitButton = ({children, isLoading}: SubmitButtonProps) => {
    const {formState: {isValid}} = useFormContext();

    return (
        <button
            type="submit"
            disabled={!isValid || isLoading} // Disable button if form is invalid or loading
            className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-gray-400"
        >
            {isLoading ? 'Loading...' : children} {/* Show loading text if isLoading is true */}
        </button>
    );
};

================
File: components/ui/accordion.tsx
================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className={cn(
      "overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down",
      className
    )}
    {...props}
  >
    <div className="pb-4 pt-0">{children}</div>
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: components/ui/avatar-image.tsx
================
'use client';

import React from 'react';

export const AvatarImage: React.FC<{ src: string; alt: string }> = ({ src, alt }) => {
  return (
    <img
      src={src}
      alt={alt}
      className="h-full w-full object-cover"
    />
  );
};

================
File: components/ui/avatar.tsx
================
'use client';

import React from 'react';
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "@/lib/utils";

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: components/ui/badge.tsx
================
'use client';

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: components/ui/button.tsx
================
'use client';

import * as React from "react"
import {cva, type VariantProps} from "class-variance-authority"
import {cn} from "@/lib/utils"
import {Slot} from "@radix-ui/react-slot";

const buttonVariants = cva(
    "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
    {
        variants: {
            variant: {
                default: "bg-primary text-primary-foreground hover:bg-primary/90",
                destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
                outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
                secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
                ghost: "hover:bg-accent hover:text-accent-foreground",
                link: "text-primary underline-offset-4 hover:underline",
            },
            size: {
                default: "h-10 px-4 py-2",
                sm: "h-9 rounded-md px-3",
                lg: "h-11 rounded-md px-8",
                icon: "h-10 w-10",
            },
        },
        defaultVariants: {
            variant: "default",
            size: "default",
        },
    }
)

export interface ButtonProps
    extends React.ButtonHTMLAttributes<HTMLButtonElement>,
        VariantProps<typeof buttonVariants> {
    asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
    ({className, variant, size, asChild = false, ...props}, ref) => {
        const Comp = asChild ? Slot : "button"
        return (
            <Comp
                className={cn(buttonVariants({variant, size, className}))}
                ref={ref}
                {...props}
            />
        )
    }
)
Button.displayName = "Button"

export {Button, buttonVariants}

================
File: components/ui/card-content.tsx
================
import React, { forwardRef, HTMLAttributes, ReactNode } from 'react';

interface CardContentProps extends HTMLAttributes<HTMLDivElement> {
  children: ReactNode;
}

export const CardContent = forwardRef<HTMLDivElement, CardContentProps>(
  ({ children, ...props }, ref) => (
    <div ref={ref} {...props}>
      {children}
    </div>
  )
);

CardContent.displayName = 'CardContent';

================
File: components/ui/card-description.tsx
================
'use client';

import React from 'react';

interface CardDescriptionProps {
    children: React.ReactNode;
    className?: string; // Optional className for additional styling
}

export const CardDescription: React.FC<CardDescriptionProps> = ({ children, className }) => {
    return (
        <p className={`text-sm text-gray-600 ${className}`}>
            {children}
        </p>
    );
};

export default CardDescription;

================
File: components/ui/card-footer.tsx
================
'use client';

import React, { forwardRef, HTMLAttributes, ReactNode } from 'react';

interface CardFooterProps extends HTMLAttributes<HTMLDivElement> {
    children: ReactNode;
}

export const CardFooter = forwardRef<HTMLDivElement, CardFooterProps>(
    ({ children, ...props }, ref) => (
        <div ref={ref} {...props}>
            {children}
        </div>
    )
);

CardFooter.displayName = 'CardFooter';

================
File: components/ui/card-header.tsx
================
import React from 'react';

interface CardHeaderProps extends React.HTMLAttributes<HTMLDivElement> {}

export const CardHeader: React.FC<CardHeaderProps> = ({ children, ...props }) => {
  return (
    <div className="card-header" {...props}>
      {children}
    </div>
  );
};

================
File: components/ui/card-title.tsx
================
import React from 'react';

interface CardTitleProps extends React.HTMLAttributes<HTMLDivElement> {}

export const CardTitle: React.FC<CardTitleProps> = ({ children, ...props }) => {
  return (
    <div className="card-title" {...props}>
      {children}
    </div>
  );
};

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/cardContent.tsx
================
import React, { forwardRef, HTMLAttributes, ReactNode } from 'react';

interface CardContentProps extends HTMLAttributes<HTMLDivElement> {
  children: ReactNode;
}

export const CardContent = forwardRef<HTMLDivElement, CardContentProps>(
  ({ children, ...props }, ref) => (
    <div ref={ref} {...props}>
      {children}
    </div>
  )
);

CardContent.displayName = 'CardContent';

================
File: components/ui/cardFooter.tsx
================
import React, { forwardRef, HTMLAttributes, ReactNode } from 'react';

interface CardFooterProps extends HTMLAttributes<HTMLDivElement> {
  children: ReactNode;
}

export const CardFooter = forwardRef<HTMLDivElement, CardFooterProps>(
  ({ children, ...props }, ref) => (
    <div ref={ref} {...props}>
      {children}
    </div>
  )
);

CardFooter.displayName = 'CardFooter';

================
File: components/ui/cardHeader.tsx
================
import React, { forwardRef, HTMLAttributes, ReactNode } from 'react';

interface CardHeaderProps extends HTMLAttributes<HTMLDivElement> {
  children: ReactNode;
}

export const CardHeader = forwardRef<HTMLDivElement, CardHeaderProps>(
  ({ children, ...props }, ref) => (
    <div ref={ref} {...props}>
      {children}
    </div>
  )
);

CardHeader.displayName = 'CardHeader';

================
File: components/ui/cardTitle.tsx
================
import React, { forwardRef, HTMLAttributes, ReactNode } from 'react';

interface CardTitleProps extends HTMLAttributes<HTMLHeadingElement> {
  children: ReactNode;
}

export const CardTitle = forwardRef<HTMLHeadingElement, CardTitleProps>(
  ({ children, ...props }, ref) => (
    <h2 ref={ref} {...props}>
      {children}
    </h2>
  )
);

CardTitle.displayName = 'CardTitle';

================
File: components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay className="bg-black/80" /> {/* Increased opacity here */}
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: components/ui/dropdown-menu.tsx
================
'use client';

import React from 'react';

export const DropdownMenu: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  return (
    <div className="relative inline-block text-left">
      {children}
    </div>
  );
};

export const DropdownMenuTrigger: React.FC<{ asChild: boolean; children: React.ReactNode }> = ({ children }) => {
  return (
    <div>
      {children}
    </div>
  );
};

export const DropdownMenuContent: React.FC<{ children: React.ReactNode; className?: string; align?: 'start' | 'end'; forceMount?: boolean }> = ({ children, className }) => {
  return (
    <div className={`absolute z-10 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 ${className}`}>
      {children}
    </div>
  );
};

export const DropdownMenuItem: React.FC<{ children: React.ReactNode, asChild?: boolean, onClick?: () => void }> = ({children, onClick}) => {
  return (
    <div className="cursor-pointer hover:bg-gray-100 px-4 py-2 text-sm text-gray-700" onClick={onClick}>
      {children}
    </div>
  );
};

export const DropdownMenuLabel: React.FC<{ children: React.ReactNode, className?: string }> = ({children}) => {
  return (
    <div className="px-4 py-2 text-sm font-medium text-gray-900">
      {children}
    </div>
  );
};

export const DropdownMenuSeparator: React.FC = () => {
  return (
    <div className="border-t border-gray-200 my-1" />
  );
};

================
File: components/ui/input.tsx
================
'use client';

import * as React from "react";

import { cn } from "@/lib/utils";

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: components/ui/label.tsx
================
import React from 'react';

interface LabelProps {
    htmlFor: string;
    children: React.ReactNode;
    className?: string;
}

export const Label: React.FC<LabelProps> = ({ htmlFor, children, className }) => {
    return (
        <label htmlFor={htmlFor} className={`block text-sm font-medium text-gray-700 ${className}`}>
            {children}
        </label>
    );
};

================
File: components/ui/progress.tsx
================
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

================
File: components/ui/scroll-area.tsx
================
'use client';

import * as React from "react";
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";

import { cn } from "@/lib/utils";

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
));
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
));
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;

export { ScrollArea, ScrollBar };

================
File: components/ui/select.tsx
================
'use client';

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
}

================
File: components/ui/separator.tsx
================
import React from 'react';

export const Separator: React.FC<{ className?: string }> = ({ className }) => {
    return <hr className={`border-t border-gray-300 ${className}`} />;
};

================
File: components/ui/sheet.tsx
================
import React, {ReactNode} from 'react';

interface SheetProps {
    open: boolean;
    onOpenChange: (open: boolean) => void;
    children: ReactNode;
}

export const Sheet: React.FC<SheetProps> = ({open, onOpenChange, children}) => {
    return (
        <div
            className={`fixed inset-0 z-50 transition-opacity ${open ? 'opacity-100' : 'opacity-0 pointer-events-none'}`}>
            <div className="absolute inset-0 bg-black opacity-50" onClick={() => onOpenChange(false)}/>
            <div
                className={`absolute right-0 top-0 h-full w-80 bg-white transition-transform transform ${open ? 'translate-x-0' : 'translate-x-full'}`}>
                {children}
            </div>
        </div>
    );
};

interface SheetTriggerProps {
    asChild?: boolean;
    children: ReactNode;
}

export const SheetTrigger: React.FC<SheetTriggerProps> = ({children}) => {
    return <>{children}</>; // Render children directly, can be enhanced for more functionality
};

interface SheetContentProps {
    children: ReactNode,
    side?: 'left' | 'right',
    className?: string
}

export const SheetContent: React.FC<SheetContentProps> = ({children}) => {
    return <div className={`p-4`}>{children}</div>; // Add padding or styles as needed
};

================
File: components/ui/Slider.tsx
================
'use client';

import React from 'react';

const Slider: React.FC<{ value: number; onChange: (value: number) => void; max?: number; min?: number; step?: number }> = ({ value, onChange, max = 100, min = 0, step = 1 }) => {
    return (
        <input
            type="range"
            value={value}
            onChange={(e) => onChange(Number(e.target.value))}
            max={max}
            min={min}
            step={step}
            className="w-full"
        />
    );
};

export default Slider;

================
File: components/ui/spinner.tsx
================
import React from 'react';

interface SpinnerProps {
  size?: number;
  color?: string;
}

const Spinner: React.FC<SpinnerProps> = ({ size = 40, color = '#3B82F6' }) => {
  return (
    <div className="flex justify-center items-center">
      <div
        className="animate-spin rounded-full border-t-2 border-b-2"
        style={{
          width: `${size}px`,
          height: `${size}px`,
          borderColor: color,
        }}
      ></div>
    </div>
  );
};

export default Spinner;

================
File: components/ui/switch.tsx
================
'use client';

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"
import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-[24px] w-[44px] shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-blue-600 data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn("bg-primary font-medium text-primary-foreground", className)}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: components/ui/tabs.tsx
================
'use client';

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"
import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

================
File: components/ui/toast.tsx
================


================
File: components/ui/use-toast.ts
================


================
File: components/AddTaskModal.tsx
================
"use client"

import React, { useState } from 'react';
import { Modal, Button } from '@geist-ui/core';
import { Input } from './ui/input';

interface AddTaskModalProps {
    isOpen: boolean;
    onClose: () => void;
    onAdd: (task: { title: string; description: string; }) => void;
}

const AddTaskModal: React.FC<AddTaskModalProps> = ({ isOpen, onClose, onAdd }) => {
    const [title, setTitle] = useState('');
    const [description, setDescription] = useState('');

    const handleAddTask = () => {
        if (title.trim() && description.trim()) {
            onAdd({ title, description });
            setTitle('');
            setDescription('');
            onClose();
        }
    };
    return (
        <Modal visible={isOpen} onClose={onClose}>
            <Modal.Title>Add New Task</Modal.Title>
            <Modal.Content>
                <Input
                    placeholder="Task Title"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                />
                <Input
                    placeholder="Task Description"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                />
            </Modal.Content>
            <Modal.Action passive onClick={onClose} placeholder="Cancel">Cancel</Modal.Action>
            <Modal.Action onClick={handleAddTask} placeholder="Add Task">Add Task</Modal.Action>
        </Modal>
    );
};

export default AddTaskModal;

================
File: components/agent-detail-view.tsx
================
'use client';

import React from 'react';
import { Button } from "@/components/ui/button";
import { Agent } from '@/types';

interface AgentDetailViewProps {
  agent: Agent;
  isOpen: boolean;
  onClose: () => void;
}

const AgentDetailView: React.FC<AgentDetailViewProps> = ({ agent, isOpen, onClose }) => {
  return (
    <div className={`modal ${isOpen ? 'block' : 'hidden'}`}>
      <div className="modal-content bg-gray-800 text-white p-4 rounded">
        <h2 className="text-xl font-bold">{agent.name}</h2>
        <p><strong>Expertise:</strong> {agent.expertise}</p>
        <p><strong>Backstory:</strong> {agent.backstory}</p>
        <div className="flex justify-between mt-4">
          <Button onClick={onClose} className="bg-red-500">Close</Button>
        </div>
      </div>
    </div>
  );
};

export default AgentDetailView;

================
File: components/AgentView.tsx
================


================
File: components/auth-handler.tsx
================
'use client';

import React from 'react';

export default function AuthHandler() {
    return (
        <div>
            <h1>Login</h1>
            <input type="email" placeholder="Email" />
            <input type="password" placeholder="Password" />
            <button>Login</button>
            <button>Login with Google</button>
        </div>
    );
}

================
File: components/button.tsx
================
import React from 'react';

interface ButtonProps {
  onClick: () => void;
  children: React.ReactNode;
}

const Button: React.FC<ButtonProps> = ({ onClick, children }) => {
  return (
    <button onClick={onClick} className="bg-blue-500 text-white p-2 rounded">
      {children}
    </button>
  );
};

export default Button;

================
File: components/CenteredAtomSpinner.tsx
================
import React from 'react';

const CenteredAtomSpinner: React.FC = () => {
  return (
    <div className="flex items-center justify-center h-screen">
      <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-blue-600"></div>
    </div>
  );
};

export default CenteredAtomSpinner;

================
File: components/Chart.tsx
================
'use client';

import React, { useEffect, useState } from 'react';
import { Line } from 'react-chartjs-2';

const Chart: React.FC = () => {
  const [data, setData] = useState<number[]>([10, 20, 30, 40, 50]);

  useEffect(() => {
    const updateData = () => {
      setData((prevData) => {
        const newData = [...prevData];
        newData.shift(); // Remove the first element
        newData.push(Math.floor(Math.random() * 100)); // Add a new random element
        return newData;
      });
    };

    const randomInterval = () => Math.floor(Math.random() * (10000 - 2000 + 1)) + 2000;

    const intervalId = setInterval(() => {
      updateData();
      setTimeout(() => {
        clearInterval(intervalId);
        setInterval(updateData, randomInterval());
      }, randomInterval());
    }, randomInterval());

    return () => clearInterval(intervalId);
  }, []);

  const chartData = {
    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May'],
    datasets: [
      {
        label: 'Random Data',
        data: data,
        fill: false,
        backgroundColor: 'rgba(75,192,192,0.4)',
        borderColor: 'rgba(75,192,192,1)',
      },
    ],
  };

  return <Line data={chartData} />;
};

export default Chart;

================
File: components/chat-bot-modal.tsx
================
'use client';

import { useState, useRef, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"; // Updated import
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useTheme } from '../app/contexts/ThemeContext';

type Persona = 'Engineering' | 'QA' | 'Product Manager' | 'Customer'

interface Message {
  id: string
  content: string
  sender: 'user' | 'bot'
}

interface ChatbotModalProps {
  isOpen: boolean
  onClose: () => void
}

export function ChatBotModal({ isOpen, onClose }: ChatbotModalProps) {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [persona, setPersona] = useState<Persona>('Engineering');
  const [modalSize, setModalSize] = useState({ width: 500, height: 600 });
  const resizeRef = useRef<HTMLDivElement>(null);
  const {   theme } = useTheme();

  const handleSendMessage = () => {
    if (inputMessage.trim()) {
      const newMessage: Message = {
        id: Date.now().toString(),
        content: inputMessage,
        sender: 'user',
      }
      setMessages([...messages, newMessage])
      setInputMessage('')

      // Simulate bot response
      setTimeout(() => {
        const botResponse: Message = {
          id: (Date.now() + 1).toString(),
          content: `${persona} persona: I've received your message and I'm processing it.`,
          sender: 'bot',
        }
        setMessages(prevMessages => [...prevMessages, botResponse])
      }, 1000)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  useEffect(() => {
    const resizeModal = (e: MouseEvent) => {
      if (resizeRef.current) {
        const newWidth = e.clientX - resizeRef.current.getBoundingClientRect().left;
        const newHeight = e.clientY - resizeRef.current.getBoundingClientRect().top;
        setModalSize({ width: newWidth, height: newHeight });
      }
    };

    const stopResize = () => {
      window.removeEventListener('mousemove', resizeModal);
      window.removeEventListener('mouseup', stopResize);
    };

    const startResize = (e: MouseEvent) => {
      e.preventDefault();
      window.addEventListener('mousemove', resizeModal);
      window.addEventListener('mouseup', stopResize);
    };

    const resizeHandle = resizeRef.current;
    if (resizeHandle) {
      resizeHandle.addEventListener('mousedown', startResize as EventListener);
    }

    return () => {
      if (resizeHandle) {
        resizeHandle.removeEventListener('mousedown', startResize as EventListener);
      }
    };
  }, []);

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className={`sm:max-w-[500px] ${theme === 'dark' ? 'bg-gray-800 text-white' : 'bg-white text-gray-900'}`}>
        <DialogHeader>
          <DialogTitle className="text-xl font-bold">Chatbot Assistant</DialogTitle>
        </DialogHeader>
        <div className="flex flex-col h-[500px]">
          <div className="flex items-center space-x-2 mb-4">
            <span className="text-sm font-medium">Current Persona:</span>
            <Select value={persona} onValueChange={(value: Persona) => setPersona(value)}>
              <SelectTrigger className={`w-[180px] ${theme === 'dark' ? 'bg-gray-700 text-white border-gray-600' : 'bg-white text-gray-900 border-gray-300'}`}>
                <SelectValue placeholder="Select a persona" />
              </SelectTrigger>
              <SelectContent className={theme === 'dark' ? 'bg-gray-700 text-white border-gray-600' : 'bg-white text-gray-900 border-gray-300'}>
                <SelectItem value="Engineering">Engineering</SelectItem>
                <SelectItem value="QA">QA</SelectItem>
                <SelectItem value="Product Manager">Product Manager</SelectItem>
                <SelectItem value="Customer">Customer</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <ScrollArea className={`flex-grow border rounded-md p-4 ${theme === 'dark' ? 'bg-gray-700 border-gray-600' : 'bg-gray-100 border-gray-300'}`}>
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${
                  message.sender === 'user' ? 'justify-end' : 'justify-start'
                } mb-4`}
              >
                <div
                  className={`flex items-start ${
                    message.sender === 'user' ? 'flex-row-reverse' : 'flex-row'
                  }`}
                >
                  <Avatar className="w-8 h-8">
                    <AvatarImage
                      src={message.sender === 'user' ? '/user-avatar.png' : '/bot-avatar.png'}
                      alt={message.sender === 'user' ? 'User' : 'Bot'}
                    />
                    <AvatarFallback>{message.sender === 'user' ? 'U' : 'B'}</AvatarFallback>
                  </Avatar>
                  <div
                    className={`mx-2 p-3 rounded-lg ${
                      message.sender === 'user'
                        ? theme === 'dark' ? 'bg-blue-600 text-white' : 'bg-blue-100 text-gray-900'
                        : theme === 'dark' ? 'bg-gray-600 text-white' : 'bg-gray-200 text-gray-900'
                    }`}
                  >
                    {message.content}
                  </div>
                </div>
              </div>
            ))}
          </ScrollArea>
          <div className="flex items-center space-x-2 mt-4">
            <Input
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Type your message here..."
                className={`flex-grow ${theme === 'dark' ? 'bg-gray-700 text-white border-gray-600' : 'bg-white text-gray-900 border-gray-300'}`}
            />
            <Button onClick={handleSendMessage} className={theme === 'dark' ? 'bg-blue-600 text-white hover:bg-blue-700' : 'bg-blue-500 text-white hover:bg-blue-600'}>Send</Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}

================
File: components/chat-icon.tsx
================
'use client';

import React from 'react';
import { MessageCircle } from 'lucide-react';
import { useTheme } from '../app/contexts/ThemeContext';

interface ChatIconProps {
  onClick: () => void;
}

const ChatIcon: React.FC<ChatIconProps> = ({ onClick }) => {
  const { theme } = useTheme();

  return (
    <div
      className={`fixed bottom-16 right-4 p-3 rounded-full cursor-pointer transition-colors duration-200 shadow-lg ${
        theme === 'dark' ? 'bg-blue-600 hover:bg-blue-700' : 'bg-blue-500 hover:bg-blue-600'
      }`}
      onClick={onClick}
    >
      <MessageCircle className="w-6 h-6 text-white" />
    </div>
  );
};

export default ChatIcon;

================
File: components/chatbot-modal.tsx
================
'use client'

import React from 'react'

interface ChatbotModalProps {
  isOpen: boolean;
  onClose: () => void;
}

const ChatbotModal: React.FC<ChatbotModalProps> = ({ isOpen, onClose }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
      <div className="bg-white p-4 rounded-lg">
        <h2>Chatbot Modal</h2>
        <button onClick={onClose}>Close</button>
        {/* Add more chatbot content here */}
      </div>
    </div>
  )
}

export default ChatbotModal

================
File: components/chatbot-trigger.tsx
================


================
File: components/ChatbotModal.tsx
================
'use client';

import React, { useState } from 'react';
import { Dialog, DialogContent, DialogOverlay } from '@reach/dialog';
import '@reach/dialog/styles.css';

interface ChatbotModalProps {
  isOpen: boolean;
  onClose: () => void;
}

const ChatbotModal: React.FC<ChatbotModalProps> = ({ isOpen, onClose }) => {
  const [message, setMessage] = useState('');

  const handleSendMessage = async () => {
    try {
      const response = await fetch('http://localhost:5000/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ message }),
      });

      const data = await response.json();
      console.log('Ollama response:', data);
    } catch (error) {
      console.error('Error connecting to Ollama:', error);
    }
  };

  return (
    <Dialog isOpen={isOpen} onDismiss={onClose} className="chatbot-modal">
      <DialogOverlay className="fixed inset-0 bg-black bg-opacity-50" />
      <DialogContent
        className="bg-gray-800 text-white max-w-3xl mx-auto p-6 rounded-lg shadow-lg"
        aria-label="Chatbot"
        // Ensure no laser effect is applied here
        style={{ background: 'none' }} // Remove any unwanted background effects
      >
        <h2 className="text-2xl font-bold mb-4">Chat with Ollama</h2>
        <div className="chatbot-content mb-4">
          <textarea
            className="w-full p-2 bg-gray-700 text-white rounded"
            rows={4}
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            placeholder="Type your message here..."
          />
        </div>
        <button
          onClick={handleSendMessage}
          className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded"
        >
          Send
        </button>
        <button
          onClick={onClose}
          className="mt-4 bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded"
        >
          Close
        </button>
      </DialogContent>
    </Dialog>
  );
};

export default ChatbotModal;

================
File: components/ChatLayout.tsx
================
'use client';

import React, { useState } from 'react';
import { ThemeProvider } from '@/app/contexts/ThemeContext';
import '@/styles/globals.css';
import ChatbotModal from '@/components/ChatbotModal';
import RobotTransformerWallpaper from '@/components/RobotTransformerWallpaper';

interface ChatLayoutProps {
  children: React.ReactNode;
}

const ChatLayout: React.FC<ChatLayoutProps> = ({ children }) => {
  const [isChatbotOpen, setIsChatbotOpen] = useState(false);

  return (
    <ThemeProvider>
      <RobotTransformerWallpaper />
      <div className="relative z-10 min-h-screen">
        {children}
        <button
          onClick={() => setIsChatbotOpen(true)}
          className="fixed bottom-4 right-4 bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded"
        >
          Open Chatbot
        </button>
        <ChatbotModal isOpen={isChatbotOpen} onClose={() => setIsChatbotOpen(false)} />
      </div>
    </ThemeProvider>
  );
};

export default ChatLayout;

================
File: components/ChatModal.tsx
================
'use client';

import React, { useState } from 'react';
import { X } from 'lucide-react';

interface ChatModalProps {
    onClose: () => void;
}

const ChatModal: React.FC<ChatModalProps> = ({ onClose }) => {
    const [messages, setMessages] = useState<string[]>([]);
    const [inputMessage, setInputMessage] = useState('');
    const [loading, setLoading] = useState(false); // No loading state needed for local messages

    const handleSendMessage = () => {
        if (inputMessage.trim()) {
            setMessages([...messages, inputMessage]);
            setInputMessage('');
        }
    };

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-gray-800 text-white rounded-lg w-96 h-[500px] flex flex-col">
                <div className="flex justify-between items-center p-4 border-b border-gray-700">
                    <h2 className="text-xl font-bold">Chat</h2>
                    <button onClick={onClose} className="text-gray-400 hover:text-gray-200">
                        <X className="h-6 w-6" />
                    </button>
                </div>
                <div className="flex-1 overflow-y-auto p-4">
                    {messages.map((msg, index) => (
                        <div key={index} className="mb-2">
                            <span className="bg-blue-600 rounded px-2 py-1">{msg}</span>
                        </div>
                    ))}
                </div>
                <div className="p-4 border-t border-gray-700 flex">
                    <input
                        type="text"
                        value={inputMessage}
                        onChange={(e) => setInputMessage(e.target.value)}
                        className="flex-1 bg-gray-700 text-white border border-gray-600 rounded-l px-2 py-1"
                        placeholder="Type a message..."
                    />
                    <button
                        onClick={handleSendMessage}
                        className="bg-blue-500 text-white px-4 py-1 rounded-r"
                    >
                        Send
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ChatModal;

================
File: components/code-editor-icon.tsx
================
'use client';

import React from 'react';
import { Code } from 'lucide-react';
import { useTheme } from '../app/contexts/ThemeContext';

interface CodeEditorIconProps {
  onClick: () => void;
}

const CodeEditorIcon: React.FC<CodeEditorIconProps> = ({ onClick }) => {
  const { theme } = useTheme();

  return (
    <div
      className={`fixed bottom-16 right-16 p-3 rounded-full cursor-pointer transition-colors duration-200 shadow-lg ${
        theme === 'dark' ? 'bg-green-600 hover:bg-green-700' : 'bg-green-500 hover:bg-green-600'
      }`}
      onClick={onClick}
    >
      <Code className="w-6 h-6 text-white" />
    </div>
  );
};

export default CodeEditorIcon;

================
File: components/CommonLayout.tsx
================
import React, { ReactNode } from 'react';
import { ThemeProvider } from '@/app/contexts/ThemeContext';
import RobotTransformerWallpaper from '@/components/RobotTransformerWallpaper';
import TopBar from '@/components/TopBar';

interface CommonLayoutProps {
  children: ReactNode;
}

const CommonLayout: React.FC<CommonLayoutProps> = ({ children }) => {
  return (
    <ThemeProvider>
      <RobotTransformerWallpaper />
      <TopBar />
      <main className="main-content">
        {children}
      </main>
    </ThemeProvider>
  );
};

export default CommonLayout;

================
File: components/Console.tsx
================
'use client';

import React from 'react';
import Link from 'next/link';

const Console: React.FC = () => {
  return (
    <div className="container mx-auto py-10">
      <h1 className="text-4xl font-bold mb-8">Console</h1>
      <div className="space-y-4">
    
        <Link href="/tasks">
          <span className="text-blue-500 hover:underline">Go to Task Manager</span>
        </Link>
        {/* Add more links or content as needed */}
      </div>
    </div>
  );
};

export default Console;

================
File: components/CryptoPriceGraph.tsx
================
'use client';

import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';

interface CryptoData {
    id: string;
    name: string;
    symbol: string;
    current_price: number;
    price_change_percentage_24h: number;
}

const CryptoPriceGraph: React.FC = () => {
    const [cryptoData, setCryptoData] = useState<CryptoData[]>([]);
    const [loading, setLoading] = useState(true);
    const [currentTokenIndex, setCurrentTokenIndex] = useState(0);
    const [view, setView] = useState<'price' | 'change'>('price'); // Current price or price change

    const fetchCryptoData = async () => {
        try {
            const response = await axios.get('https://api.coingecko.com/api/v3/coins/markets', {
                params: {
                    vs_currency: 'usd',
                    order: 'market_cap_desc',
                    per_page: 50,
                    page: 1,
                    sparkline: false,
                },
            });
            setCryptoData(response.data);
            setLoading(false);
        } catch (error) {
            console.error('Error fetching crypto data:', error);
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchCryptoData();
        const interval = setInterval(fetchCryptoData, 60000); // Refresh every minute
        return () => clearInterval(interval);
    }, []);

    useEffect(() => {
        const tokenChangeInterval = setInterval(() => {
            setCurrentTokenIndex(prevIndex => (prevIndex + 1) % cryptoData.length);
        }, 10000); // Change token every 10 seconds

        return () => clearInterval(tokenChangeInterval);
    }, [cryptoData]);

    useEffect(() => {
        const viewChangeInterval = setInterval(() => {
            setView(prev => (prev === 'price' ? 'change' : 'price'));
        }, 10000); // Change view every 10 seconds

        return () => clearInterval(viewChangeInterval);
    }, []);

    if (loading) {
        return <div>Loading...</div>; // You can replace this with a spinner component
    }

    // Ensure currentToken is defined
    const currentToken = cryptoData[currentTokenIndex];

    return (
        <div className="mt-6">
            <h2 className="text-2xl font-bold mb-4">
                Current {view === 'price' ? 'Price' : 'Price Change'} of {currentToken ? currentToken.name : 'Loading...'}
            </h2>
            <ResponsiveContainer width="100%" height={400}>
                <LineChart data={[{ name: currentToken?.name || 'N/A', value: view === 'price' ? currentToken?.current_price : currentToken?.price_change_percentage_24h }]}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Line type="monotone" dataKey="value" stroke={view === 'price' ? "#10B981" : "#EF4444"} />
                </LineChart>
            </ResponsiveContainer>
        </div>
    );
};

export default CryptoPriceGraph;

================
File: components/Dashboard.tsx
================
'use client';

import React, { useState } from 'react';
import { DndProvider, useDrag, useDrop } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { PlusCircle, MoreHorizontal, Calendar, MessageSquare } from 'lucide-react';
import Link from 'next/link';
import { Task } from '@/lib/task';

interface Column {
  id: string;
  title: string;
  tasks: Task[];
}

const initialColumns: Column[] = [
  {
    id: 'todo',
    title: 'To Do',
    tasks: [],
  },
  {
    id: 'inprogress',
    title: 'In Progress',
    tasks: [],
  },
  {
    id: 'done',
    title: 'Done',
    tasks: [],
  },
];

const TaskCard: React.FC<{ task: Task; columnId: string; moveTask: (taskId: string, sourceColumnId: string, targetColumnId: string) => void }> = ({ task, columnId, moveTask }) => {
  const [{ isDragging }, drag] = useDrag({
    type: 'TASK',
    item: { id: task.id, columnId },
    collect: (monitor) => ({
      isDragging: !!monitor.isDragging(),
    }),
  });

  return (
    <Link href={`/task/${task.id}`} className="cursor-pointer">
      <div ref={drag} style={{ opacity: isDragging ? 0.5 : 1 }}>
        <Card className="mb-2 cursor-move">
          <CardHeader className="p-3">
            <CardTitle className="text-sm font-medium">{task.title}</CardTitle>
          </CardHeader>
          <CardContent className="p-3 pt-0">
            <p className="text-xs text-gray-500 mb-2">{task.description}</p>
            <div className="flex justify-between items-center">
              <Badge variant={task.priority === 'high' ? 'destructive' : task.priority === 'medium' ? 'default' : 'secondary'}>
                {task.priority}
              </Badge>
              <div className="flex items-center space-x-2">
                {task.dueDate && (
                  <div className="flex items-center text-xs text-gray-500">
                    <Calendar className="w-3 h-3 mr-1" />
                    {task.dueDate}
                  </div>
                )}
                {task.comments.length > 0 && (
                  <div className="flex items-center text-xs text-gray-500">
                    <MessageSquare className="w-3 h-3 mr-1" />
                    {task.comments.map((comment) => (
                      <div key={comment.content}>{comment.content}</div>

                      
                    ))}
                  </div>
                )}
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </Link>
  );
};

const Column: React.FC<{ column: Column; moveTask: (taskId: string, sourceColumnId: string, targetColumnId: string) => void }> = ({ column, moveTask }) => {
  const [, drop] = useDrop({
    accept: 'TASK',
    drop: (item: { id: string; columnId: string }) => {
      if (item.columnId !== column.id) {
        moveTask(item.id, item.columnId, column.id);
      }
    },
  });

  return (
    <div ref={drop} className="bg-gray-100 p-4 rounded-lg w-80 flex-shrink-0">
      <h3 className="font-bold mb-4 flex justify-between items-center">
        {column.title}
        <Button variant="ghost" size="icon">
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </h3>
      <ScrollArea className="h-[calc(100vh-200px)]">
        {column.tasks.map((task) => (
          <TaskCard key={task.id} task={task} columnId={column.id} moveTask={moveTask} />
        ))}
      </ScrollArea>
      <Button variant="outline" className="w-full mt-4">
        <PlusCircle className="mr-2 h-4 w-4" /> Add a card
      </Button>
    </div>
  );
};

interface DashboardProps {
  initialTasks: Task[];
}

export default function Dashboard({ initialTasks }: DashboardProps) {
  const [columns, setColumns] = useState<Column[]>(initialColumns.map(column => ({
    ...column,
    tasks: initialTasks.filter(task => task.status === column.id) // Filter tasks based on their status
  })));

  const moveTask = (taskId: string, sourceColumnId: string, targetColumnId: string) => {
    setColumns((prevColumns) => {
      const newColumns = prevColumns.map((column) => ({ ...column, tasks: [...column.tasks] }));
      const sourceColumn = newColumns.find((col) => col.id === sourceColumnId);
      const targetColumn = newColumns.find((col) => col.id === targetColumnId);
      const taskToMove = sourceColumn?.tasks.find((task) => task.id === taskId);

      if (sourceColumn && targetColumn && taskToMove) {
        sourceColumn.tasks = sourceColumn.tasks.filter((task) => task.id !== taskId);
        targetColumn.tasks.push(taskToMove);
      }

      return newColumns;
    });
  };

  return (
    <DndProvider backend={HTML5Backend}>
      <div className="p-4">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold">Dashboard</h1>
          <div className="flex space-x-2">
            <Input className="w-64" placeholder="Search tasks..." />
            <Button>Filter</Button>
          </div>
        </div>
        <div className="flex space-x-4 overflow-x-auto pb-4">
          {columns.map((column) => (
            <Column key={column.id} column={column} moveTask={moveTask} />
          ))}
          <Button variant="outline" className="h-[calc(100vh-160px)] w-80 flex-shrink-0">
            <PlusCircle className="mr-2 h-4 w-4" /> Add another list
          </Button>
        </div>
      </div>
    </DndProvider>
  );
}

================
File: components/documentation.tsx
================
'use client';

import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ScrollArea } from "@/components/ui/scroll-area";
import { AlertCircle, Users, CheckSquare, Bot, GitBranch, Wrench, Lightbulb, MessageSquarePlus } from 'lucide-react';
import Mermaid from 'react-mermaid2'; // Import Mermaid component

const Documentation: React.FC = () => {
  const [activeTab, setActiveTab] = useState("overview");

  const concepts = [
    { id: "teams", icon: Users, title: "Teams", description: "Collaborative groups working on projects" },
    { id: "tasks", icon: CheckSquare, title: "Tasks", description: "Actionable items within projects" },
    { id: "agents", icon: Bot, title: "Agents", description: "AI-powered assistants for task automation" },
    { id: "pipelines", icon: GitBranch, title: "Pipelines", description: "Predefined workflows for projects" },
    { id: "tools", icon: Wrench, title: "Tools", description: "Integrations to extend functionality" },
  ];

  return (
    <div className="min-h-screen bg-gray-900 text-gray-100 p-8">
      <h1 className="text-4xl font-bold mb-8">Task-Flow Documentation</h1>
      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <TabsList className="grid w-full grid-cols-2 lg:grid-cols-6 gap-2">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          {concepts.map((concept) => (
            <TabsTrigger key={concept.id} value={concept.id}>{concept.title}</TabsTrigger>
          ))}
        </TabsList>
        <TabsContent value="overview">
          <Card>
            <CardHeader>
              <CardTitle>Task-Flow: Streamlining Project Management</CardTitle>
              <CardDescription>
                Task-Flow is a comprehensive task management system designed to enhance productivity and streamline project workflows.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <p className="mb-4">
                Our platform is built around five core concepts: Teams, Tasks, Agents, Pipelines, and Tools. Understanding these concepts and their interactions is crucial for effectively using and extending the Task-Flow platform.
              </p>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {concepts.map((concept) => (
                  <Card key={concept.id} className="bg-gray-800">
                    <CardHeader>
                      <CardTitle className="flex items-center">
                        <concept.icon className="mr-2 h-6 w-6" />
                        {concept.title}
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <p>{concept.description}</p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        {concepts.map((concept) => (
          <TabsContent key={concept.id} value={concept.id}>
            <ConceptDetails concept={concept} />
          </TabsContent>
        ))}
      </Tabs>
      <PromptEngineeringTip />
    </div>
  );
};

// Explicitly type the 'concept' parameter
function ConceptDetails({ concept }: { concept: { id: string; icon: React.ComponentType<{ className?: string }>; title: string; description: string } }) {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <concept.icon className="mr-2 h-6 w-6" />
          {concept.title}
        </CardTitle>
        <CardDescription>{concept.description}</CardDescription>
      </CardHeader>
      <CardContent>
        <ScrollArea className="h-[300px] w-full rounded-md border p-4">
          <h3 className="text-lg font-semibold mb-2">Key Characteristics:</h3>
          <ul className="list-disc pl-5 space-y-2">
            {getConceptDetails(concept.id).map((detail, index) => (
              <li key={index}>{detail}</li>
            ))}
          </ul>
          <div className="mt-4">
            <h3 className="text-lg font-semibold mb-2">Concept Diagram:</h3>
            <Mermaid chart={getConceptDiagram(concept.id)} />
          </div>
        </ScrollArea>
      </CardContent>
    </Card>
  );
}

function PromptEngineeringTip() {
  return (
    <Card className="mt-8 bg-blue-900">
      <CardHeader>
        <CardTitle className="flex items-center">
          <Lightbulb className="mr-2 h-6 w-6" />
          Prompt Engineering Tip
        </CardTitle>
      </CardHeader>
      <CardContent>
        <p>
          When working with AI agents in Task-Flow, use clear and specific language in your prompts. For example, instead of "Improve this code," try "Refactor this JavaScript function to improve performance and readability, focusing on reducing nested callbacks and optimizing loop operations."
        </p>
        <div className="mt-4">
          <Button variant="secondary" className="flex items-center">
            <MessageSquarePlus className="mr-2 h-4 w-4" />
            Try Prompt Engineering
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}

// Explicitly type the 'conceptId' parameter
function getConceptDetails(conceptId: string): string[] {
  switch (conceptId) {
    case 'teams':
      return [
        "Teams can have multiple members with different roles (e.g., admin, member, viewer).",
        "Each team can have multiple projects or workspaces.",
        "Teams provide a context for collaboration and resource sharing."
      ];
    case 'tasks':
      return [
        "Tasks have attributes such as title, description, status, priority, and due date.",
        "Tasks can be assigned to team members or agents.",
        "Tasks can be organized into projects or pipelines.",
        "Tasks may have subtasks, creating a hierarchical structure."
      ];
    case 'agents':
      return [
        "Agents can be specialized for different types of tasks (e.g., code review, documentation, testing).",
        "Agents can be assigned to tasks to provide assistance or automation.",
        "Agents can interact with team members, providing suggestions or completing routine tasks."
      ];
    case 'pipelines':
      return [
        "Pipelines define the stages of a workflow (e.g., Planning, Development, Testing, Deployment).",
        "Tasks move through pipeline stages as they progress.",
        "Pipelines can have automated triggers or conditions for moving tasks between stages.",
        "Pipelines provide visibility into the overall progress of a project or process."
      ];
    case 'tools':
      return [
        "Tools can include integrations with version control systems, CI/CD platforms, communication tools, etc.",
        "Tools can be associated with specific tasks or pipeline stages.",
        "Tools enhance the capabilities of Task-Flow by connecting it to the broader ecosystem of development and project management software."
      ];
    default:
      return [];
  }
}

// Explicitly type the 'conceptId' parameter
function getConceptDiagram(conceptId: string): string {
  const diagrams: Record<string, string> = {
    teams: `graph TD
    Team --> Member1[Team Member]
    Team --> Member2[Team Member]
    Team --> Admin[Team Admin]
    Team --> Project1[Project]
    Team --> Project2[Project]
    Project1 --> Task1[Task]
    Project1 --> Task2[Task]
    Project2 --> Task3[Task]`,
    tasks: `stateDiagram-v2
    [*] --> Created
    Created --> InProgress: Assign
    InProgress --> Review: Complete
    Review --> Done: Approve
    Review --> InProgress: Request Changes
    Done --> [*]`,
    agents: `sequenceDiagram
    participant User
    participant Agent
    participant Task
    User->>Agent: Assign to task
    Agent->>Task: Analyze task
    Agent->>User: Provide suggestions
    User->>Task: Update task
    Agent->>Task: Perform automated actions
    Task->>User: Update status`,
    pipelines: `graph LR
    Start((Start)) --> Planning
    Planning --> Development
    Development --> Testing
    Testing --> Deployment
    Deployment --> End((End))
    subgraph Pipeline
    Planning
    Development
    Testing
    Deployment
    end`,
    tools: `graph TD
    Task --> GitIntegration[Git Integration]
    Task --> CITool[CI Tool]
    Pipeline --> DeploymentTool[Deployment Tool]
    Agent --> AnalysisTool[Code Analysis Tool]
    subgraph External Tools
    GitIntegration
    CITool
    DeploymentTool
    AnalysisTool
    end`
  };

  return diagrams[conceptId];
}

export default Documentation;

================
File: components/Dropdown.tsx
================
import React from "react";
import { ChevronDown } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

interface DropdownOption {
  label: string;
  onClick: () => void;
}

interface DropdownProps {
  label: string;
  items: DropdownOption[];
}

const Dropdown: React.FC<DropdownProps> = ({ label, items }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" className="flex items-center gap-2">
          {label}
          <ChevronDown className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-56">
        <DropdownMenuLabel>{label}</DropdownMenuLabel>
        <DropdownMenuSeparator />
        {items.map((item, index) => (
          <DropdownMenuItem key={index} onClick={item.onClick}>
            {item.label}
          </DropdownMenuItem>
        ))}
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default Dropdown;

================
File: components/ExampleComponent.tsx
================
// This file is now in the components directory

================
File: components/FloatingActionButton.tsx
================
'use client';

import { Plus } from 'lucide-react';
import { Button } from "@/components/ui/button";

export default function FloatingActionButton() {
  const isVisible = false; // Set this to true when you want to show the button

  if (!isVisible) return null;

  const handleClick = () => {
    // TODO: Implement action for button click
    console.log('Floating action button clicked');
  };

  return (
    <Button 
      size="icon" 
      className="fixed bottom-20 right-4 h-14 w-14 rounded-full shadow-lg"
      onClick={handleClick}
    >
      <Plus className="h-6 w-6" />
    </Button>
  );
}

================
File: components/footer.tsx
================
import React, { useState } from 'react';
import { useTheme } from '../app/contexts/ThemeContext';
import { Modal,  Button } from '@geist-ui/react'; //
const Footer: React.FC = () => {
  const { theme } = useTheme();
  const [showAbout, setShowAbout] = useState(false);
  const [showContact, setShowContact] = useState(false);
  const [showPrivacy, setShowPrivacy] = useState(false);

  function getThemeClasses() {
    return theme === 'dark' ? 'bg-gray-800 text-white' : 'bg-white text-gray-900';
  }

  return (
    <footer className={`w-full py-3 ${getThemeClasses()}`}>
      <div className="container mx-auto px-4">
        <div className="flex justify-between items-center text-sm">
          <p>&copy; 2024 QuantumLabs</p>
          <div>
            <button onClick={() => setShowAbout(true)} className={`mx-2 hover:underline ${theme === 'dark' ? 'text-blue-400' : 'text-blue-600'}`}>About</button>
            <button onClick={() => setShowContact(true)} className={`mx-2 hover:underline ${theme === 'dark' ? 'text-blue-400' : 'text-blue-600'}`}>Contact</button>
            <button onClick={() => setShowPrivacy(true)} className={`mx-2 hover:underline ${theme === 'dark' ? 'text-blue-400' : 'text-blue-600'}`}>Privacy</button>
          </div>
        </div>
      </div>

      {/* About Modal */}
      <Modal visible={showAbout} onClose={() => setShowAbout(false)}>
        <Modal.Title>About Us</Modal.Title>
        <Modal.Content>
          <p>QuantumLabs is a cutting-edge technology company specializing in task management solutions. Our mission is to empower individuals and teams to achieve their full potential through innovative productivity tools.</p>
        </Modal.Content>
        <Modal  onClick={() => setShowAbout(false)}>Close</Modal>
      </Modal>

      <Modal visible={showContact} onClose={() => setShowContact(false)} title="Contact Us">
        <p>We're here to help! Reach out to us through any of the following channels:</p>
        <p className="mt-2">Email: contact@quantumlabs.com</p>
        <p>Phone: +1 (555) 123-4567</p>
        <p>Address: 123 Tech Street, Innovation City, QU 12345</p>
      </Modal>

      <Modal visible={showPrivacy} onClose={() => setShowPrivacy(false)} title="Privacy Policy">
        <p>At QuantumLabs, we take your privacy seriously. This policy outlines how we collect, use, and protect your personal information.</p>
        <p className="mt-2">We collect only essential data to provide our services and improve your experience. Your data is never sold or shared with third parties without your explicit consent.</p>
        <p className="mt-2">For more details, please visit our full privacy policy page.</p>
      </Modal>
    </footer>
  );
};

export default Footer;

================
File: components/forgot-password-form.tsx
================
'use client';

import { useState } from "react";
import { SubmitButton } from "@/components/forms/submit-button";
import { Label } from "@/components/forms/label";
import { Input } from "@/components/forms/input";
import { FormMessage } from "@/components/forms/form-message";
import { toast } from "react-hot-toast";
import { supabase } from "@/utils/supabase/client";
import { useForm, SubmitHandler } from "react-hook-form";

interface ForgotPasswordForm {
  email: string;
}

export default function ForgotPasswordForm() {
  const { register, handleSubmit, formState } = useForm<ForgotPasswordForm>({ defaultValues: { email: '' } });
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState("");

  const forgotPassword: SubmitHandler<ForgotPasswordForm> = async (data) => {
    setIsLoading(true);
    setMessage("");

    const { email } = data;

    const { error } = await supabase.auth.resetPasswordForEmail(email);
    if (error) {
      setMessage(error.message);
      toast.error(error.message);
    } else {
      setMessage("Check your email for the password reset link.");
      toast.success("Check your email for the password reset link.");
    }

    setIsLoading(false);
  };

  return (
    <form className="mt-8 space-y-6" onSubmit={handleSubmit(forgotPassword)}>
      <div className="rounded-md shadow-sm -space-y-px">
        <div>
          <Label htmlFor="email" className="sr-only">
            Email address
          </Label>
          <Input
            id="email"
            type="email"
            required
            placeholder="Email address"
            {...register("email", { required: "Email is required" })}
            className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
          {formState.errors.email && <FormMessage message={formState.errors.email.message ?? ""} />}
        </div>
      </div>
      <div>
        <SubmitButton isLoading={isLoading}>Send Reset Link</SubmitButton>
      </div>
      {message && <FormMessage message={message} />}
    </form>
  );
}

================
File: components/handle-login.tsx
================
'use client';

import { useState } from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { useRouter } from 'next/navigation';

export default function HandleLogin() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const router = useRouter();
  const supabase = createClientComponentClient();

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const { error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
      if (error) throw error;
      router.refresh();
    } catch (error) {
      console.error('Error logging in:', error);
      alert('Error logging in. Please try again.');
    }
  };

  return (
    <form onSubmit={handleLogin}>
      <input
        type="email"
        placeholder="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        required
      />
      <input
        type="password"
        placeholder="Password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        required
      />
      <button type="submit">Log in</button>
    </form>
  );
}

================
File: components/InputWrapper.tsx
================
'use client';

import React from 'react';
import { Input } from './ui/input'; // Adjust the import path to be outside of the app directory

interface InputWrapperProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label: string;
}

const InputWrapper: React.FC<InputWrapperProps> = ({ label, ...props }) => {
  return (
    <div className="input-wrapper">
      <label className="block text-sm font-medium text-gray-700">{label}</label>
      <Input {...props} />
    </div>
  );
};

export default InputWrapper;

================
File: components/invite-user-modal.tsx
================
import React, { useState } from 'react';

interface InviteUserModalProps {
  isOpen: boolean;
  onClose: () => void;
  onInvite: (email: string) => void;
}

const InviteUserModal: React.FC<InviteUserModalProps> = ({ isOpen, onClose, onInvite }) => {
  const [email, setEmail] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onInvite(email);
    setEmail('');
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
      <div className="bg-white p-6 rounded-lg">
        <h2 className="text-xl font-bold mb-4">Invite User</h2>
        <form onSubmit={handleSubmit}>
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            placeholder="Enter email address"
            className="w-full p-2 border rounded mb-4"
            required
          />
          <div className="flex justify-end">
            <button
              type="button"
              onClick={onClose}
              className="mr-2 px-4 py-2 text-gray-600 hover:text-gray-800"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            >
              Invite
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default InviteUserModal;

================
File: components/Layout.tsx
================
import React from 'react';
import Nav from './Nav';
import RobotTransformerWallpaper from '@/components/RobotTransformerWallpaper'; // Ensure this path is correct

const Layout: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  return (
    <div className="layout">
      <RobotTransformerWallpaper /> {/* Add the wallpaper component */}
      <Nav />
      <main className="main-content">
        {children}
      </main>
      <footer className="footer">
        <p>© 2023 Your Company</p>
      </footer>
    </div>
  );
};

export default Layout;

================
File: components/login.tsx
================
'use client';

import React, { useState } from 'react';
import SharedLayout from './SharedLayout';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleLogin = async () => {
    // Implement login logic here
  };

  return (
    <div>
      <h2>Login</h2>
      <input
        type="email"
        placeholder="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
      />
      <input
        type="password"
        placeholder="Password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />
      <button onClick={handleLogin}>Login</button>
    </div>
  );
};

export default Login;

================
File: components/MarketCapGraph.tsx
================
'use client';

import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { PieChart, Pie, Cell, ResponsiveContainer } from 'recharts';

interface CryptoData {
    id: string;
    name: string;
    market_cap: number;
    price_change_percentage_24h: number;
}

const quotes = [
    "Success is not the key to happiness. Happiness is the key to success.",
    "The only way to do great work is to love what you do.",
    "Don't watch the clock; do what it does. Keep going.",
    "Success usually comes to those who are too busy to be looking for it.",
    "Opportunities don't happen. You create them.",
];

const MarketCapGraph: React.FC = () => {
    const [cryptoData, setCryptoData] = useState<CryptoData[]>([]);
    const [loading, setLoading] = useState(true);
    const [randomQuote, setRandomQuote] = useState('');

    const fetchCryptoData = async () => {
        try {
            const response = await axios.get('https://api.coingecko.com/api/v3/coins/markets', {
                params: {
                    vs_currency: 'usd',
                    order: 'market_cap_desc',
                    per_page: 50,
                    page: 1,
                    sparkline: false,
                },
            });
            setCryptoData(response.data);
            setLoading(false);
        } catch (error) {
            console.error('Error fetching crypto data:', error);
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchCryptoData();
        const interval = setInterval(fetchCryptoData, 60000); // Refresh every minute
        return () => clearInterval(interval);
    }, []);

    useEffect(() => {
        // Set a random quote on component mount
        const quote = quotes[Math.floor(Math.random() * quotes.length)];
        setRandomQuote(quote);
    }, []);

    if (loading) {
        return <div>Loading...</div>; // You can replace this with a spinner component
    }

    // Calculate top 25% market cap
    const top25Percent = Math.ceil(cryptoData.length * 0.25);
    const topCryptos = cryptoData.slice(0, top25Percent);

    const pieData = topCryptos.map(crypto => ({
        name: crypto.name,
        value: crypto.market_cap,
    }));

    return (
        <div className="mt-6">
            <h2 className="text-2xl font-bold mb-4">Market Cap Distribution (Top 25%)</h2>
            <ResponsiveContainer width="100%" height={400}>
                <PieChart>
                    <Pie
                        data={pieData}
                        cx="50%"
                        cy="50%"
                        labelLine={false}
                        outerRadius={80}
                        fill="#8884d8"
                        dataKey="value"
                    >
                        {pieData.map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={['#10B981', '#3B82F6', '#EF4444', '#FBBF24', '#A78BFA'][index % 5]} />
                        ))}
                    </Pie>
                </PieChart>
            </ResponsiveContainer>

            <div className="mt-4 text-center">
                <h3 className="text-xl font-semibold">Quote of the Moment:</h3>
                <p className="italic">{randomQuote}</p>
            </div>
        </div>
    );
};

export default MarketCapGraph;

================
File: components/MenuDropdown.tsx
================
"use client"

import { useState } from 'react';
import Dropdown from '@/components/Dropdown';

const MenuDropdown = () => {
    const dropdownItems = [
        { label: 'Dashboard', href: '/dashboard' },
        { label: 'Profile', href: '/profile' },
        { label: 'Settings', href: '/settings' },
    ];

    const handleItemClick = (href: string) => {
        window.location.href = href;
    };

    const items = dropdownItems.map(item => ({
        label: item.label,
        onClick: () => handleItemClick(item.href)
    }));

    return (
        <Dropdown label="Menu" items={items} />
    );
};

export { MenuDropdown };

================
File: components/MenuPopover.tsx
================
"use client"

import React from 'react';
import Dropdown from '@/components/Dropdown';

const MenuPopover = () => {
    const dropdownItems = [
        { label: 'Dashboard', onClick: () => window.location.href = '/dashboard' },
        { label: 'Profile', onClick: () => window.location.href = '/profile' },
        { label: 'Settings', onClick: () => window.location.href = '/settings' },
    ];

    return (
        <Dropdown label="Menu" items={dropdownItems} />
    );
};

export default MenuPopover;

================
File: components/moncaco-editor.tsx
================
'use client';

import React, { useState } from 'react';
import Editor from "@monaco-editor/react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useTheme } from '../app/contexts/ThemeContext';

interface MonacoEditorProps {
  initialValue?: string;
  language?: string;
  onSave?: (value: string) => void;
}

export function MoncacoEditor({
  initialValue = "// Type your code here",
  language = "javascript",
  onSave
}: MonacoEditorProps) {
  const [editorValue, setEditorValue] = useState(initialValue);
  const [editorLanguage, setEditorLanguage] = useState(language);
  const { theme } = useTheme();   
  const handleEditorChange = (value: string | undefined) => {
    if (value !== undefined) {
      setEditorValue(value);
    }
  };

  const handleSave = () => {
    if (onSave) {
      onSave(editorValue);
    }
  };

  return (
    <Card className={`w-full max-w-4xl mx-auto ${theme === 'dark' ? 'bg-gray-800 text-white' : 'bg-white text-gray-900'} border border-gray-700 shadow-lg`}>
      <CardHeader className="pb-2">
        <CardTitle className="text-2xl font-bold mb-4">Code Editor</CardTitle>
        <div className="flex justify-between items-center mb-4">
          <Select value={editorLanguage} onValueChange={setEditorLanguage}>
            <SelectTrigger className={`w-[180px] ${theme === 'dark' ? 'bg-gray-700 text-white border-gray-600' : 'bg-gray-100 text-gray-900 border-gray-300'}`}>
              <SelectValue placeholder="Select language" />
            </SelectTrigger>
            <SelectContent className={theme === 'dark' ? 'bg-gray-700 text-white border-gray-600' : 'bg-white text-gray-900 border-gray-300'}>
              <SelectItem value="javascript">JavaScript</SelectItem>
              <SelectItem value="typescript">TypeScript</SelectItem>
              <SelectItem value="python">Python</SelectItem>
              <SelectItem value="html">HTML</SelectItem>
              <SelectItem value="css">CSS</SelectItem>
            </SelectContent>
          </Select>
          <Button onClick={handleSave} className={`ml-2 ${theme === 'dark' ? 'bg-blue-600 hover:bg-blue-700' : 'bg-blue-500 hover:bg-blue-600'} text-white`}>Save</Button>
        </div>
      </CardHeader>
      <CardContent className="p-0">
        <div className={`border rounded-lg overflow-hidden ${theme === 'dark' ? 'bg-gray-800' : 'bg-white'}`}>
          <Editor
            height="500px"
            language={editorLanguage}
            theme={theme === 'dark' ? "vs-dark" : "light"}
            value={editorValue}
            onChange={handleEditorChange}
            options={{
              minimap: { enabled: false },
              fontSize: 14,
              wordWrap: 'on',
              automaticLayout: true,
            }}
          />
        </div>
      </CardContent>
    </Card>
  );
}

================
File: components/Nav.tsx
================
import { Link } from 'lucide-react';
import React from 'react';

const Nav: React.FC = () => {
  return (
    <nav>
      <ul>
        <li>
          <Link href="/dashboard">Dashboard</Link>
        </li>
        <li>
          <Link href="/profile">Profile</Link>
        </li>
        <li>
          <Link href="/taskboard">Taskboard</Link>
        </li>
        <li>
          <Link href="/other-page">Other Page</Link>
        </li>
      </ul>
    </nav>
  );
};

export default Nav;

================
File: components/NavBar.tsx
================
"use client"

import React from 'react';
import Link from 'next/link'; // Import Link from Next.js
import { Home, Users, BarChart2, ClipboardList } from 'lucide-react';

const NavBar = () => {
    return (
        <nav className="relative">
            <ul className="flex space-x-4">
                <li>
                    <Link href="/" className="text-gray-700 hover:text-gray-900 flex items-center">
                        <Home className="h-5 w-5 mr-1" />
                        Home
                    </Link>
                </li>
                <li>
                    <Link href="/dashboard" className="text-gray-700 hover:text-gray-900 flex items-center">
                        <ClipboardList className="h-5 w-5 mr-1" />
                        Dashboard
                    </Link>
                </li>
                <li>
                    <Link href="/task-agent-analytics" className="text-gray-700 hover:text-gray-900 flex items-center">
                        <BarChart2 className="h-5 w-5 mr-1" />
                        Task Agent Analytics
                    </Link>
                </li>
            </ul>
        </nav>
    );
};

export default NavBar;

================
File: components/navigation-bar.tsx
================
import Link from 'next/link'
import { Button } from "@/components/ui/button"

export function NavigationBar() {
  return (
    <header className="bg-white shadow-sm fixed top-0 left-0 right-0 z-10">
      <div className="container mx-auto py-4 px-4">
        <div className="flex justify-between items-center">
          <Link href="/" className="text-2xl font-bold text-primary">TaskMaster</Link>
          <nav className="space-x-4">
            <Link href="/dashboard" className="text-sm hover:underline">Dashboard</Link>
            <Link href="/search" className="text-sm hover:underline">Search</Link>
            <Link href="/progress" className="text-sm hover:underline">Progress</Link>
            <Link href="/projects" className="text-sm hover:underline">Projects</Link>
            <Link href="/teams" className="text-sm hover:underline">Teams</Link>
            <Link href="/members" className="text-sm hover:underline">Members</Link>
            <Link href="/profile" className="text-sm hover:underline">Profile</Link>
            <Link href="/settings" className="text-sm hover:underline">Settings</Link>
            <Link href="/support" className="text-sm hover:underline">Support</Link>
            <Link href="/login" className="text-sm hover:underline">Log in</Link>
            <Button asChild variant="outline">
              <Link href="/signup">Sign up</Link>
            </Button>
          </nav>
        </div>
      </div>
    </header>
  )
}

================
File: components/Navigation.tsx
================


================
File: components/next-logo.tsx
================
export default function NextLogo() {
  return (
    <svg
      aria-label="Next.js logotype"
      height="68"
      role="img"
      viewBox="0 0 394 79"
      width="100"
    >
      <path
        d="M261.919 0.0330722H330.547V12.7H303.323V79.339H289.71V12.7H261.919V0.0330722Z"
        fill="currentColor"
      />
      <path
        d="M149.052 0.0330722V12.7H94.0421V33.0772H138.281V45.7441H94.0421V66.6721H149.052V79.339H80.43V12.7H80.4243V0.0330722H149.052Z"
        fill="currentColor"
      />
      <path
        d="M183.32 0.0661486H165.506L229.312 79.3721H247.178L215.271 39.7464L247.127 0.126654L229.312 0.154184L206.352 28.6697L183.32 0.0661486Z"
        fill="currentColor"
      />
      <path
        d="M201.6 56.7148L192.679 45.6229L165.455 79.4326H183.32L201.6 56.7148Z"
        fill="currentColor"
      />
      <path
        clipRule="evenodd"
        d="M80.907 79.339L17.0151 0H0V79.3059H13.6121V16.9516L63.8067 79.339H80.907Z"
        fill="currentColor"
        fillRule="evenodd"
      />
      <path
        d="M333.607 78.8546C332.61 78.8546 331.762 78.5093 331.052 77.8186C330.342 77.1279 329.991 76.2917 330 75.3011C329.991 74.3377 330.342 73.5106 331.052 72.8199C331.762 72.1292 332.61 71.7838 333.607 71.7838C334.566 71.7838 335.405 72.1292 336.115 72.8199C336.835 73.5106 337.194 74.3377 337.204 75.3011C337.194 75.9554 337.028 76.5552 336.696 77.0914C336.355 77.6368 335.922 78.064 335.377 78.373C334.842 78.6911 334.252 78.8546 333.607 78.8546Z"
        fill="currentColor"
      />
      <path
        d="M356.84 45.4453H362.872V68.6846C362.863 70.8204 362.401 72.6472 361.498 74.1832C360.585 75.7191 359.321 76.8914 357.698 77.7185C356.084 78.5364 354.193 78.9546 352.044 78.9546C350.079 78.9546 348.318 78.6001 346.75 77.9094C345.182 77.2187 343.937 76.1826 343.024 74.8193C342.101 73.456 341.649 71.7565 341.649 69.7207H347.691C347.7 70.6114 347.903 71.3838 348.29 72.0291C348.677 72.6744 349.212 73.1651 349.895 73.5105C350.586 73.8559 351.38 74.0286 352.274 74.0286C353.243 74.0286 354.073 73.8286 354.746 73.4196C355.419 73.0197 355.936 72.4199 356.296 71.6201C356.646 70.8295 356.831 69.8479 356.84 68.6846V45.4453Z"
        fill="currentColor"
      />
      <path
        d="M387.691 54.5338C387.544 53.1251 386.898 52.0254 385.773 51.2438C384.638 50.4531 383.172 50.0623 381.373 50.0623C380.11 50.0623 379.022 50.2532 378.118 50.6258C377.214 51.0075 376.513 51.5164 376.033 52.1617C375.554 52.807 375.314 53.5432 375.295 54.3703C375.295 55.061 375.461 55.6608 375.784 56.1607C376.107 56.6696 376.54 57.0968 377.103 57.4422C377.656 57.7966 378.274 58.0874 378.948 58.3237C379.63 58.56 380.313 58.76 380.995 58.9236L384.14 59.6961C385.404 59.9869 386.631 60.3778 387.802 60.8776C388.973 61.3684 390.034 61.9955 390.965 62.7498C391.897 63.5042 392.635 64.413 393.179 65.4764C393.723 66.5397 394 67.7848 394 69.2208C394 71.1566 393.502 72.8562 392.496 74.3285C391.491 75.7917 390.043 76.9369 388.143 77.764C386.252 78.582 383.965 79 381.272 79C378.671 79 376.402 78.6002 374.493 77.8004C372.575 77.0097 371.08 75.8463 370.001 74.3194C368.922 72.7926 368.341 70.9294 368.258 68.7391H374.235C374.318 69.8842 374.687 70.8386 375.314 71.6111C375.95 72.3745 376.78 72.938 377.795 73.3197C378.819 73.6923 379.962 73.8832 381.226 73.8832C382.545 73.8832 383.707 73.6832 384.712 73.2924C385.708 72.9016 386.492 72.3564 387.055 71.6475C387.627 70.9476 387.913 70.1206 387.922 69.1754C387.913 68.312 387.654 67.5939 387.156 67.0304C386.649 66.467 385.948 65.9944 385.053 65.6127C384.15 65.231 383.098 64.8856 381.899 64.5857L378.081 63.6223C375.323 62.9225 373.137 61.8592 371.541 60.4323C369.937 59.0054 369.143 57.115 369.143 54.7429C369.143 52.798 369.678 51.0894 370.758 49.6261C371.827 48.1629 373.294 47.0268 375.148 46.2179C377.011 45.4 379.114 45 381.456 45C383.836 45 385.92 45.4 387.719 46.2179C389.517 47.0268 390.929 48.1538 391.952 49.5897C392.976 51.0257 393.511 52.6707 393.539 54.5338H387.691Z"
        fill="currentColor"
      />
    </svg>
  );
}

================
File: components/Notification.tsx
================
'use client';

import React from 'react';
import { AlertTriangle, CheckCircle, Info } from 'lucide-react';

const Notification: React.FC<{ message: string; type: 'success' | 'warning' | 'info' }> = ({ message, type }) => {
    return (
        <div className={`flex items-center p-4 mb-2 rounded ${type === 'success' ? 'bg-green-100' : type === 'warning' ? 'bg-yellow-100' : 'bg-blue-100'}`}>
            {type === 'success' && <CheckCircle className="h-5 w-5 text-green-600 mr-2" />}
            {type === 'warning' && <AlertTriangle className="h-5 w-5 text-yellow-600 mr-2" />}
            {type === 'info' && <Info className="h-5 w-5 text-blue-600 mr-2" />}
            <span>{message}</span>
        </div>
    );
};

export default Notification;

================
File: components/ProgressBar.tsx
================


================
File: components/project-board.tsx
================
import React from 'react';

const ProjectBoard: React.FC = () => {
    return <div>Project Board</div>;
};

export default ProjectBoard;

================
File: components/quick-search.tsx
================


================
File: components/RobotTransformerWallpaper.tsx
================
'use client';

import React from 'react';
import { motion } from 'framer-motion';

const RobotTransformerWallpaper: React.FC = () => {
  return (
    <div className="fixed inset-0 z-[-1] overflow-hidden bg-gray-900">
      <div className="absolute inset-0 bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-gray-800 via-gray-900 to-black opacity-70" />
      <svg className="absolute inset-0 w-full h-full" xmlns="http://www.w3.org/2000/svg">
        <filter id="glow">
          <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
          <feMerge>
            <feMergeNode in="coloredBlur"/>
            <feMergeNode in="SourceGraphic"/>
          </feMerge>
        </filter>
        <g filter="url(#glow)">
          {/* Add glowing circles for a more visible effect */}
          {Array.from({ length: 15 }).map((_, index) => (
            <motion.circle
              key={index}
              cx={`${Math.random() * 100}%`}
              cy={`${Math.random() * 100}%`}
              r={Math.random() * 3 + 1}
              fill="#4facfe"
              initial={{ opacity: 0.2 }}
              animate={{ opacity: [0.2, 0.6, 0.2] }}
              transition={{
                duration: Math.random() * 10 + 5,
                repeat: Infinity,
                ease: "easeInOut",
              }}
            />
          ))}
        </g>
      </svg>
      <div
        className="absolute inset-0 opacity-10"
        style={{
          backgroundImage: `
            linear-gradient(to right, #2a2a2a 1px, transparent 1px),
            linear-gradient(to bottom, #2a2a2a 1px, transparent 1px)
          `,
          backgroundSize: '20px 20px',
        }}
      />
    </div>
  );
};

export default RobotTransformerWallpaper;

================
File: components/RobotTransformerWallpaperDemo.tsx
================
'use client';

import React from 'react';
import RobotTransformerWallpaper from './RobotTransformerWallpaper';
import { motion } from 'framer-motion';

export default function RobotTransformerWallpaperDemo() {
  return (
    <div className="relative w-full h-screen overflow-hidden">
      <RobotTransformerWallpaper />
      <div className="relative z-10 flex items-center justify-center h-full">
        <motion.div
          className="p-8 bg-gray-900/30 backdrop-blur-xl rounded-lg shadow-lg border border-blue-500/20"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <div className="w-16 h-16 bg-gradient-to-br from-blue-400 to-cyan-300 rounded mb-4 animate-pulse shadow-lg" />
          <div className="h-4 w-32 bg-gradient-to-r from-blue-400 to-cyan-300 rounded mb-2 shadow-md" />
          <div className="h-4 w-48 bg-gradient-to-r from-blue-400 to-cyan-300 rounded shadow-md" />
        </motion.div>
      </div>
    </div>
  );
}

================
File: components/SearchComponent.tsx
================
'use client';

import React, { useState, useRef, useEffect } from 'react';
import { Input } from "@/components/ui/input";
import { Search } from 'lucide-react';

const SearchComponent: React.FC = () => {
  const [isSearchOpen, setIsSearchOpen] = useState(false);
  const [lastTap, setLastTap] = useState(0);
  const searchRef = useRef<HTMLDivElement>(null);

  const handleDoubleTap = () => {
    const now = Date.now();
    if (now - lastTap < 300) {
      setIsSearchOpen(true);
    }
    setLastTap(now);
  };

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {
        setIsSearchOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  return (
    <div ref={searchRef} onTouchStart={handleDoubleTap}>
      {isSearchOpen ? (
        <div className="relative w-64">
          <Search className="absolute left-2 top-1/2 transform -translate-y-1/2 text-gray-400" />
          <Input type="text" placeholder="Search..." className="pl-8" />
        </div>
      ) : (
        <Search className="h-6 w-6 cursor-pointer" onClick={() => setIsSearchOpen(true)} />
      )}
    </div>
  );
};

export default SearchComponent;

================
File: components/session.ts
================
export const handleLogin = async (/* parameters */) => {
    // ... implementation ...
};

================
File: components/settings-form.tsx
================
import React from 'react';

export function SettingsForm() {
  return (
    <div>
      <p>Settings Form Placeholder</p>
    </div>
  );
}

================
File: components/SharedLayout.tsx
================
'use client';

import React from 'react';
import RobotTransformerWallpaper from './RobotTransformerWallpaper';

interface SharedLayoutProps {
  children: React.ReactNode;
}

const SharedLayout: React.FC<SharedLayoutProps> = ({ children }) => {
  return (
    <div className="relative min-h-screen">
      <RobotTransformerWallpaper />
      <div className="relative z-10 container mx-auto p-6 text-white">
        {children}
      </div>
    </div>
  );
};

export default SharedLayout;

================
File: components/SideMenu.tsx
================
'use client';

import { useState } from 'react';
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import { Button } from "@/components/ui/button";
import { Menu, Settings, HelpCircle, LogOut } from 'lucide-react';
import Link from 'next/link';

export default function SideMenu() {
  const [open, setOpen] = useState(false);

  return (
    <Sheet open={open} onOpenChange={setOpen}>
      <SheetTrigger asChild>
        <Button variant="ghost" size="icon" className="fixed top-4 left-4 z-50">
          <Menu className="h-6 w-6" />
        </Button>
      </SheetTrigger>
      <SheetContent side="left" className="w-[300px]">
        <nav className="flex flex-col h-full">
          <h2 className="text-lg font-semibold mb-4">Task-Flow</h2>
          <div className="space-y-4 flex-grow">
            <Link href="/settings" className="flex items-center space-x-2 text-muted-foreground hover:text-foreground" onClick={() => setOpen(false)}>
              <Settings className="h-5 w-5" />
              <span>Settings</span>
            </Link>
            <Link href="/help" className="flex items-center space-x-2 text-muted-foreground hover:text-foreground" onClick={() => setOpen(false)}>
              <HelpCircle className="h-5 w-5" />
              <span>Help & Support</span>
            </Link>
          </div>
          <Button variant="ghost" className="justify-start px-2">
            <LogOut className="h-5 w-5 mr-2" />
            Logout
          </Button>
        </nav>
      </SheetContent>
    </Sheet>
  );
}

================
File: components/sign-out-button.tsx
================
'use client'

import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { useRouter } from 'next/navigation'
import { signOut } from '@/utils/auth'

export default function SignOutButton() {
  const router = useRouter()
  const supabase = createClientComponentClient()

  const handleSignOut = async () => {
    await signOut()
    await supabase.auth.signOut()
    router.push('/login')
  }

  return (
    <button
      onClick={handleSignOut}
      className="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded transition"
    >
      Sign Out
    </button>
  )
}

================
File: components/sign-up.tsx
================
'use client';

import React, { useState } from 'react';

const SignUp = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleSignUp = async () => {
    // Implement sign-up logic here
  };

  return (
    <div>
      <h2>Sign Up</h2>
      <input
        type="email"
        placeholder="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
      />
      <input
        type="password"
        placeholder="Password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />
      <button onClick={handleSignUp}>Sign Up</button>
    </div>
  );
};

export default SignUp;

================
File: components/Spinner.tsx
================
'use client';

import React from 'react';

const Spinner: React.FC = () => {
    return (
        <div className="flex items-center justify-center h-full">
            <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-blue-500"></div>
        </div>
    );
};

export default Spinner;

================
File: components/supabase-logo.tsx
================
export default function SupabaseLogo() {
  return (
    <svg
      aria-label="Supabase logo"
      width="140"
      height="30"
      viewBox="0 0 115 23"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <g clipPath="url(#clip0_4671_51136)">
        <g clipPath="url(#clip1_4671_51136)">
          <path
            d="M13.4028 21.8652C12.8424 22.5629 11.7063 22.1806 11.6928 21.2898L11.4954 8.25948H20.3564C21.9614 8.25948 22.8565 10.0924 21.8585 11.3353L13.4028 21.8652Z"
            fill="url(#paint0_linear_4671_51136)"
          />
          <path
            d="M13.4028 21.8652C12.8424 22.5629 11.7063 22.1806 11.6928 21.2898L11.4954 8.25948H20.3564C21.9614 8.25948 22.8565 10.0924 21.8585 11.3353L13.4028 21.8652Z"
            fill="url(#paint1_linear_4671_51136)"
            fillOpacity="0.2"
          />
          <path
            d="M9.79895 0.89838C10.3593 0.200591 11.4954 0.582929 11.5089 1.47383L11.5955 14.5041H2.84528C1.24026 14.5041 0.345103 12.6711 1.34316 11.4283L9.79895 0.89838Z"
            fill="#3ECF8E"
          />
        </g>
        <path
          d="M30.5894 13.3913C30.7068 14.4766 31.7052 16.3371 34.6026 16.3371C37.1279 16.3371 38.3418 14.7479 38.3418 13.1976C38.3418 11.8022 37.3824 10.6588 35.4836 10.2712L34.1131 9.98049C33.5846 9.88359 33.2323 9.5929 33.2323 9.12777C33.2323 8.58512 33.7804 8.17818 34.4656 8.17818C35.5618 8.17818 35.9729 8.89521 36.0513 9.45725L38.2243 8.97275C38.1069 7.94561 37.1867 6.22083 34.446 6.22083C32.3709 6.22083 30.844 7.63555 30.844 9.34094C30.844 10.6781 31.6856 11.7828 33.5454 12.1898L34.8179 12.4805C35.5618 12.6355 35.8555 12.9844 35.8555 13.4107C35.8555 13.9146 35.4444 14.3603 34.583 14.3603C33.4476 14.3603 32.8797 13.6626 32.8212 12.9068L30.5894 13.3913Z"
          fill="currentColor"
        />
        <path
          d="M46.6623 16.0464H49.1486C49.1094 15.717 49.0506 15.0581 49.0506 14.3216V6.51154H46.4468V12.0542C46.4468 13.1588 45.7813 13.934 44.6263 13.934C43.4126 13.934 42.8643 13.0813 42.8643 12.0154V6.51154H40.2606V12.5387C40.2606 14.6123 41.5918 16.2984 43.9215 16.2984C44.9393 16.2984 46.0556 15.9108 46.5841 15.0193C46.5841 15.4069 46.6231 15.8526 46.6623 16.0464Z"
          fill="currentColor"
        />
        <path
          d="M54.433 19.7286V15.1162C54.9027 15.7558 55.8817 16.279 57.213 16.279C59.9341 16.279 61.7545 14.1472 61.7545 11.2596C61.7545 8.43021 60.1298 6.29842 57.3108 6.29842C55.8623 6.29842 54.7855 6.93792 54.3548 7.67439V6.51159H51.8295V19.7286H54.433ZM59.19 11.279C59.19 12.9845 58.133 13.9728 56.8017 13.9728C55.4708 13.9728 54.394 12.9651 54.394 11.279C54.394 9.59299 55.4708 8.6046 56.8017 8.6046C58.133 8.6046 59.19 9.59299 59.19 11.279Z"
          fill="currentColor"
        />
        <path
          d="M63.229 13.4495C63.229 14.9417 64.4818 16.3177 66.5375 16.3177C67.9662 16.3177 68.8865 15.6588 69.3758 14.9029C69.3758 15.2712 69.4149 15.7944 69.4737 16.0464H71.862C71.8033 15.7169 71.7449 15.0386 71.7449 14.5348V9.84482C71.7449 7.92622 70.6093 6.22083 67.5555 6.22083C64.9713 6.22083 63.5811 7.86807 63.4248 9.36033L65.7347 9.84482C65.8131 9.0115 66.4395 8.29445 67.5747 8.29445C68.6713 8.29445 69.1998 8.85646 69.1998 9.53475C69.1998 9.86421 69.0238 10.1355 68.4755 10.2131L66.1068 10.5619C64.5015 10.7945 63.229 11.744 63.229 13.4495ZM67.0854 14.3991C66.2438 14.3991 65.8325 13.8565 65.8325 13.2945C65.8325 12.558 66.361 12.1898 67.0268 12.0929L69.1998 11.7634V12.1898C69.1998 13.8759 68.1818 14.3991 67.0854 14.3991Z"
          fill="currentColor"
        />
        <path
          d="M76.895 16.0465V14.8837C77.4038 15.6976 78.4217 16.279 79.7531 16.279C82.4941 16.279 84.2951 14.1278 84.2951 11.2403C84.2951 8.4108 82.6701 6.25965 79.851 6.25965C78.4217 6.25965 77.3648 6.8798 76.934 7.55806V2.01546H74.3696V16.0465H76.895ZM81.6911 11.2596C81.6911 13.0038 80.6341 13.9728 79.3028 13.9728C77.9912 13.9728 76.895 12.9845 76.895 11.2596C76.895 9.51543 77.9912 8.56584 79.3028 8.56584C80.6341 8.56584 81.6911 9.51543 81.6911 11.2596Z"
          fill="currentColor"
        />
        <path
          d="M85.7692 13.4495C85.7692 14.9417 87.022 16.3177 89.0776 16.3177C90.5065 16.3177 91.4269 15.6588 91.916 14.9029C91.916 15.2712 91.9554 15.7944 92.014 16.0464H94.4023C94.3439 15.7169 94.2851 15.0386 94.2851 14.5348V9.84482C94.2851 7.92622 93.1495 6.22083 90.0955 6.22083C87.5115 6.22083 86.1216 7.86807 85.965 9.36033L88.2747 9.84482C88.3533 9.0115 88.9798 8.29445 90.1149 8.29445C91.2115 8.29445 91.74 8.85646 91.74 9.53475C91.74 9.86421 91.5638 10.1355 91.0156 10.2131L88.647 10.5619C87.0418 10.7945 85.7692 11.744 85.7692 13.4495ZM89.6258 14.3991C88.784 14.3991 88.3727 13.8565 88.3727 13.2945C88.3727 12.558 88.9012 12.1898 89.5671 12.0929L91.74 11.7634V12.1898C91.74 13.8759 90.722 14.3991 89.6258 14.3991Z"
          fill="currentColor"
        />
        <path
          d="M96.087 13.3913C96.2042 14.4766 97.2028 16.3371 100.1 16.3371C102.626 16.3371 103.839 14.7479 103.839 13.1976C103.839 11.8022 102.88 10.6588 100.981 10.2712L99.6105 9.98049C99.082 9.88359 98.7299 9.5929 98.7299 9.12777C98.7299 8.58512 99.2778 8.17818 99.963 8.17818C101.06 8.17818 101.471 8.89521 101.549 9.45725L103.722 8.97275C103.604 7.94561 102.684 6.22083 99.9436 6.22083C97.8683 6.22083 96.3416 7.63555 96.3416 9.34094C96.3416 10.6781 97.183 11.7828 99.043 12.1898L100.316 12.4805C101.06 12.6355 101.353 12.9844 101.353 13.4107C101.353 13.9146 100.942 14.3603 100.081 14.3603C98.9451 14.3603 98.3776 13.6626 98.3188 12.9068L96.087 13.3913Z"
          fill="currentColor"
        />
        <path
          d="M107.794 10.1937C107.852 9.32158 108.596 8.31381 109.947 8.31381C111.435 8.31381 112.062 9.24406 112.101 10.1937H107.794ZM112.355 12.6743C112.042 13.527 111.376 14.1278 110.163 14.1278C108.87 14.1278 107.794 13.2169 107.735 11.9573H114.626C114.626 11.9184 114.665 11.5309 114.665 11.1626C114.665 8.10064 112.884 6.22083 109.908 6.22083C107.441 6.22083 105.17 8.19753 105.17 11.2402C105.17 14.4572 107.5 16.3371 110.143 16.3371C112.512 16.3371 114.039 14.9611 114.528 13.3138L112.355 12.6743Z"
          fill="currentColor"
        />
      </g>
      <defs>
        <linearGradient
          id="paint0_linear_4671_51136"
          x1="11.4954"
          y1="11.1486"
          x2="19.3439"
          y2="14.4777"
          gradientUnits="userSpaceOnUse"
        >
          <stop stopColor="#249361" />
          <stop offset="1" stopColor="#3ECF8E" />
        </linearGradient>
        <linearGradient
          id="paint1_linear_4671_51136"
          x1="8.00382"
          y1="6.42177"
          x2="11.5325"
          y2="13.1398"
          gradientUnits="userSpaceOnUse"
        >
          <stop />
          <stop offset="1" stopOpacity="0" />
        </linearGradient>
        <clipPath id="clip0_4671_51136">
          <rect
            width="113.85"
            height="21.8943"
            fill="currentColor"
            transform="translate(0.922119 0.456161)"
          />
        </clipPath>
        <clipPath id="clip1_4671_51136">
          <rect
            width="21.3592"
            height="21.8943"
            fill="currentColor"
            transform="translate(0.919006 0.497101)"
          />
        </clipPath>
      </defs>
    </svg>
  );
}

================
File: components/support-form.tsx
================
import React from 'react';

export default function SupportForm() {
  return (
    <div>
      <p>Support Form Placeholder</p>
    </div>
  );
}

================
File: components/support-page-content.tsx
================


================
File: components/TabBar.tsx
================
'use client';

import React from 'react';
import { Bot, BarChart, Users, Plus } from 'lucide-react'; // Ensure all icons are imported correctly
import Link from 'next/link'; // Ensure you import Link from next/link
import { usePathname } from 'next/navigation';

const tabs = [
  { name: 'AI Agents', href: '/ai-agents', icon: Bot },
  { name: 'Members', href: '/members', icon: Users }, // Keep Members link
  { name: 'Analytics', href: '/analytics', icon: BarChart }, // Keep Analytics link
  { name: 'Task Manager', href: '/task-manager', icon: Plus }, // Keep Task Manager link
  // Removed broken links
];

export default function TabBar() {
  const pathname = usePathname();

  return (
    <nav className="fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700">
      <ul className="flex justify-around">
        {tabs.map((tab) => (
          <li key={tab.name}>
            <Link href={tab.href} className={`flex flex-col items-center p-2 ${pathname === tab.href ? 'text-primary' : 'text-muted-foreground'}`}>
              {React.createElement(tab.icon, { className: "h-6 w-6" })} {/* Use React.createElement for dynamic icons */}
              <span className="text-xs mt-1">{tab.name}</span>
            </Link>
          </li>
        ))}
      </ul>
    </nav>
  );
}

================
File: components/task-board.tsx
================
'use client';

import React from 'react';

const TaskBoard: React.FC = () => {
    return (
        <div className="p-4">
            <h2 className="text-xl font-bold">Task Board</h2>
            {/* Add your task board logic here */}
        </div>
    );
};

export default TaskBoard;

================
File: components/task-card.tsx
================
'use client';

import { Task } from '@/lib/task';
import React from 'react';

const TaskCard: React.FC<{ task: Task }> = ({ task }) => {
    return (
        <div>
            <h2>{task.title}</h2>
            <p>{task.description}</p>
            <p>Priority: {task.priority}</p>
            {task.dueDate && <p>Due Date: {task.dueDate}</p>}
            <div>
                {task.comments.map((comment, index) => (
                    <div key={index}>
                        <p>{comment.content}</p>
                        <p>{comment.author || 'Anonymous'   }</p>
                        <p>{comment.createdAt}</p>
                        
                    </div>
                ))}
            </div>
        </div>
    );
};

export default TaskCard;

================
File: components/task-detail-view.tsx
================
'use client';

import React from 'react';
import { Button } from "@/components/ui/button";
import {  TaskDetailViewProps } from '@/types';



//DO NOT CHANGE THE USE OF USEPARAMS can be used for the taskId
const TaskDetailView: React.FC<TaskDetailViewProps> = ({ task, isOpen, onClose, onUpdate, params }) => {
  const handleUpdate = () => {
    // Logic to update the task (this could involve opening a modal or similar)
    const updatedTask = { ...task, status: 'Completed' }; // Example update
    onUpdate(updatedTask);
  };
  const taskId = params.taskId;

  return (
    <div className={`modal ${isOpen ? 'block' : 'hidden'}`}>
      <div className="modal-content bg-gray-800 text-white p-4 rounded">
        <h2 className="text-xl font-bold">{task.title}</h2>
        <p>{task.description}</p>
        <p><strong>Objective:</strong> {task.objective}</p>
        <p><strong>Difficulty:</strong> {task.difficulty}</p>
        <p><strong>Estimated Time:</strong> {task.estimatedTime}</p>
        <div>
          <strong>Assigned Agents:</strong>
          <ul>
            {task.assignedAgents.map(agent => (
              <li key={agent.id}>
                {agent.name} - {agent.expertise}
              </li>
            ))}
          </ul>
        </div>
        <div className="flex justify-between mt-4">
          <Button onClick={handleUpdate} className="bg-blue-500">Update Task</Button>
          <Button onClick={onClose} className="bg-red-500">Close</Button>
        </div>
      </div>
    </div>
  );
};

export default TaskDetailView;

================
File: components/task.tsx
================
import React from 'react';

interface TaskProps {
    id: string;
}

const Task: React.FC<TaskProps> = ({ id }) => {
    return <div>Task ID: {id}</div>;
};

export default Task;

================
File: components/taskboard.tsx
================
import React, { useEffect, useState } from 'react';
import { Task } from '@/lib/task'; // Import the Task type
import { getTasks } from '@/utils/dataProvider'; // Update the import
import Mermaid from 'react-mermaid2'; // Import Mermaid component

const Taskboard: React.FC<{ initialTasks: Task[] }> = ({ initialTasks }) => {
  const [tasks, setTasks] = useState<Task[]>(initialTasks);

  useEffect(() => {
    const fetchTasks = async () => {
      const fetchedTasks = await getTasks();
      setTasks(fetchedTasks);
    };
    fetchTasks();
  }, []);

  return (
    <div>
      <h1>Taskboard</h1>
      {tasks.length === 0 ? (
        <p>No tasks available.</p>
      ) : (
        tasks.map(task => (
          <div key={task.id}>
            <h2>{task.title}</h2>
            <p>Status: {task.status}</p>
          </div>
        ))
      )}
      {/* Example Mermaid Diagram */}
      <Mermaid chart={`graph TD; A-->B; A-->C; B-->D; C-->D;`} />
    </div>
  );
};

export default Taskboard;

================
File: components/TaskCard.tsx
================
'use client';

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useDrag } from 'react-dnd';
import { Badge } from "@/components/ui/badge";
import { Calendar, MessageSquare } from 'lucide-react';
import { Task } from '@/lib/task';



const TaskCard: React.FC<{ task: Task; onEdit: (task: Task) => void }> = ({ task, onEdit }) => {
    const [{ isDragging }, drag] = useDrag({
        type: 'TASK',
        item: { id: task.id },
        collect: (monitor) => ({
            isDragging: !!monitor.isDragging(),
        }),
    });

    return (
        <div ref={drag} style={{ opacity: isDragging ? 0.5 : 1 }}>
            <Card className="mb-2 cursor-move" onClick={() => onEdit(task)}>
                <CardHeader className="p-3">
                    <CardTitle className="text-sm font-medium">{task.title}</CardTitle>
                </CardHeader>
                <CardContent className="p-3 pt-0">
                    <p className="text-xs text-gray-500 mb-2">{task.description}</p>
                    <div className="flex justify-between items-center">
                        <Badge variant={task.priority === 'high' ? 'destructive' : task.priority === 'medium' ? 'default' : 'secondary'}>
                            {task.priority}
                        </Badge>
                        <div className="flex items-center space-x-2">
                            {task.dueDate && (
                                <div className="flex items-center text-xs text-gray-500">
                                    <Calendar className="w-3 h-3 mr-1" />
                                    {task.dueDate}
                                </div>
                            )}
                            {task.comments.length > 0 && (




                                <div className="flex items-center text-xs text-gray-500">

                                    <MessageSquare className="w-3 h-3 mr-1" />
                                    //for each comment in task.comments, display the comment
                                    {task.comments.map((comment) => (
                                        <p>{comment.content}</p>
                                    ))}
                                </div>
                            )}
                        </div>
                    </div>
                </CardContent>
            </Card>
        </div>
    );
};

export default TaskCard;

================
File: components/TaskManager.tsx
================
'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { ChevronRight, ChevronDown, Plus, Trash2, Edit } from 'lucide-react';
import { Checkbox } from '@geist-ui/react';

interface Task {
  id: string;
  title: string;
  description: string;
  status: 'To Do' | 'In Progress' | 'Done';
  assignedAgent: string | null;
  subtasks: Task[];
}

interface AIAgent {
  id: string;
  name: string;
  avatar: string;
  specialty: string;
}

const initialTasks: Task[] = [
  {
    id: '1',
    title: 'Project Alpha',
    description: 'Develop a new product feature',
    status: 'In Progress',
    assignedAgent: '1',
    subtasks: []
  },
  {
    id: '2',
    title: 'Marketing Campaign',
    description: 'Plan and execute Q3 marketing campaign',
    status: 'To Do',
    assignedAgent: null,
    subtasks: []
  }
];

const aiAgents: AIAgent[] = [
  { id: '1', name: 'Project Manager AI', avatar: '/placeholder.svg?height=32&width=32', specialty: 'Project Management' },
  { id: '2', name: 'Design AI', avatar: '/placeholder.svg?height=32&width=32', specialty: 'UI/UX Design' },
  { id: '3', name: 'Backend AI', avatar: '/placeholder.svg?height=32&width=32', specialty: 'Backend Development' },
  { id: '4', name: 'Marketing AI', avatar: '/placeholder.svg?height=32&width=32', specialty: 'Digital Marketing' },
];

export default function TaskManager() {
  const [tasks, setTasks] = useState<Task[]>(initialTasks);
  const [expandedTasks, setExpandedTasks] = useState<Set<string>>(new Set());
  const [newTask, setNewTask] = useState<Omit<Task, 'id' | 'subtasks'>>({
    title: '',
    description: '',
    status: 'To Do',
    assignedAgent: null
  });

  const toggleExpand = (taskId: string) => {
    setExpandedTasks(prev => {
      const newSet = new Set(prev);
      if (newSet.has(taskId)) {
        newSet.delete(taskId);
      } else {
        newSet.add(taskId);
      }
      return newSet;
    });
  };

  const addTask = () => {
    const newTaskWithId = { ...newTask, id: Date.now().toString(), subtasks: [] };
    setTasks(prevTasks => [...prevTasks, newTaskWithId]);
    setNewTask({ title: '', description: '', status: 'To Do', assignedAgent: null });
  };

  const deleteTask = (taskId: string) => {
    setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));
  };

  const renderTask = (task: Task, level: number = 0) => (
    <Card key={task.id} className={`mb-4 ${level > 0 ? 'ml-6' : ''}`}>
      <CardHeader className="flex flex-row items-center justify-between p-4">
        <div className="flex items-center">
          {task.subtasks.length > 0 && (
            <Button variant="ghost" size="sm" onClick={() => toggleExpand(task.id)}>
              {expandedTasks.has(task.id) ? <ChevronDown className="h-4 w-4" /> : <ChevronRight className="h-4 w-4" />}
            </Button>
          )}
          <CardTitle className="text-lg font-semibold">{task.title}</CardTitle>
        </div>
        <div className="flex items-center space-x-2">
          {task.assignedAgent && (
            <Avatar className="h-8 w-8">
              <AvatarImage src={aiAgents.find(agent => agent.id === task.assignedAgent)?.avatar} />
              <AvatarFallback><Trash2 className="h-4 w-4" /></AvatarFallback>
            </Avatar>
          )}
          <Dialog>
            <DialogTrigger asChild>
              <Button variant="ghost" size="sm"><Edit className="h-4 w-4" /></Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Edit Task</DialogTitle>
              </DialogHeader>
              <div className="grid gap-4 py-4">
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="title" className="text-right">Title</Label>
                  <Input id="title" value={task.title} className="col-span-3" />
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="description" className="text-right">Description</Label>
                  <Textarea id="description" value={task.description} className="col-span-3" />
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="status" className="text-right">Status</Label>
                  <Select defaultValue={task.status}>
                    <SelectTrigger className="col-span-3">
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="To Do">To Do</SelectItem>
                      <SelectItem value="In Progress">In Progress</SelectItem>
                      <SelectItem value="Done">Done</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="agent" className="text-right">Assigned Agent</Label>
                  <Select defaultValue={task.assignedAgent || undefined}>
                    <SelectTrigger className="col-span-3">
                      <SelectValue placeholder="Select agent" />
                    </SelectTrigger>
                    <SelectContent>
                      {aiAgents.map(agent => (
                        <SelectItem key={agent.id} value={agent.id}>{agent.name}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </DialogContent>
          </Dialog>
          <Button variant="ghost" size="sm" onClick={() => deleteTask(task.id)}><Trash2 className="h-4 w-4" /></Button>
        </div>
      </CardHeader>
      <CardContent>
        <p className="text-sm text-gray-500 mb-2">{task.description}</p>
        <div className="flex items-center space-x-2">
          <Checkbox id={`task-${task.id}`} />
          <Label htmlFor={`task-${task.id}`}>{task.status}</Label>
        </div>
        {expandedTasks.has(task.id) && task.subtasks.length > 0 && (
          <div className="mt-4">
            {task.subtasks.map(subtask => renderTask(subtask, level + 1))}
          </div>
        )}
      </CardContent>
    </Card>
  );

  return (
    <div className="container mx-auto py-10">
      <h1 className="text-4xl font-bold mb-8">Task Manager</h1>
      <div className="mb-6">
        <Dialog>
          <DialogTrigger asChild>
            <Button>
              <Plus className="h-4 w-4 mr-2" /> Add New Task
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Add New Task</DialogTitle>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="new-title" className="text-right">Title</Label>
                <Input
                  id="new-title"
                  value={newTask.title}
                  onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}
                  className="col-span-3"
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="new-description" className="text-right">Description</Label>
                <Textarea
                  id="new-description"
                  value={newTask.description}
                  onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}
                  className="col-span-3"
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="new-status" className="text-right">Status</Label>
                <Select onValueChange={(value) => setNewTask({ ...newTask, status: value as 'To Do' | 'In Progress' | 'Done' })}>
                  <SelectTrigger className="col-span-3">
                    <SelectValue placeholder="Select status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="To Do">To Do</SelectItem>
                    <SelectItem value="In Progress">In Progress</SelectItem>
                    <SelectItem value="Done">Done</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="new-agent" className="text-right">Assigned Agent</Label>
                <Select onValueChange={(value) => setNewTask({ ...newTask, assignedAgent: value })}>
                  <SelectTrigger className="col-span-3">
                    <SelectValue placeholder="Select agent" />
                  </SelectTrigger>
                  <SelectContent>
                    {aiAgents.map(agent => (
                      <SelectItem key={agent.id} value={agent.id}>{agent.name}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
            <Button onClick={() => addTask()}>Add Task</Button>
          </DialogContent>
        </Dialog>
      </div>
      <div className="space-y-4">
        {tasks.map(task => renderTask(task))}
      </div>
    </div>
  );
}

================
File: components/Toast.tsx
================
'use client';

import React from 'react';

interface ToastProps {
    message: string;
    type: 'success' | 'error' | 'info';
    onClose: () => void;
}

const Toast: React.FC<ToastProps> = ({ message, type, onClose }) => {
    return (
        <div className={`flex items-center p-4 mb-2 rounded ${type === 'success' ? 'bg-green-100' : type === 'error' ? 'bg-red-100' : 'bg-blue-100'}`}>
            <span className="flex-grow">{message}</span>
            <button onClick={onClose} className="ml-4 text-gray-500 hover:text-gray-700">✖</button>
        </div>
    );
};

export default Toast;

================
File: components/ToastContainer.tsx
================
'use client';

import React, { useState } from 'react';
import Toast from './Toast';

const ToastContainer: React.FC = () => {
    const [toasts, setToasts] = useState<{ id: number; message: string; type: 'success' | 'error' | 'info' }[]>([]);
    let toastId = 0;

    const addToast = (message: string, type: 'success' | 'error' | 'info') => {
        if (toasts.length < 3) { // Limit the number of toasts
            setToasts(prev => [...prev, { id: toastId++, message, type }]);
        }
    };

    const removeToast = (id: number) => {
        setToasts(prev => prev.filter(toast => toast.id !== id));
    };

    return (
        <div className="fixed top-0 right-0 p-4">
            {toasts.map(toast => (
                <Toast key={toast.id} message={toast.message} type={toast.type} onClose={() => removeToast(toast.id)} />
            ))}
        </div>
    );
};

export default ToastContainer;

================
File: components/Tooltip.tsx
================
import React from 'react';

interface TooltipProps {
  message: string;
  children: React.ReactNode;
}

const Tooltip: React.FC<TooltipProps> = ({ message, children }) => {
  return (
    <div className="relative inline-block">
      {children}
      <div className="absolute bottom-full mb-2 left-1/2 transform -translate-x-1/2 bg-gray-700 text-white text-sm rounded py-1 px-2 opacity-0 transition-opacity duration-300 group-hover:opacity-100">
        {message}
      </div>
    </div>
  );
};

export default Tooltip;

================
File: components/TopBar.tsx
================
'use client';

import React, { useState } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { Bell, Settings, Home, MessageCircle, LogOut, Wrench } from 'lucide-react'; // Updated icon import
import { supabase } from '@/utils/supabase/client';
import ChatModal from './ChatModal'; // Import the ChatModal component

const TopBar: React.FC = () => {
    const [isChatOpen, setIsChatOpen] = useState(false);
    const router = useRouter();

    const handleLogout = async () => {
        try {
            // Sign out from Supabase
            const { error } = await supabase.auth.signOut();
            if (error) {
                console.error('Error logging out:', error.message);
                return;
            }

            // Clear any local storage
            localStorage.clear();

            // Clear any session cookies
            document.cookie.split(";").forEach((c) => {
                document.cookie = c
                    .replace(/^ +/, "")
                    .replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/");
            });

            // Redirect to the landing page
            router.push('/landing');
        } catch (error) {
            console.error('Unexpected error during logout:', error);
        }
    };

    const toggleChat = () => {
        setIsChatOpen(!isChatOpen);
    };

    return (
        <>
            <header className="flex items-center justify-between p-4 bg-gray-800 text-white">
                <h1 className="text-2xl font-bold">Quantum Labs</h1>
                <nav className="flex space-x-4">
                    <Link href="/" className="hover:underline flex items-center">
                        <Home className="h-5 w-5 mr-1" /> {/* Home icon */}
                        Home
                    </Link>

                    <Link href="/dashboard" className="hover:underline">Dashboard</Link>
                    <Link href="/members" className="hover:underline">Members</Link>
                    <Link href="/task-manager" className="hover:underline">Task Manager</Link>
                    <Link href="/agent-manager" className="hover:underline">Agent Manager</Link> {/* Added link to Agent Manager */}
                </nav>
                <div className="flex items-center space-x-4">
                    <button className="hover:bg-gray-700 p-2 rounded" onClick={toggleChat}>
                        <MessageCircle className="h-5 w-5" /> {/* Chat icon */}
                    </button>
                    <Link href="/settings" className="hover:bg-gray-700 p-2 rounded flex items-center">
                        <Settings className="h-5 w-5" /> {/* Gear icon */}
                    </Link>
                    <Link href="/notifications" className="hover:bg-gray-700 p-2 rounded">
                        <Bell className="h-5 w-5" /> {/* Bell icon */}
                    </Link>
                    <button className="hover:bg-gray-700 p-2 rounded" onClick={handleLogout}>
                        <LogOut className="h-5 w-5" /> {/* Logout icon */}
                    </button>
                </div>
            </header>
            {isChatOpen && <ChatModal onClose={toggleChat} />}
        </>
    );
}

export default TopBar;

================
File: components/YourComponent.tsx
================
import React from 'react';

interface YourComponentProps {
    propName?: string;
}

const YourComponent: React.FC<YourComponentProps> = ({ propName }) => {
    return (
        <div>
            <h1>{propName || 'Default Text'}</h1>
        </div>
    );
};

export default YourComponent;

================
File: contexts/ThemeContext.tsx
================
import React, { createContext, useContext, useState, ReactNode } from 'react';

// Create a context for the theme
const ThemeContext = createContext<{ theme: string; toggleTheme: () => void } | undefined>(undefined);

// Define the ThemeProvider component
export const ThemeProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [theme, setTheme] = useState('light'); // Default theme

  const toggleTheme = () => {
    setTheme((prev) => (prev === 'light' ? 'dark' : 'light'));
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

// Custom hook to use the ThemeContext
export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};

================
File: lib/activityData.ts
================
export interface ActivityData {
    name: string;
    tasks: number;
}

================
File: lib/dataProvider.ts
================
import { Task } from './task';

export interface Project {
  id: string;
  name: string;
  description: string;
  progress: number;
  startDate: string;
  endDate: string;
  teamId: string;
}

export interface Team {
  id: string;
  name: string;
  description: string;
  createdAt: string;
  members: TeamMember[];
}

export interface TeamMember {
  [x: string]: any;
  id: string;
  name: string;
  email: string;
  role: string;
  avatar: string;
}

export interface Taskboard {
  id: string;
  name: string;
  projectId: string;
  columns: TaskboardColumn[];
}

export interface TaskboardColumn {
  id: string;
  name: string;
  taskIds: string[];
}

export interface Settings {
  userId: string;
  theme: 'light' | 'dark';
  notifications: boolean;
  language: string;
}

export interface ActivityData {
  name: string;
  tasks: number;
}

export interface Member {
  id: string;
  name: string;
  email: string;
  role: string;
  avatar: string;
  project_id: string;
  team_id: string;
  avatar_url: string;
}

// Mock data
const mockTasks: Task[] = [
  // Add mock tasks here if needed
];

const mockProjects: Project[] = [
];

const mockTeams: Team[] = [
  {
    id: '1',
    name: 'Development Team',
    description: 'Responsible for building and maintaining our products',
    createdAt: '2023-06-01',
    members: [
      { id: '1', name: 'John Doe', email: 'john@example.com', role: 'Team Lead', avatar: 'https://avatar.vercel.sh/john.png' },
      { id: '2', name: 'Jane Smith', email: 'jane@example.com', role: 'Developer', avatar: 'https://avatar.vercel.sh/jane.png' },
    ]
  },
  {
    id: '2',
    name: 'Design Team',
    description: 'Creates user interfaces and experiences',
    createdAt: '2023-06-15',
    members: [
      { id: '3', name: 'Alice Johnson', email: 'alice@example.com', role: 'UI/UX Designer', avatar: 'https://avatar.vercel.sh/alice.png' },
    ]
  },
];

const mockTaskboards: Taskboard[] = [
  {
    id: '1',
    name: 'Website Redesign Board',
    projectId: '1',
    columns: [
      { id: 'col1', name: 'To Do', taskIds: ['2'] },
      { id: 'col2', name: 'In Progress', taskIds: ['1', '5'] },
      { id: 'col3', name: 'Done', taskIds: ['3'] },
    ]
  },
  {
    id: '2',
    name: 'Mobile App Board',
    projectId: '2',
    columns: [
      { id: 'col1', name: 'Backlog', taskIds: ['4'] },
      { id: 'col2', name: 'In Development', taskIds: [] },
      { id: 'col3', name: 'Testing', taskIds: [] },
      { id: 'col4', name: 'Completed', taskIds: [] },
    ]
  },
];

const mockSettings: Settings = {
  userId: '1',
  theme: 'light',
  notifications: true,
  language: 'en',
};

const mockWeeklyActivity: ActivityData[] = [
  { name: 'Mon', tasks: 3 },
  { name: 'Tue', tasks: 5 },
  { name: 'Wed', tasks: 2 },
  { name: 'Thu', tasks: 7 },
  { name: 'Fri', tasks: 4 },
  { name: 'Sat', tasks: 1 },
  { name: 'Sun', tasks: 0 },
];

const mockMembers: Member[] = [
  // Add mock members here if needed
];

export const mockClient = {
  fetchTasks: async (): Promise<Task[]> => {
    return new Promise(resolve => setTimeout(() => resolve(mockTasks), 1000));
  },
  fetchProjects: async (): Promise<Project[]> => {
    return new Promise(resolve => setTimeout(() => resolve(mockProjects), 1000));
  },
  fetchTeams: async (): Promise<Team[]> => {
    return new Promise(resolve => setTimeout(() => resolve(mockTeams), 1000));
  },
  fetchTaskboards: async (): Promise<Taskboard[]> => {
    return new Promise(resolve => setTimeout(() => resolve(mockTaskboards), 1000));
  },
  fetchSettings: async (): Promise<Settings> => {
    return new Promise(resolve => setTimeout(() => resolve(mockSettings), 1000));
  },
  fetchWeeklyActivity: async (): Promise<ActivityData[]> => {
    return new Promise(resolve => setTimeout(() => resolve(mockWeeklyActivity), 1000));
  },
  fetchMembers: async (): Promise<Member[]> => {
    return new Promise(resolve => setTimeout(() => resolve(mockMembers), 1000));
  },
};

================
File: lib/localData.ts
================
export interface Task {
    id: string;
    title: string;
    description: string;
    priority: 'low' | 'medium' | 'high';
    dueDate?: string;
    comments: number;
    status: 'todo' | 'inprogress' | 'done';
}

export interface Team {
    id: string;
    name: string;
    description: string;
    members: string[];
}

export interface Member {
    id: string;
    name: string;
    email: string;
    role: 'Admin' | 'Editor' | 'Viewer';
}

// Mock data
const tasks: Task[] = [
    { id: '1', title: 'Research competitors', description: 'Analyze top 5 competitors', priority: 'high', dueDate: '2023-06-30', comments: 2, status: 'todo' },
    { id: '2', title: 'Design mockups', description: 'Create initial design concepts', priority: 'medium', dueDate: '2023-07-15', comments: 0, status: 'todo' },
    { id: '3', title: 'Develop MVP', description: 'Build core features of the product', priority: 'high', dueDate: '2023-08-01', comments: 5, status: 'inprogress' },
    { id: '4', title: 'Project kickoff', description: 'Initial team meeting and project setup', priority: 'low', dueDate: '2023-06-01', comments: 1, status: 'done' },
];

const teams: Team[] = [
    { id: '1', name: 'Team Alpha', description: 'Focuses on product development.', members: ['1', '2'] },
    { id: '2', name: 'Team Beta', description: 'Handles marketing and outreach.', members: ['3'] },
];

const members: Member[] = [
    { id: '1', name: 'John Doe', email: 'john@example.com', role: 'Admin' },
    { id: '2', name: 'Jane Smith', email: 'jane@example.com', role: 'Editor' },
    { id: '3', name: 'Bob Johnson', email: 'bob@example.com', role: 'Viewer' },
];

// Functions to get data
export const getTasks = () => tasks;
export const getTeams = () => teams;
export const getMembers = () => members;

================
File: lib/logger.ts
================
const logger = {
  log: (message: string) => {
    if (typeof window === 'undefined') {
      // Server-side logging
      console.log(message);
    } else {
      // Client-side logging
      console.log(message);
    }
  },
  error: (message: string) => {
    if (typeof window === 'undefined') {
      console.error(message);
    } else {
      console.error(message);
    }
  },
  warn: (message: string) => {
    if (typeof window === 'undefined') {
      console.warn(message);
    } else {
      console.warn(message);
    }
  },
  info: (message: string) => {
    if (typeof window === 'undefined') {
      console.info(message);
    } else {
      console.info(message);
    }
  },
};

export default logger;

================
File: lib/mockData.ts
================
import { Task } from "@/lib/task";
import { Project } from "@/lib/project";

export const fetchMockTasks = (): Task[] => {
    return [
    ];
};

export const fetchMockProjects = (): Project[] => {
    return [
    ];
};

export const fetchMockActivityData = () => {
    return [
        { name: 'Mon', tasks: 3 },
        { name: 'Tue', tasks: 5 },
        { name: 'Wed', tasks: 2 },
        { name: 'Thu', tasks: 7 },
        { name: 'Fri', tasks: 4 },
        { name: 'Sat', tasks: 1 },
        { name: 'Sun', tasks: 0 },
    ];
};

export const mockData = {
    teams: [
        {
            id: 0,
            name: 'Team 0',
            tasks: [
                { id: 1, title: 'Task 1', completed: false },
                { id: 2, title: 'Task 2', completed: true },
            ],
        },
        {
            id: 1,
            name: 'Team 1',
            tasks: [
                { id: 3, title: 'Task 3', completed: false },
                { id: 4, title: 'Task 4', completed: true },
            ],
        },
        // Add more teams and tasks as needed
    ],
};

export const initialTasks = [
    { id: '1', title: 'Research competitors', description: 'Analyze top 5 competitors', priority: 'high', dueDate: '2023-06-30', comments: 2, status: 'todo' },
    { id: '2', title: 'Design mockups', description: 'Create initial design concepts', priority: 'medium', dueDate: '2023-07-15', comments: 0, status: 'todo' },
    { id: '3', title: 'Develop MVP', description: 'Build core features of the product', priority: 'high', dueDate: '2023-08-01', comments: 5, status: 'inprogress' },
    { id: '4', title: 'Project kickoff', description: 'Initial team meeting and project setup', priority: 'low', dueDate: '2023-06-01', comments: 1, status: 'done' },
];

================
File: lib/project.ts
================
export interface Project {
  id: number;
  name: string;
  description: string;
  progress: number;
  startDate: string;
  endDate: string;
  teamId: string;
}

================
File: lib/settings.ts
================
export interface Settings {
    userId: string;
    theme: 'light' | 'dark';
    notifications: boolean;
    language: string;
}

================
File: lib/task.ts
================
export interface Task {
    id: string;
    title: string;
    description: string;
    status: 'todo' | 'inprogress' | 'done';
    priority: 'low' | 'medium' | 'high';
    assignee: string;
    dueDate: string;
    comments: Comment[];
    project_id: string; // Required property
    columnId: string;   // Required property
    columnName: string; // Required property
    team_id: string;    // Required property
}

interface Comment {
    id: string;
    author: string;
    avatar: string;
    content: string;
    createdAt: string;
}

export interface Project {
    id: string;
    name: string;
    description: string;
    progress: number;
    startDate: string;
    endDate: string;
    teamId: string;
}

================
File: lib/taskboard.ts
================
import {TaskboardColumn} from "@/lib/taskboardColumn";

export interface Taskboard {
    id: string;
    name: string;
    projectId: string;
    columns: TaskboardColumn[];
}

================
File: lib/taskboardColumn.ts
================
import {Task} from "@/lib/task";

export interface TaskboardColumn {
    id: string;
    name: string;
    taskIds: string[];
    tasks: Task[];
}

================
File: lib/teamMember.ts
================
export interface TeamMember {
    id: string;
    name: string;
    email: string;
    role: string;
    avatar: string;
    project_id: string;
    team_id: string;
}

================
File: lib/utils.ts
================
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: public/images/google.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M22.56 12.25C22.56 11.47 22.49 10.72 22.36 10H12V14.255H17.92C17.665 15.63 16.89 16.795 15.725 17.575V20.335H19.28C21.36 18.42 22.56 15.6 22.56 12.25Z" fill="#4285F4" />
    <path d="M12 23C14.97 23 17.46 22.015 19.28 20.335L15.725 17.575C14.74 18.235 13.48 18.625 12 18.625C9.13504 18.625 6.71004 16.69 5.84504 14.09H2.17004V16.94C3.98004 20.535 7.70004 23 12 23Z" fill="#34A853" />
    <path d="M5.84501 14.09C5.62501 13.43 5.50001 12.725 5.50001 12C5.50001 11.275 5.62501 10.57 5.84501 9.91V7.06H2.17001C1.42501 8.59 1.00001 10.255 1.00001 12C1.00001 13.745 1.42501 15.41 2.17001 16.94L5.84501 14.09Z" fill="#FBBC05" />
    <path d="M12 5.375C13.615 5.375 15.065 5.93 16.205 7.02L19.36 3.865C17.455 2.09 14.965 1 12 1C7.70004 1 3.98004 3.465 2.17004 7.06L5.84504 9.91C6.71004 7.31 9.13504 5.375 12 5.375Z" fill="#EA4335" />
</svg>

================
File: public/images/image.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="200" height="200" viewBox="0 0 200 200">
  <g fill="none" stroke="#000" stroke-width="3">
    <!-- Outer brain shape -->
    <path d="M50,100 C50,70 70,50 100,50 C130,50 150,70 150,100 C150,130 130,150 100,150 C70,150 50,130 50,100 Z"/>
    
    <!-- Circuit lines -->
    <line x1="75" y1="75" x2="75" y2="50" />
    <line x1="125" y1="75" x2="125" y2="50" />
    <line x1="75" y1="125" x2="75" y2="150" />
    <line x1="125" y1="125" x2="125" y2="150" />
    <circle cx="75" cy="75" r="5" fill="#000"/>
    <circle cx="125" cy="75" r="5" fill="#000"/>
    <circle cx="75" cy="125" r="5" fill="#000"/>
    <circle cx="125" cy="125" r="5" fill="#000"/>

    <line x1="75" y1="75" x2="100" y2="100" />
    <line x1="125" y1="75" x2="100" y2="100" />
    <line x1="75" y1="125" x2="100" y2="100" />
    <line x1="125" y1="125" x2="100" y2="100" />
  </g>
</svg>

================
File: styles/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap');

html, body {
    height: 100%;
}

body {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    font-family: 'Roboto', sans-serif;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    background-color: #1a1a1a; /* Darker background color */
    color: #e0e0e0; /* Lighter text color for better contrast */
}

main {
    flex: 1 0 auto;
}

footer {
    flex-shrink: 0;
}

* {
    box-sizing: inherit;
}

.loader {
    border-top-color: #3498db;
    animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}

================
File: styles/theme.ts
================


================
File: supabase/migrations/20240929213325_remote_schema.sql
================
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";








ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";


















































































































































































































ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;

================
File: supabase/migrations/20240930000000_create_tables_and_set_permissions.sql
================
-- Enable UUID extension if not already enabled
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create projects table
CREATE TABLE IF NOT EXISTS public.projects (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name TEXT NOT NULL,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create tasks table
CREATE TABLE IF NOT EXISTS public.tasks (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title TEXT NOT NULL,
    description TEXT,
    status TEXT NOT NULL CHECK (status IN ('todo', 'in_progress', 'done')),
    project_id UUID NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE
);

-- Create team_members table
CREATE TABLE IF NOT EXISTS public.team_members (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    full_name TEXT NOT NULL,
    role TEXT NOT NULL,
    avatar_url TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Set permissions
REVOKE ALL ON TABLE public.projects FROM anon, authenticated;
GRANT SELECT ON TABLE public.projects TO anon, authenticated;

REVOKE ALL ON TABLE public.tasks FROM anon, authenticated;
GRANT SELECT ON TABLE public.tasks TO anon, authenticated;

REVOKE ALL ON TABLE public.team_members FROM anon, authenticated;
GRANT SELECT ON TABLE public.team_members TO anon, authenticated;

================
File: supabase/.gitignore
================
# Supabase
.branches
.temp
.env

================
File: supabase/config.toml
================
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "taskboard"

[api]
enabled = true
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. `public` is always included.
schemas = ["public", "graphql_public"]
# Extra schemas to add to the search_path of every request. `public` is always included.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[api.tls]
enabled = false

[db]
# Port to use for the local database URL.
port = 54322
# Port used by db diff command to initialize the shadow database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 15

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 54329
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv4)
# ip_version = "IPv6"
# The maximum length in bytes of HTTP request headers. (default: 4096)
# max_header_length = 4096

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1"
# OpenAI API Key to use for Supabase AI in the Supabase Studio.
openai_api_key = "env(OPENAI_API_KEY)"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

[storage.image_transformation]
enabled = true

# Uncomment to configure local storage buckets
# [storage.buckets.images]
# public = false
# file_size_limit = "50MiB"
# allowed_mime_types = ["image/png", "image/jpeg"]
# objects_path = "./images"

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://127.0.0.1:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://127.0.0.1:3000"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true
# Allow/disallow anonymous sign-ins to your project.
enable_anonymous_sign_ins = false
# Allow/disallow testing manual linking of accounts
enable_manual_linking = false

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = false
# If enabled, users will need to reauthenticate or have logged in recently to change their password.
secure_password_change = false
# Controls the minimum amount of time that must pass before sending another signup confirmation or password reset email.
max_frequency = "1s"

# Use a production-ready SMTP server
# [auth.email.smtp]
# host = "smtp.sendgrid.net"
# port = 587
# user = "apikey"
# pass = "env(SENDGRID_API_KEY)"
# admin_email = "admin@email.com"
# sender_name = "Admin"

# Uncomment to customize email template
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = true
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false
# Template for sending OTP to users
template = "Your code is {{ .Code }} ."
# Controls the minimum amount of time that must pass before sending another sms otp.
max_frequency = "5s"

# Use pre-defined map of phone number to OTP for testing.
# [auth.sms.test_otp]
# 4152127777 = "123456"

# Configure logged in session timeouts.
# [auth.sessions]
# Force log out after the specified duration.
# timebox = "24h"
# Force log out if the user has been inactive longer than the specified duration.
# inactivity_timeout = "8h"

# This hook runs before a token is issued and allows you to add additional claims based on the authentication method used.
# [auth.hook.custom_access_token]
# enabled = true
# uri = "pg-functions://<database>/<schema>/<hook_name>"

# Configure one of the supported SMS providers: `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
[auth.sms.twilio]
enabled = false
account_sid = ""
message_service_sid = ""
# DO NOT commit your Twilio auth token to git. Use environment variable substitution instead:
auth_token = "env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)"

[auth.mfa]
# Control how many MFA factors can be enrolled at once per user.
max_enrolled_factors = 10

# Control use of MFA via App Authenticator (TOTP)
[auth.mfa.totp]
enroll_enabled = true
verify_enabled = true

# Configure Multi-factor-authentication via Phone Messaging
# [auth.mfa.phone]
# enroll_enabled = true
# verify_enabled = true
# otp_length = 6
# template = "Your code is {{ .Code }} ."
# max_frequency = "10s"

# Use an external OAuth provider. The full list of providers are: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = ""
# DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:
secret = "env(SUPABASE_AUTH_EXTERNAL_APPLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = ""
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = ""
# If enabled, the nonce check will be skipped. Required for local sign in with Google auth.
skip_nonce_check = false

# Use Firebase Auth as a third-party provider alongside Supabase Auth.
[auth.third_party.firebase]
enabled = false
# project_id = "my-firebase-project"

# Use Auth0 as a third-party provider alongside Supabase Auth.
[auth.third_party.auth0]
enabled = false
# tenant = "my-auth0-tenant"
# tenant_region = "us"

# Use AWS Cognito (Amplify) as a third-party provider alongside Supabase Auth.
[auth.third_party.aws_cognito]
enabled = false
# user_pool_id = "my-user-pool-id"
# user_pool_region = "us-east-1"

[edge_runtime]
enabled = true
# Configure one of the supported request policies: `oneshot`, `per_worker`.
# Use `oneshot` for hot reload, or `per_worker` for load testing.
policy = "oneshot"
inspector_port = 8083

[analytics]
enabled = true
port = 54327
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage engine to use OrioleDB (S3)
orioledb_version = ""
# Configures S3 bucket URL, eg. <bucket_name>.s3-<region>.amazonaws.com
s3_host = "env(S3_HOST)"
# Configures S3 bucket region, eg. us-east-1
s3_region = "env(S3_REGION)"
# Configures AWS_ACCESS_KEY_ID for S3 bucket
s3_access_key = "env(S3_ACCESS_KEY)"
# Configures AWS_SECRET_ACCESS_KEY for S3 bucket
s3_secret_key = "env(S3_SECRET_KEY)"

================
File: types/testing-library__jest-dom/index.d.ts
================
import '@testing-library/jest-dom';

================
File: types/index.ts
================
export interface Project {
  id: string;
  name: string;
  description: string;
  status: string;
  progress: number;
  dueDate: string;
  assignees: string[];
  tags: string[];
}

export interface Task {
  id: string;
  title: string;
  description: string;
  objective: string;
  difficulty: string;
  estimatedTime: string;
  status: string;
  assignedAgents: Agent[]; // Ensure this is an array of Agent objects
  recommendedTools: string[];
  projectId: string;
  assignee: string;
  dueDate: string;
  priority: string;
  agents: string[];
}

export interface User {
  id: string;
  name: string;
  email: string;
  role: string;
  avatar: string;
}

export interface Announcement {
  id: string;
  title: string;
  content: string;
  date: string;
  author: string;
}


export interface Agent {
  id: string;
  name: string;
  avatar: string;
  expertise: string;
  backstory: string;
  tools: string[];

}


export interface TaskDetailViewProps {
  task: Task;
  isOpen: boolean;
  onClose: () => void;
  onUpdate: (updatedTask: Task) => void;
  agents: Agent[];
  params: { taskId: string };
}
// Mock data for agents (replace with actual data from agent-manager)
export const agentsData: Agent[] = [
    { id: "1", name: "Alice Johnson", avatar: "/placeholder.svg?height=40&width=40", expertise: "Frontend Development", backstory: "Alice is a frontend developer with a passion for creating beautiful and functional user interfaces.", tools: ["React", "Next.js", "Tailwind CSS"] },
    { id: "2", name: "Bob Smith", avatar: "/placeholder.svg?height=40&width=40", expertise: "Backend Development", backstory: "Bob is a backend developer with a passion for creating scalable and secure web applications.", tools: ["Node.js", "Express", "MongoDB"] },
    { id: "3", name: "Charlie Brown", avatar: "/placeholder.svg?height=40&width=40", expertise: "DevOps", backstory: "Charlie is a devops engineer with a passion for creating scalable and secure web applications.", tools: ["Docker", "Kubernetes", "Jenkins"] },
    { id: "4", name: "Diana Prince", avatar: "/placeholder.svg?height=40&width=40", expertise: "UI/UX Design", backstory: "Diana is a ui/ux designer with a passion for creating beautiful and functional user interfaces.", tools: ["Figma", "Adobe XD", "Sketch"] },
];

================
File: types/react-mermaid2.d.ts
================
declare module 'react-mermaid2' {
  import React from 'react';
  const Mermaid: React.FC<{ chart: string }>;
  export default Mermaid;
}

================
File: utils/supabase/client.ts
================
import { createClient } from '@supabase/supabase-js';

// Ensure you have the correct environment variables set
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const SUPABASE_ANON_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

// Create a single instance of the Supabase client
export const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

================
File: utils/supabase/server.ts
================
import { createServerClient } from "@supabase/ssr";
import { cookies } from "next/headers";

export const createClient = () => {
  const cookieStore = cookies();

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll();
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) => {
              cookieStore.set(name, value, options);
            });
          } catch {
            // The `set` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    },
  );
};

================
File: utils/auth.ts
================
'use server';

import { createClient } from '@supabase/supabase-js';
import { redirect } from 'next/navigation';

export async function signOut() {
  const supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!);
  await supabase.auth.signOut();
  redirect('/login');
}

================
File: utils/cn.ts
================
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

================
File: utils/dataProvider.ts
================
import { Task, Project } from '../lib/task';
import { TeamMember } from '../lib/teamMember';

// Example data provider functions
const getTasks = async (): Promise<Task[]> => {
  return [
    // Add more tasks as needed
  ];
};

const getProjects = async (): Promise<Project[]> => {
  return [
    { id: '1', name: 'Project A', description: 'Description of Project A', progress: 0, startDate: '2023-01-01', endDate: '2023-12-31', teamId: '1' },
  ];
};

const getTeamMembers = async (): Promise<TeamMember[]> => {
  return [
    { id: '1', name: 'John Doe', email: 'john@example.com', role: 'Team Lead', avatar: 'https://avatar.vercel.sh/john.png', project_id: '1', team_id: '1' },
  ];
};

// Export the data provider functions
export { getTasks, getProjects, getTeamMembers };

================
File: utils/mock-client.ts
================
const mockClient = {
  auth: {
    getUser: async () => ({ user: { id: 'mock-user-id', email: 'mock@example.com' } }),
  },
  // Add other methods as needed
};

export default mockClient;

================
File: utils/mockClient.ts
================
import { Task, Project } from '../lib/task';
import { TeamMember } from '../lib/teamMember';

// Remove mock data
const mockTasks: Task[] = []; // No tasks available
const mockProjects: Project[] = []; // No projects available
const mockTeamMembers: TeamMember[] = []; // No team members available

// Export mock data if needed
export { mockTasks, mockProjects, mockTeamMembers };

================
File: utils/stubData.ts
================
export const stubProjects = [
  {
    id: '1',
    name: 'Website Redesign',
    description: 'Overhaul of company website',
    status: 'active',
    created_at: '2023-06-01',
  },
  {
    id: '2',
    name: 'Mobile App Development',
    description: 'Creating a new mobile app',
    status: 'active',
    created_at: '2023-06-15',
  },
  {
    id: '3',
    name: 'Marketing Campaign',
    description: 'Q3 marketing initiative',
    status: 'on-hold',
    created_at: '2023-07-01',
  },
]

================
File: utils/supabase-client.ts
================
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables')
}

const supabase = createClient(supabaseUrl, supabaseAnonKey)

export default supabase

================
File: utils/supabaseClient.ts
================
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

export const supabase = createClient(supabaseUrl!, supabaseAnonKey!);

================
File: utils/supabaseDbClient.ts
================
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables')
}

const supabase = createClient(supabaseUrl, supabaseAnonKey)

export default supabase

================
File: utils/utils.ts
================
import { redirect } from "next/navigation";

/**
 * Redirects to a specified path with an encoded message as a query parameter.
 * @param {('error' | 'success')} type - The type of message, either 'error' or 'success'.
 * @param {string} path - The path to redirect to.
 * @param {string} message - The message to be encoded and added as a query parameter.
 * @returns {never} This function doesn't return as it triggers a redirect.
 */
export function encodedRedirect(
  type: "error" | "success",
  path: string,
  message: string,
) {
  return redirect(`${path}?${type}=${encodeURIComponent(message)}`);
}

================
File: .babelrc
================
{
  "presets": [
    ["next/babel"],
    "@babel/preset-env",
    "@babel/preset-react",
    "@babel/preset-typescript"
  ]
}

================
File: .eslintrc.js
================
module.exports = {
  extends: [
    'next/core-web-vitals',
    'plugin:@typescript-eslint/recommended',
  ],
  parser: '@typescript-eslint/parser',
  plugins: ['@typescript-eslint'],
  root: true,
  env: {
    node: true,
    browser: true,
  },
};

================
File: .eslintrc.json
================
{
    "extends": [
        "next/core-web-vitals",
        "plugin:@typescript-eslint/recommended"
    ],
    "parser": "@typescript-eslint/parser",
    "plugins": ["@typescript-eslint"],
    "root": true
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

.env*

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
.aider*
node_modules/
/test-results/
/playwright-report/
/blob-report/
/playwright/.cache/

package-lock.json

================
File: babel.config.js
================
module.exports = {
  presets: [
    '@babel/preset-env', // Transpile ES6+ syntax
    '@babel/preset-react', // Transpile JSX
    '@babel/preset-typescript', // Transpile TypeScript
  ],
  plugins: [
    // Remove any plugins related to import assertions if they exist
  ],
};

================
File: eslint.config.js
================
const js = require('@eslint/js');
const tsParser = require('@typescript-eslint/parser');
const tsPlugin = require('@typescript-eslint/eslint-plugin');

module.exports = [
  js.configs.recommended,
  {
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      parser: tsParser,
    },
    plugins: {
      '@typescript-eslint': tsPlugin,
    },
    rules: {
      ...tsPlugin.configs.recommended.rules,
    },
  },
  {
    ignores: ['.next/*', 'node_modules/*'],
  },
];

================
File: global.d.ts
================
import '@testing-library/jest-dom/extend-expect';

================
File: jest-setup.ts
================
import '@testing-library/jest-dom/extend-expect';

declare global {
    namespace jest {
        interface Matchers<R> {
            toBeInTheDocument(): R;
            toHaveClass(className: string): R;
        }
    }
}

================
File: jest.config.js
================
module.exports = {
    preset: 'ts-jest',
    testEnvironment: 'jsdom',
    transform: {
        '^.+\\.tsx?$': ['ts-jest', {
            tsconfig: 'tsconfig.json', // Ensure this points to your tsconfig file
        }],
        '^.+\\.jsx?$': 'babel-jest', // Use Babel for JSX files
    },
    moduleNameMapper: {
        '\\.(css|less|scss|sass)$': 'identity-obj-proxy', // Mock CSS imports
    },
    transformIgnorePatterns: [
        '/node_modules/(?!your-module-to-transform)', // Adjust this if you have specific modules to transform
    ],
};

================
File: next.config.js
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  experimental: {
    // Remove the 'appDir' option as it's no longer needed in Next.js 14
  },
  // Remove the 'metadataBase' option if it's not needed
}

module.exports = nextConfig

================
File: package.json
================
{
  "private": true,
  "name": "Task-Flow",
  "version": "1.0.0",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "test": "jest",
    "test:watch": "jest --watch",
    "type-check": "tsc --noEmit",
    "clean": "rm -rf .next",
    "clean:build": "npm run clean && npm run build",
    "test:e2e": "playwright test --ui",
    "test:all": "pnpm install && pnpm build && pnpm test && concurrently \"pnpm run dev\" \"npx playwright test\" --kill-others --success first",
    "test:playwright": "npx playwright test"
  },
  "dependencies": {
    "@babel/plugin-proposal-class-properties": "^7.18.6",
    "@babel/plugin-transform-class-properties": "^7.25.7",
    "@geist-ui/core": "^2.3.8",
    "@geist-ui/react": "^2.2.5",
    "@hookform/resolvers": "^3.9.0",
    "@jest/globals": "^29.7.0",
    "@monaco-editor/react": "^4.6.0",
    "@nextui-org/dropdown": "^2.1.31",
    "@radix-ui/react-accordion": "^1.2.1",
    "@radix-ui/react-avatar": "^1.1.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-scroll-area": "^1.2.0",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.1",
    "@radix-ui/react-tabs": "^1.1.1",
    "@radix-ui/react-toast": "^1.2.2",
    "@reach/dialog": "^0.18.0",
    "@reduxjs/toolkit": "^2.2.7",
    "@supabase/auth-helpers-nextjs": "^0.10.0",
    "@supabase/ssr": "latest",
    "@supabase/supabase-js": "latest",
    "@types/pg": "^8.11.10",
    "@vercel/kv": "^3.0.0",
    "@vercel/speed-insights": "^1.0.12",
    "autoprefixer": "^10.4.20",
    "axios": "^1.7.7",
    "chart.js": "^4.4.4",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "concurrently": "^9.0.1",
    "dotenv": "^16.4.5",
    "framer-motion": "^11.11.1",
    "geist": "^1.3.1",
    "helpers": "^0.0.6",
    "lucide-react": "^0.446.0",
    "next": "^14.2.14",
    "pg": "^8.13.0",
    "postcss": "^8.4.47",
    "react": "^18.3.1",
    "react-beautiful-dnd": "^13.1.1",
    "react-chartjs-2": "^5.2.0",
    "react-dnd": "^16.0.1",
    "react-dnd-html5-backend": "^16.0.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.0",
    "react-hot-toast": "^2.4.1",
    "react-mermaid2": "^0.1.4",
    "react-redux": "^9.1.2",
    "react-toastify": "^10.0.5",
    "recharts": "^2.12.7",
    "redux": "^5.0.1",
    "rxjs": "^7.8.1",
    "shell-quote": "^1.8.1",
    "supports-color": "^8.1.1",
    "tailwind-merge": "^2.5.3",
    "tailwindcss": "^3.4.13",
    "tree-kill": "^1.2.2",
    "typescript": "5.3.3",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@babel/core": "^7.25.7",
    "@babel/preset-env": "^7.25.7",
    "@babel/preset-react": "^7.25.7",
    "@babel/preset-typescript": "^7.25.7",
    "@playwright/test": "^1.47.2",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^14.5.2",
    "@types/jest": "^29.5.13",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-beautiful-dnd": "^13.1.8",
    "@types/react-dom": "18.2.18",
    "@types/supertest": "^6.0.2",
    "@typescript-eslint/eslint-plugin": "^5.62.0",
    "@typescript-eslint/parser": "^5.62.0",
    "babel-jest": "^29.7.0",
    "chromedriver": "^129.0.2",
    "concurrently": "^9.0.1",
    "encoding": "^0.1.13",
    "eslint": "^9.12.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "supertest": "^7.0.0",
    "ts-jest": "^29.2.5"
  },
  "resolutions": {
    "punycode": "2.1.0"
  },
  "packageManager": "pnpm@8.x"
}

================
File: playwright.config.ts
================
/// <reference types="node" />

import { defineConfig, devices } from '@playwright/test';
import dotenv from 'dotenv';
import path from 'path';

declare const process: {
  env: {
    VERCEL_AUTOMATION_BYPASS_SECRET?: string;
    CI?: string;
    BASE_URL?: string;
  };
  cwd: () => string;
};

// Load environment variables from .env.local
dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });

const bypassToken = process.env.VERCEL_AUTOMATION_BYPASS_SECRET;

/**
 * See https://playwright.dev/docs/test-configuration.
 */
export default defineConfig({
  testDir: './e2e', // Directory where your Playwright tests are located
  /* Run tests in files in parallel */
  fullyParallel: true,
  /* Fail the build on CI if you accidentally left test.only in the source code. */
  forbidOnly: !!process.env.CI,
  /* Retry on CI only */
  retries: process.env.CI ? 2 : 0,
  /* Opt out of parallel tests on CI. */
  workers: process.env.CI ? 1 : undefined,
  /* Reporter to use. See https://playwright.dev/docs/test-reporters */
  reporter: [
    ['html'],
  ],
  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */
  use: {
    /* Base URL to use in actions like `await page.goto('/')`. */
    baseURL: process.env.BASE_URL || 'https://the-front-9t3xn2sr4-dynamicprompt.vercel.app',
    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */
    trace: 'on-first-retry',
    headless: false, // Set to false for local development
    extraHTTPHeaders: bypassToken ? { 'x-vercel-protection-bypass': bypassToken } : {},
    // Add these options for streaming websites
    viewport: { width: 1280, height: 720 },
    video: 'on-first-retry',
    screenshot: 'only-on-failure',
  },

  /* Configure projects for major browsers */
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },

    {
      name: 'firefox',
      use: { ...devices['Desktop Firefox'] },
    },

    {
      name: 'webkit',
      use: { ...devices['Desktop Safari'] },
    },

    /* Test against mobile viewports. */
    // {
    //   name: 'Mobile Chrome',
    //   use: { ...devices['Pixel 5'] },
    // },
    // {
    //   name: 'Mobile Safari',
    //   use: { ...devices['iPhone 12'] },
    // },

    /* Test against branded browsers. */
    // {
    //   name: 'Microsoft Edge',
    //   use: { ...devices['Desktop Edge'], channel: 'msedge' },
    // },
    // {
    //   name: 'Google Chrome',
    //   use: { ...devices['Desktop Chrome'], channel: 'chrome' },
    // },
  ],

  /* Run your local dev server before starting the tests */
  // webServer: {
  //   command: 'npm run start',
  //   url: 'http://127.0.0.1:3000',
  //   reuseExistingServer: !process.env.CI,
  // },
});

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

================
File: postcss.config.ts
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

================
File: project.md
================
# Project Name: Task-Flow

## Description

Task-Flow is a comprehensive task management application designed to streamline project workflows and enhance productivity. It leverages modern web technologies to provide a seamless user experience, allowing users to manage tasks efficiently with features like real-time updates, drag-and-drop task organization, and integration with popular tools.

## Current Application Structure

The application currently consists of the following main pages and components:

1. **Home Page** (`app/page.tsx`):
   - Serves as the landing page for authenticated users
   - Displays a welcome message and an overview of available features
   - Provides quick access links to key sections of the application

2. **Dashboard** (`app/dashboard/page.tsx`):
   - Offers a comprehensive overview of tasks, projects, and team activities
   - Includes data visualizations for task completion rates and project progress

3. **AI Agents** (`app/ai-agents/page.tsx`):
   - Lists AI agents with their current status, tasks completed, efficiency, and seniority
   - Allows users to view and manage AI agents assisting with task automation

4. **Tasks** (`app/tasks/page.tsx`):
   - Displays a list of tasks with their titles, statuses, due dates, and assignees
   - Provides functionality to add new tasks, search, filter, and sort tasks
   - Includes a table view with pagination for easy task management
   - Allows users to view task details and perform actions on individual tasks

5. **Teams** (link available, page to be implemented):
   - Intended for team management and collaboration features

6. **Projects** (link available, page to be implemented):
   - Planned to provide project creation, viewing, and management capabilities

7. **Schedule** (accessible via TabBar, page to be implemented):
   - Planned to offer calendar and scheduling functionalities

8. **Quick Actions** (accessible via TabBar, page to be implemented):
   - Will provide rapid access to frequently used functions

9. **Settings** (accessible via TopBar, page to be implemented):
   - Will allow users to configure application preferences and account settings

10. **Notifications** (accessible via TopBar, page to be implemented):
    - Intended to display user notifications and alerts

## Navigation Components

- **TopBar** (`components/TopBar.tsx`):
  - Provides main navigation links (Dashboard, Teams, Projects)
  - Includes a hamburger menu for additional options (Settings, Help & Support, Logout)
  - Displays notification and settings icons

- **TabBar** (`components/TabBar.tsx`):
  - Offers quick access to Home, AI Agents, Task Board, and Analytics
  - The Task Board links to '/taskboard'

- **FloatingActionButton** (`components/FloatingActionButton.tsx`):
  - Allows quick creation of new tasks, projects, and agents
  - Includes an option to open the chat bot (functionality to be implemented)

## Context and Technology Stack

Task-Flow is built using the latest Next.js framework (version 14.2.14) with App Routing, ensuring a robust and scalable architecture. The project utilizes TypeScript for type safety and Playwright for end-to-end testing, ensuring high-quality code and reliable performance. The application is styled using Vercel's Geist UI components and Tailwind CSS, maintaining a consistent and modern design language.

Key technologies and tools used in Task-Flow include:
- Next.js for server-side rendering and static site generation
- TypeScript for type safety
- Playwright for end-to-end testing
- Vercel's Geist UI and Tailwind CSS for styling
- Supabase for backend services and authentication
- Redux for state management (to be implemented)
- React Hooks (useState) for local state management in components

The project is configured to run tests using npm, with separate workflows for unit tests and Playwright tests to ensure comprehensive test coverage. The application is designed to be deployed on Vercel, taking advantage of its seamless integration with Next.js for optimal performance and scalability.

Task-Flow aims to provide a user-friendly interface for managing tasks, making it an ideal solution for teams and individuals looking to improve their productivity and project management capabilities. The application is currently in active development, with core features implemented and others planned for future iterations.

## Recent Updates

- Added a new Tasks page with functionality to view, add, search, filter, and sort tasks
- Implemented a table view for tasks with status indicators and action buttons
- Added pagination to the Tasks page for improved navigation through large task lists
- Integrated new UI components such as Badges for task status visualization

The Task-Flow application continues to evolve, with ongoing improvements and new features being added to enhance its task management capabilities and user experience.

================
File: qodana.yaml
================
#-------------------------------------------------------------------------------#
#               Qodana analysis is configured by qodana.yaml file               #
#             https://www.jetbrains.com/help/qodana/qodana-yaml.html            #
#-------------------------------------------------------------------------------#
version: "1.0"

#Specify inspection profile for code analysis
profile:
  name: qodana.starter

#Enable inspections
#include:
#  - name: <SomeEnabledInspectionId>

#Disable inspections
#exclude:
#  - name: <SomeDisabledInspectionId>
#    paths:
#      - <path/where/not/run/inspection>

#Execute shell command before Qodana execution (Applied in CI/CD pipeline)
#bootstrap: sh ./prepare-qodana.sh

#Install IDE plugins before Qodana execution (Applied in CI/CD pipeline)
#plugins:
#  - id: <plugin.id> #(plugin id can be found at https://plugins.jetbrains.com)

#Specify Qodana linter for analysis (Applied in CI/CD pipeline)
linter: jetbrains/qodana-js:latest

================
File: README.md
================
# QuantumLabs Task Management Application 🚀

## Table of Contents
- [Overview](#overview)
- [Features](#features)
- [Backend Database](#backend-database)
- [Installation](#installation)
- [Usage](#usage)
- [Testing](#testing)
- [To Do](#to-do)
- [Inspiration](#inspiration)
- [Live Application](#live-application)
- [AI Disclosure](#ai-disclosure)
- [Contributing](#contributing)
- [License](#license)

## Overview
The **QuantumLabs Task Management Application** is a powerful and intuitive task management board designed to help users efficiently create, manage, and organize tasks. With features like drag-and-drop functionality and customizable task cards, users can easily track progress and collaborate effectively. 🌟

## Features
- **Task Management**: Create, edit, and delete tasks with essential fields such as title, description, priority, and due date. 📝
- **Drag-and-Drop Functionality**: Seamlessly move tasks between lists (To Do, In Progress, Done) to update their status. 🔄
- **User Authentication**: Secure login and signup using Supabase Auth for user management. 🔐
- **Real-time Updates**: Changes are reflected in real-time across the application, enhancing collaboration. ⏱️
- **Responsive Design**: Built with Tailwind CSS, ensuring a clean and intuitive user interface that works on all devices. 📱💻
- **Custom Jobs**: Define and manage custom job types tailored to specific project needs, allowing for greater flexibility and organization. ⚙️

## Backend Database
- **Supabase**: The application utilizes Supabase as the backend database, providing a PostgreSQL database with real-time capabilities. 🗄️
- **Database Setup**: Ensure that your Supabase project is configured with the necessary tables and schemas to support task management features.

## Installation
To set up the project locally, follow these steps:

1. **Clone the repository**:
   ```bash
   git clone https://github.com/khaosans/taskboard.git
   cd taskboard
   ```

2. **Install dependencies**:
   ```bash
   pnpm install
   ```

3. **Set up Supabase**:
   - Create a Supabase project at [Supabase Dashboard](https://app.supabase.com).
   - Obtain your Supabase URL and Anon Key from the API settings.

4. **Configure environment variables**:
   - Create a `.env.local` file in the root directory and add the following:
     ```plaintext
     SUPABASE_URL=<your-supabase-url>
     SUPABASE_ANON_KEY=<your-supabase-anon-key>
     ```

## Usage
1. **Run the development server**:
   ```bash
   pnpm run dev
   ```

2. **Open your browser** and navigate to [http://localhost:3000](http://localhost:3000) to view the application. 🌐

3. **Create an account** or **log in** to start managing your tasks.

## Testing
To ensure the application functions as expected, unit tests are included. You can run the tests using the following command:
```bash
pnpm test
```
Make sure all tests pass before making any changes to the codebase. ✅

## To Do
- ~~**Fix Authentication**: Review and resolve any issues related to user authentication with Supabase.~~ ✔️
- ~~**Enhance Unit Testing**: Add more tests to cover edge cases and ensure robust functionality.~~ ✔️
- **Implement AI Agent System**: Integrate AI capabilities for task management and automation. 🤖
- **Add Task Dependencies**: Allow users to set dependencies between tasks. 🔗
- **Milestone Tracking**: Enable users to define and track project milestones. 🎯
- **Customizable Workflows**: Allow users to create tailored workflows for projects. ⚙️
- **Resource Allocation**: Track and manage resources associated with tasks. 📊
- **Cost Tracking**: Implement budget management and cost analysis features. 💰

## Inspiration
The QuantumLabs Task Management Application is inspired by the need for efficient task management in a world increasingly reliant on AI and automation. By integrating advanced AI capabilities with user-friendly design, we aim to empower users to manage their tasks more effectively and focus on what truly matters. 💡

## Live Application
You can access the live application at [QuantumLabs Task Management App](https://the-front-1.vercel.app/landing). 🌟

## AI Disclosure
The QuantumLabs Task Management Application utilizes AI agents to enhance task management and automation. These AI agents analyze data, automate repetitive tasks, and provide insights to improve productivity. While AI agents offer significant benefits, they operate based on probabilistic models and may not always produce deterministic outcomes. Users are encouraged to review and validate AI-generated suggestions to ensure accuracy and relevance. 🤖

## Contributing
Contributions are welcome! Please follow these steps to contribute:

1. Fork the repository.
2. Create a new branch (`git checkout -b feature/YourFeature`).
3. Make your changes and commit them (`git commit -m 'Add some feature'`).
4. Push to the branch (`git push origin feature/YourFeature`).
5. Open a pull request.

## License
This project is licensed under the MIT License. 📄

================
File: rename-and-update.js
================
const fs = require('fs');
const path = require('path');

const rootDir = __dirname;
const componentsDir = path.join(rootDir, 'components');

// Function to convert PascalCase or camelCase to kebab-case
function toKebabCase(str) {
  return str.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();
}

// Rename files
const renamedFiles = {};
fs.readdirSync(componentsDir).forEach(file => {
  if (file.endsWith('.tsx') || file.endsWith('.ts')) {
    const oldPath = path.join(componentsDir, file);
    const newFileName = toKebabCase(file);
    const newPath = path.join(componentsDir, newFileName);
    fs.renameSync(oldPath, newPath);
    renamedFiles[file] = newFileName;
    console.log(`Renamed: ${file} -> ${newFileName}`);
  }
});

// Update imports
function updateImports(dir) {
  fs.readdirSync(dir, { withFileTypes: true }).forEach(dirent => {
    const filePath = path.join(dir, dirent.name);
    if (dirent.isDirectory() && !dirent.name.startsWith('.') && dirent.name !== 'node_modules') {
      updateImports(filePath);
    } else if (dirent.isFile() && (filePath.endsWith('.tsx') || filePath.endsWith('.ts') || filePath.endsWith('.js'))) {
      let content = fs.readFileSync(filePath, 'utf8');
      let updated = false;
      
      Object.entries(renamedFiles).forEach(([oldFile, newFile]) => {
        const oldName = oldFile.replace(/\.tsx?$/, '');
        const newName = newFile.replace(/\.tsx?$/, '');
        const regex = new RegExp(`from\\s+['"](.*/components/)?${oldName}['"]`, 'g');
        if (regex.test(content)) {
          content = content.replace(regex, `from '$1${newName}'`);
          updated = true;
        }
      });
      
      if (updated) {
        fs.writeFileSync(filePath, content);
        console.log(`Updated imports in: ${filePath}`);
      }
    }
  });
}

// Update imports in all directories
updateImports(rootDir);

console.log('Renaming and updating imports completed.');

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: 'class', // Enable dark mode
  content: [
    './app/**/*.{js,ts,jsx,tsx}', // Adjust paths as necessary
    './components/**/*.{js,ts,jsx,tsx}',
    './pages/**/*.{js,ts,jsx,tsx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

================
File: tailwind.config.ts
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      // Your custom theme extensions
    },
  },
  plugins: [],
};

================
File: tsconfig.jest.json
================
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "jsx": "react-jsx",
    "esModuleInterop": true
  }
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": [
        "./*"
      ]
    },
    "typeRoots": [
      "./node_modules/@types",
      "./@types"
    ],
    "types": [
      "jest",
      "node"
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    "**/*.js",
    "**/*.jsx",
    ".next/types/**/*.ts",
    "types",
    "app/**/*"
  ],
  "exclude": [
    "node_modules"
  ]
}

================
File: vercel.json
================
{
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/next"
    }
  ],
  "buildCommand": "pnpm install && pnpm build"
}
